(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   1068078,      19454]
NotebookOptionsPosition[   1059727,      19313]
NotebookOutlinePosition[   1060128,      19329]
CellTagsIndexPosition[   1060085,      19326]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Working with Quantum Circuits", "Section",
 CellChangeTimes->{{3.9446611540150757`*^9, 
  3.944661160719328*^9}},ExpressionUUID->"980bf7e2-554e-0a4b-ad5c-\
b59ac0e49f18"],

Cell[BoxData[
 RowBox[{"<<", "Wolfram`QuantumFramework`"}]], "Code",
 CellChangeTimes->{{3.9388807111816216`*^9, 3.938880716857874*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"1d74e3c1-e772-e543-9862-b586cb810fb0"],

Cell[CellGroupData[{

Cell["Key Concepts", "Subsection",
 CellChangeTimes->{{3.9442375757968807`*^9, 
  3.944237579391901*^9}},ExpressionUUID->"f7f4068e-7cfc-7b4e-8e26-\
1c6b5d1c6413"],

Cell["Circuit Depth", "Item",
 CellChangeTimes->{{3.944238805243639*^9, 3.944238807884527*^9}, {
  3.9442471936097546`*^9, 
  3.9442471953925533`*^9}},ExpressionUUID->"12c94018-20bd-a84f-b7a8-\
d2f477d58ad7"],

Cell["Pauli Matrices", "Item",
 CellChangeTimes->{{3.944238805243639*^9, 3.944238807884527*^9}, {
  3.944239255940647*^9, 3.9442392603083515`*^9}, {3.944247206720112*^9, 
  3.944247208832842*^9}},ExpressionUUID->"22a4d4f5-eb63-014d-81c2-\
3be705068ff8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Specifying Circuits", "Subsection",
 CellChangeTimes->{{3.9442375829499187`*^9, 3.944237583581255*^9}, {
  3.9442388152045307`*^9, 
  3.9442388193881054`*^9}},ExpressionUUID->"d38d9080-ef74-8a48-83db-\
3f1048a2fb28"],

Cell[TextData[{
 "You have already seen many examples using the ",
 ButtonBox["Wolfram Quantum Framework",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/resources/\
Wolfram/QuantumFramework/"], None},
  ButtonNote->
   "https://resources.wolframcloud.com/PacletRepository/resources/Wolfram/\
QuantumFramework/"],
 ". Let\[CloseCurlyQuote]s take a moment to explicitly learn more about the \
framework."
}], "Text",
 CellChangeTimes->{{3.9442388294598694`*^9, 3.9442388384931183`*^9}, {
  3.944238869621073*^9, 3.944238887509653*^9}, {3.944239052643076*^9, 
  3.9442390527957973`*^9}},ExpressionUUID->"c76afedd-eb51-9940-8db7-\
cfba24c03154"],

Cell["\<\
The framework supports a convenient shorthand notation for creating circuits. \
For example, consider the following circuit:\
\>", "Text",
 CellChangeTimes->{{3.9442390954917603`*^9, 3.94423909900424*^9}, {
  3.944239171708334*^9, 3.944239178229347*^9}, {3.944240373153532*^9, 
  3.944240378958683*^9}, {3.944240498471586*^9, 
  3.944240510423811*^9}},ExpressionUUID->"3c694177-1269-614b-b3f1-\
363b318163e3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"circuit1", "=", 
  RowBox[{"QuantumCircuitOperator", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<0000\>\"", ",", 
     RowBox[{"\"\<H\>\"", "->", "1"}], ",", 
     RowBox[{"\"\<Z\>\"", "->", "2"}]}], "}"}], "]"}]}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"bf176c13-a4bf-6f4f-b1f8-4b9532a54520"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumCircuitOperator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            TagBox[
             TooltipBox[
              GraphicsBox[{{{
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{1.375, -1}, {1.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{1.375, -2}, {1.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -1}, {2.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -2}, {2.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{1.375, -3}, {2.625, -3}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{1.375, -4}, {2.625, -4}}]}}}, {
                 TagBox[
                  TooltipBox[{
                    EdgeForm[
                    Hue[0.62, 0.45, 0.87]], 
                    FaceForm[
                    Directive[
                    Hue[0.62, 0.45, 0.87], 
                    Opacity[0.3]]], 
                    GeometricTransformationBox[
                    PolygonBox[CompressedData["
1:eJxFVAtMU1cYvtgyBmrM3YABxQFWeQznhkBkk+RsoKBAArYyMGPKiuLoVuU1
h8kGzCFReegqo1hwsNiGoptgmGIQOIcw2CYIYwiiIox5W1oKksntvdTH2JGc
sj85OTk5+c/5/+/x+8gOSw6soCgqFq8Xu/rci+BB8FJMQdt5aXen0T2VU5NT
FQ9eKjY5Fa+jUW/avmepZ3lwakW5x8eBNBqyNp/VlvBAjq6dcA+h0St1Zcen
CnkQ1+mw5/twGs2vOd6xNYcH7LrG+fFtNKruL5pok/HA6tKyvTeORguuZseS
eB5ErEz8S7qbRh0pbF3vOzzY6ml1lX9II994I9XgwwOl90MRJaORKkS1UeLA
A49ue5HjJzRy+eC3rCfTHDBsE0iPKmj02Uis/d0+Diy4vboxKptGUnW2yv8n
DjjYa+LSj9Bo/dX2Sd9SDswkKC8NHqWRl1CzyVnOgfKr/bVff0mjPt/ksc3R
HDhTmDSbmU+jGnjsfo+YAzcb5APVBTR6+/eZN1woDqj+HVtcxOf2LtGutDEL
+Nn1xI0afO7K19/mrlvAXFZPVzbOT44SXHOutICYe09SivD7ivAfDVSuBbgb
N8QM4/9ntOG/PpdYgDhC2S3H9U2zZk1ssAVIJrRHYnH99fvLwv1dLCDPa2Z/
Ae7vb8/4iP4FFnRZs4xrcP+612RzueMsqGhRqhwwPtHHMirje1gQ0Ji8ORvj
V7n2G1DWxAI6QF2SgvGVJF6KSz7Pgn+Ei4dvY/y/yn/Lb6SUBSd/8SoxYn4y
HAc43wIWjCc9jtFh/opV7mkHclkQKG3rFGN+ncNqrEMXTUCcsz3BOVSI1MZy
x13VJlD3qXKqRixE/pqcndy3JnD54arpCVqIhodDqZFyE6CW4v97iee8i/cj
wXJ+aoXCLW1MsPz+g9LWRvNNwfL/9elrH0/uNUA5qW/1+wpdu4cB5pP6W+/b
1d8Y1UMp6e+LUYfClHN6WEX6z23ZdEH0kR7uIPhcL35XcWi9HjYQ/PZGyiO7
5hjIEHxNQZlthZCBOoL/e8LaUWEFA82En8/tB2M0CgbOEv5mHymGGuIYeIjw
Gwb/uJwYxMA9hP/mNwPcHogY2E30cTKzbzJjFQM7iH5kMVDsIWBgENFX9Eo3
O4pi4Hmiv6YrF4t88P0tos+Cp5Hf5eF8b6LfM9JTdvP4/Q1E3z/kKS5k4/93
E/333plQ38L12fwRFXawth/Xb/PPyKj+YCjur4r4K+TOoF8L7t+P+C/zqcF7
EeNj86f/61t2NGL8rMS/Fm3S81SMbw3xd3hC9J9ajL/N/+nGYtnLd/XQNh+0
ls4tq0UGaJsfjc92tgbvM0DbfLliPh3IawzQNn+GBpp1A2YD/A/pXG7H
                    "]], {-0.1, 0}]}, 
                   TemplateBox[{"\"0000\""}, "Ket"]], Annotation[#, 
                   Ket[{"0000"}], "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[{
                    EdgeForm[
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{1.625, -1.375}, {2.375, -0.625}, 
                    RoundingRadius -> 0.1]}, "\"H\"", TooltipStyle -> 
                   "TextStyling"], Annotation[#, "H", "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[{
                    EdgeForm[
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{1.625, -2.375}, {2.375, -1.625}, 
                    RoundingRadius -> 0.1]}, "\"Z\"", TooltipStyle -> 
                   "TextStyling"], Annotation[#, "Z", "Tooltip"]& ]}, {}}, {
               ImageSize -> Tiny}], 
              RowBox[{"\"Z\"", "@*", "\"H\"", "@*", 
                TemplateBox[{"\"0000\""}, "Ket"]}]], Annotation[#, 
              Composition["Z", "H", 
               Ket[{"0000"}]], "Tooltip"]& ], 
            InterpretationBox[
             TagBox[
              
              GridBox[{{""}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}], "Grid"], 
             
             Grid[{{}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
              Alignment -> {Left, Automatic}, Spacings -> {2, Automatic}]]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            TagBox[
             TooltipBox[
              GraphicsBox[{{{
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{1.375, -1}, {1.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{1.375, -2}, {1.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -1}, {2.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -2}, {2.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{1.375, -3}, {2.625, -3}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{1.375, -4}, {2.625, -4}}]}}}, {
                 TagBox[
                  TooltipBox[{
                    EdgeForm[
                    Hue[0.62, 0.45, 0.87]], 
                    FaceForm[
                    Directive[
                    Hue[0.62, 0.45, 0.87], 
                    Opacity[0.3]]], 
                    GeometricTransformationBox[
                    PolygonBox[CompressedData["
1:eJxFVAtMU1cYvtgyBmrM3YABxQFWeQznhkBkk+RsoKBAArYyMGPKiuLoVuU1
h8kGzCFReegqo1hwsNiGoptgmGIQOIcw2CYIYwiiIox5W1oKksntvdTH2JGc
sj85OTk5+c/5/+/x+8gOSw6soCgqFq8Xu/rci+BB8FJMQdt5aXen0T2VU5NT
FQ9eKjY5Fa+jUW/avmepZ3lwakW5x8eBNBqyNp/VlvBAjq6dcA+h0St1Zcen
CnkQ1+mw5/twGs2vOd6xNYcH7LrG+fFtNKruL5pok/HA6tKyvTeORguuZseS
eB5ErEz8S7qbRh0pbF3vOzzY6ml1lX9II994I9XgwwOl90MRJaORKkS1UeLA
A49ue5HjJzRy+eC3rCfTHDBsE0iPKmj02Uis/d0+Diy4vboxKptGUnW2yv8n
DjjYa+LSj9Bo/dX2Sd9SDswkKC8NHqWRl1CzyVnOgfKr/bVff0mjPt/ksc3R
HDhTmDSbmU+jGnjsfo+YAzcb5APVBTR6+/eZN1woDqj+HVtcxOf2LtGutDEL
+Nn1xI0afO7K19/mrlvAXFZPVzbOT44SXHOutICYe09SivD7ivAfDVSuBbgb
N8QM4/9ntOG/PpdYgDhC2S3H9U2zZk1ssAVIJrRHYnH99fvLwv1dLCDPa2Z/
Ae7vb8/4iP4FFnRZs4xrcP+612RzueMsqGhRqhwwPtHHMirje1gQ0Ji8ORvj
V7n2G1DWxAI6QF2SgvGVJF6KSz7Pgn+Ei4dvY/y/yn/Lb6SUBSd/8SoxYn4y
HAc43wIWjCc9jtFh/opV7mkHclkQKG3rFGN+ncNqrEMXTUCcsz3BOVSI1MZy
x13VJlD3qXKqRixE/pqcndy3JnD54arpCVqIhodDqZFyE6CW4v97iee8i/cj
wXJ+aoXCLW1MsPz+g9LWRvNNwfL/9elrH0/uNUA5qW/1+wpdu4cB5pP6W+/b
1d8Y1UMp6e+LUYfClHN6WEX6z23ZdEH0kR7uIPhcL35XcWi9HjYQ/PZGyiO7
5hjIEHxNQZlthZCBOoL/e8LaUWEFA82En8/tB2M0CgbOEv5mHymGGuIYeIjw
Gwb/uJwYxMA9hP/mNwPcHogY2E30cTKzbzJjFQM7iH5kMVDsIWBgENFX9Eo3
O4pi4Hmiv6YrF4t88P0tos+Cp5Hf5eF8b6LfM9JTdvP4/Q1E3z/kKS5k4/93
E/333plQ38L12fwRFXawth/Xb/PPyKj+YCjur4r4K+TOoF8L7t+P+C/zqcF7
EeNj86f/61t2NGL8rMS/Fm3S81SMbw3xd3hC9J9ajL/N/+nGYtnLd/XQNh+0
ls4tq0UGaJsfjc92tgbvM0DbfLliPh3IawzQNn+GBpp1A2YD/A/pXG7H
                    "]], {-0.1, 0}]}, 
                   TemplateBox[{"\"0000\""}, "Ket"]], Annotation[#, 
                   Ket[{"0000"}], "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[{
                    EdgeForm[
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{1.625, -1.375}, {2.375, -0.625}, 
                    RoundingRadius -> 0.1]}, "\"H\"", TooltipStyle -> 
                   "TextStyling"], Annotation[#, "H", "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[{
                    EdgeForm[
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{1.625, -2.375}, {2.375, -1.625}, 
                    RoundingRadius -> 0.1]}, "\"Z\"", TooltipStyle -> 
                   "TextStyling"], Annotation[#, "Z", "Tooltip"]& ]}, {}}, {
               ImageSize -> Tiny}], 
              RowBox[{"\"Z\"", "@*", "\"H\"", "@*", 
                TemplateBox[{"\"0000\""}, "Ket"]}]], Annotation[#, 
              Composition["Z", "H", 
               Ket[{"0000"}]], "Tooltip"]& ], 
            GridBox[{{""}, {
               RowBox[{
                 TagBox["\"Gates: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Depth: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Width: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2", ",", "2"}], "}"}]}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Measurement Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumCircuitOperator[<|"Elements" -> {
      Wolfram`QuantumFramework`QuantumOperator[
       Wolfram`QuantumFramework`QuantumState[
       SparseArray[Automatic, {16}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
        Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1, {
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 2} -> 1, {
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 3} -> 1, {
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 4} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 3} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 3} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 4} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 4} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
          "Picture" -> "Schrodinger", "Label" -> Ket[{"0000"}], 
          "ParameterSpec" -> {}|>]], {{1, 2, 3, 4}, {}}], 
      Wolfram`QuantumFramework`QuantumOperator[
       Wolfram`QuantumFramework`QuantumState[
       SparseArray[
        Automatic, {4}, 0, {
         1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], 
        Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
          "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
          "Picture" -> "Schrodinger", "Label" -> "H", 
          "ParameterSpec" -> {}|>]], {{1}, {1}}], 
      Wolfram`QuantumFramework`QuantumOperator[
       Wolfram`QuantumFramework`QuantumState[
       SparseArray[Automatic, {4}, 0, {1, {{0, 2}, {{1}, {4}}}, {1, -1}}], 
        Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
          "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
          "Picture" -> "Schrodinger", "Label" -> "Z", 
          "ParameterSpec" -> {}|>]], {{2}, {2}}]}, "Label" -> 
    Composition["Z", "H", 
      Ket[{"0000"}]]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9442405276715546`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"8ec7ebe8-a1f2-c546-b0d1-ca2dd836df8b"]
}, Open  ]],

Cell[TextData[{
 "This is shorthand for a 4-qubit input state, a Hadamard gate on the first \
qubit, and a Z gate on the second qubit. You can see the diagram using the ",
 Cell[BoxData[
 "\"\<Diagram\>\""], "InlineCode",ExpressionUUID->
  "84ac771a-415a-9047-a015-396eb2d773a4"],
 " property:"
}], "Text",
 CellChangeTimes->{{3.944240530621563*^9, 
  3.944240621816881*^9}},ExpressionUUID->"aca57514-2416-0148-b373-\
4f1bc6f22887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"circuit1", "[", "\"\<Diagram\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.944240588506544*^9, 3.9442405936400757`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"1495014a-d94a-5b46-a859-f5f67ed8ae91"],

Cell[BoxData[
 GraphicsBox[{{
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{1.375, -1}, {1.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{1.375, -2}, {1.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{2.375, -1}, {2.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{2.375, -2}, {2.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{1.375, -3}, {2.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{1.375, -4}, {2.625, -4}}]}}}, {
    TagBox[
     TooltipBox[
      {EdgeForm[Hue[0.62, 0.45, 0.87]], FaceForm[{Hue[0.62, 0.45, 0.87], 
       Opacity[0.3]}], GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxFVAtMU1cYvtgyBmrM3YABxQFWeQznhkBkk+RsoKBAArYyMGPKiuLoVuU1
h8kGzCFReegqo1hwsNiGoptgmGIQOIcw2CYIYwiiIox5W1oKksntvdTH2JGc
sj85OTk5+c/5/+/x+8gOSw6soCgqFq8Xu/rci+BB8FJMQdt5aXen0T2VU5NT
FQ9eKjY5Fa+jUW/avmepZ3lwakW5x8eBNBqyNp/VlvBAjq6dcA+h0St1Zcen
CnkQ1+mw5/twGs2vOd6xNYcH7LrG+fFtNKruL5pok/HA6tKyvTeORguuZseS
eB5ErEz8S7qbRh0pbF3vOzzY6ml1lX9II994I9XgwwOl90MRJaORKkS1UeLA
A49ue5HjJzRy+eC3rCfTHDBsE0iPKmj02Uis/d0+Diy4vboxKptGUnW2yv8n
DjjYa+LSj9Bo/dX2Sd9SDswkKC8NHqWRl1CzyVnOgfKr/bVff0mjPt/ksc3R
HDhTmDSbmU+jGnjsfo+YAzcb5APVBTR6+/eZN1woDqj+HVtcxOf2LtGutDEL
+Nn1xI0afO7K19/mrlvAXFZPVzbOT44SXHOutICYe09SivD7ivAfDVSuBbgb
N8QM4/9ntOG/PpdYgDhC2S3H9U2zZk1ssAVIJrRHYnH99fvLwv1dLCDPa2Z/
Ae7vb8/4iP4FFnRZs4xrcP+612RzueMsqGhRqhwwPtHHMirje1gQ0Ji8ORvj
V7n2G1DWxAI6QF2SgvGVJF6KSz7Pgn+Ei4dvY/y/yn/Lb6SUBSd/8SoxYn4y
HAc43wIWjCc9jtFh/opV7mkHclkQKG3rFGN+ncNqrEMXTUCcsz3BOVSI1MZy
x13VJlD3qXKqRixE/pqcndy3JnD54arpCVqIhodDqZFyE6CW4v97iee8i/cj
wXJ+aoXCLW1MsPz+g9LWRvNNwfL/9elrH0/uNUA5qW/1+wpdu4cB5pP6W+/b
1d8Y1UMp6e+LUYfClHN6WEX6z23ZdEH0kR7uIPhcL35XcWi9HjYQ/PZGyiO7
5hjIEHxNQZlthZCBOoL/e8LaUWEFA82En8/tB2M0CgbOEv5mHymGGuIYeIjw
Gwb/uJwYxMA9hP/mNwPcHogY2E30cTKzbzJjFQM7iH5kMVDsIWBgENFX9Eo3
O4pi4Hmiv6YrF4t88P0tos+Cp5Hf5eF8b6LfM9JTdvP4/Q1E3z/kKS5k4/93
E/333plQ38L12fwRFXawth/Xb/PPyKj+YCjur4r4K+TOoF8L7t+P+C/zqcF7
EeNj86f/61t2NGL8rMS/Fm3S81SMbw3xd3hC9J9ajL/N/+nGYtnLd/XQNh+0
ls4tq0UGaJsfjc92tgbvM0DbfLliPh3IawzQNn+GBpp1A2YD/A/pXG7H
         "]], {-0.1, 0}], GeometricTransformationBox[InsetBox[
         StyleBox[
          TemplateBox[{"\"0000\""},
           "Ket"],
          StripOnInput->False,
          FontFamily->"Roboto",
          FontSize->11,
          FontColor->GrayLevel[0],
          Background->GrayLevel[0, 0]], {1.129626135594409, -2.5}], {{{0, 
         1}, {-1, 0}}, Center}]},
      TemplateBox[{"\"0000\""}, "Ket"]],
     Annotation[#, 
      Ket[{"0000"}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      {EdgeForm[RGBColor[0.368417, 0.506779, 0.709798]], FaceForm[{RGBColor[
       0.368417, 0.506779, 0.709798], Opacity[0.3]}], 
       RectangleBox[{1.625, -1.375}, {2.375, -0.625},
        RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
         StyleBox["\<\"H\"\>",
          StripOnInput->False,
          FontFamily->"Roboto",
          FontSize->11,
          FontColor->GrayLevel[0],
          Background->GrayLevel[0, 0]], {2., -1.}], {{{1, 0}, {0, 1}}, 
         Center}]},
      "\"H\"",
      TooltipStyle->"TextStyling"],
     Annotation[#, "H", "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
       0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
       RectangleBox[{1.625, -2.375}, {2.375, -1.625},
        RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
         StyleBox["\<\"Z\"\>",
          StripOnInput->False,
          FontFamily->"Roboto",
          FontSize->11,
          FontColor->GrayLevel[0],
          Background->GrayLevel[0, 0]], {2., -2.}], {{{1, 0}, {0, 1}}, 
         Center}]},
      "\"Z\"",
      TooltipStyle->"TextStyling"],
     Annotation[#, "Z", "Tooltip"]& ]}, {InsetBox[
     StyleBox["1",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -1}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["2",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -2}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["3",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -3}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["4",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -4}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]]}},
  ImageSize->Medium]], "Output",
 CellChangeTimes->{3.944240598089779*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"775900f0-242d-2440-bd49-991453df473f"]
}, Open  ]],

Cell["\<\
This circuit has no measurement operators. Thus, evaluating the circuit leads \
to a quantum state:\
\>", "Text",
 CellChangeTimes->{{3.9442406307668324`*^9, 
  3.944240650735716*^9}},ExpressionUUID->"eec33253-06e1-3b46-a4b5-\
1d030bf5ce7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"qs1", "=", 
  RowBox[{"circuit1", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.944240652243799*^9, 3.944240694385851*^9}, {
  3.9442416828026657`*^9, 3.9442416866252346`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"77e8fb2e-66d5-814c-bcf8-d1ef4c5db20f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGAQgGIQ22Z77JEJtm/t+xzzdh6aeNFeSVW4xln+vP2o+Kj4
qPio+Kj4qPio+Kj4qPioOC3EzzofNs0ofW//i4XDjqvotf31c5caZtu/HnTu
HK7uHxUfFR8VHxUfFR8VHxUfFR8VHxUfbT+PHPcDAFmIs5Y=
              "], {{0, 0}, {16, 16}}, {0, 1}], {
             DisplayFunction -> Identity, PlotRange -> All, DisplayFunction -> 
              Identity, Background -> RGBColor[1, 1, 1, 0], DisplayFunction -> 
              Identity, Frame -> False, FrameLabel -> {None, None}, 
              FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
              Directive[
                GrayLevel[0.5, 0.4]], ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], 
              Method -> {
               "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> 
                Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "DefaultPlotStyle" -> Automatic}, PlotRangeClipping -> True}], 
            GridBox[{{
               TagBox[
                TemplateBox[{"\"Pure\"", "\" \"", "\"state\""}, "RowDefault"],
                 "SummaryItem"], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Vector\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGAQgGIQ22Z77JEJtm/t+xzzdh6aeNFeSVW4xln+vP2o+Kj4
qPio+Kj4qPio+Kj4qPioOC3EzzofNs0ofW//i4XDjqvotf31c5caZtu/HnTu
HK7uHxUfFR8VHxUfFR8VHxUfFR8VHxUfbT+PHPcDAFmIs5Y=
              "], {{0, 0}, {16, 16}}, {0, 1}], {
             DisplayFunction -> Identity, PlotRange -> All, DisplayFunction -> 
              Identity, Background -> RGBColor[1, 1, 1, 0], DisplayFunction -> 
              Identity, Frame -> False, FrameLabel -> {None, None}, 
              FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
              Directive[
                GrayLevel[0.5, 0.4]], ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], 
              Method -> {
               "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> 
                Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "DefaultPlotStyle" -> Automatic}, PlotRangeClipping -> True}], 
            GridBox[{{
               TagBox[
                TemplateBox[{"\"Pure\"", "\" \"", "\"state\""}, "RowDefault"],
                 "SummaryItem"], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Vector\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Purity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1.`", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"0", "\"\[RightArrow]\"", "4"}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Von Neumann Entropy: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{"0.`", "\"b\"", "bits", "\"Bits\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2", ",", "2"}], "}"}]}, 
                   "RowDefault"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}], ""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumState[
  SparseArray[
   Automatic, {16}, 0, {
    1, {{0, 2}, {{1}, {9}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
   Wolfram`QuantumFramework`QuantumBasis[<|
    "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
          
          Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
           False], 1} -> 1|>], "Output" -> 
     Wolfram`QuantumFramework`QuditBasis[<|{
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 3} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 3} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 4} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 4} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
     "Picture" -> "Schrodinger", "Label" -> None, "ParameterSpec" -> {}|>]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.944240657953308*^9, 3.9442406973344307`*^9}, 
   3.944241687925453*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"d56b0e5c-32bd-1942-9fd5-08981c150e64"]
}, Open  ]],

Cell[TextData[{
 "Every quantum state has a ",
 Cell[BoxData[
 "\"\<Formula\>\""], "InlineCode",ExpressionUUID->
  "9e0221c3-3012-ac49-812d-c42ffa300322"],
 " property which shows the bra-ket (Dirac) notation:"
}], "Text",
 CellChangeTimes->{{3.944240700200617*^9, 3.944240737703766*^9}, {
  3.944240780670641*^9, 3.9442408022718925`*^9}, {3.944240980607443*^9, 
  3.944240997159855*^9}},ExpressionUUID->"8b1c1eb9-e994-f54d-8cf5-\
7e2aa28bd821"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"qs1", "[", "\"\<Formula\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.944240740980295*^9, 3.944240747216688*^9}, {
  3.9442416911138935`*^9, 3.9442416935358505`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"f0913117-b09b-1f4a-8909-08b5f7cf2395"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", 
    SqrtBox["2"]], 
   InterpretationBox[
    StyleBox[
     TemplateBox[{
       RowBox[{
        "0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0", 
         "\[InvisibleSpace]", "0"}]},
      "Ket"],
     FontWeight->"Plain"],
    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> False]]}], "+", 
  RowBox[{
   FractionBox["1", 
    SqrtBox["2"]], 
   InterpretationBox[
    StyleBox[
     TemplateBox[{
       RowBox[{
        "1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0", 
         "\[InvisibleSpace]", "0"}]},
      "Ket"],
     FontWeight->"Plain"],
    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
     False]]}]}]], "Output",
 CellChangeTimes->{3.944240747660574*^9, 3.944241694184492*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"b3ffce00-d184-1e41-b935-d743e7d84f8a"]
}, Open  ]],

Cell[TextData[{
 "You can build up larger quantum circuits by nesting ",
 Cell[BoxData[
  ButtonBox["QuantumCircuitOperator",
   BaseStyle->"Hyperlink",
   ButtonData->{
     URL["https://resources.wolframcloud.com/PacletRepository/resources/\
Wolfram/QuantumFramework/ref/QuantumCircuitOperator.html"], None},
   ButtonNote->
    "https://resources.wolframcloud.com/PacletRepository/resources/Wolfram/\
QuantumFramework/ref/QuantumCircuitOperator.html"]], "InlineCode",
  ExpressionUUID->"6164cc0d-f07a-4f44-a152-9a8a391bc422"],
 " objects. The second argument can be used to label sub-circuits:"
}], "Text",
 CellChangeTimes->{{3.944241149855505*^9, 
  3.9442412211046047`*^9}},ExpressionUUID->"4b383d46-fd54-9543-a689-\
d631ce54e965"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"circuit2", "=", 
  RowBox[{"QuantumCircuitOperator", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"QuantumCircuitOperator", "[", 
      RowBox[{"circuit1", ",", "\"\<First Part\>\""}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"QuantumCircuitOperator", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<SWAP\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}]}], ",", 
         RowBox[{"\"\<CNOT\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"1", ",", "4"}], "}"}]}]}], "}"}], ",", 
       "\"\<Second Part\>\""}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<M\>\"", "->", 
      RowBox[{"Range", "[", "4", "]"}]}]}], "\[IndentingNewLine]", "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.944241224435032*^9, 3.944241365345276*^9}, 
   3.9442414861785145`*^9, {3.9442415388519897`*^9, 3.944241540487671*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"b94aadc3-0817-7148-9338-9bf47948836f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumCircuitOperator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            TagBox[
             TooltipBox[
              GraphicsBox[{{{
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -1}, {2.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -2}, {2.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -3}, {2.625, -3}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -4}, {2.625, -4}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{4.375, -1}, {4.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{4.375, -2}, {4.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{4.375, -3}, {4.625, -3}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{4.375, -4}, {4.625, -4}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{5.375, -1}, {5.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{5.375, -2}, {5.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{5.375, -3}, {5.625, -3}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{5.375, -4}, {5.625, -4}}]}}}, {
                 TagBox[
                  GeometricTransformationBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Dashing[{Tiny, Tiny}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8]]], 
                    FaceForm[
                    RGBColor[0.898039, 0.898039, 0.898039, 0.3]]], 
                    RectangleBox[
                    NCache[{0.53125, 
                    Rational[-1, 2]}, {0.53125, -0.5}], 
                    NCache[{2.46875, 
                    Rational[-9, 2]}, {2.46875, -4.5}], RoundingRadius -> 
                    0.1]}, {{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -1}, {1.625, -1}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -2}, {1.625, -2}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -3}, {2.375, -3}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -4}, {2.375, -4}}]}}}, {
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    Hue[0.62, 0.45, 0.87]], 
                    FaceForm[
                    Directive[
                    Hue[0.62, 0.45, 0.87], 
                    Opacity[0.3]]], 
                    GeometricTransformationBox[
                    PolygonBox[CompressedData["
1:eJxFVAtMU1cYvtgyBmrM3YABxQFWeQznhkBkk+RsoKBAArYyMGPKiuLoVuU1
h8kGzCFReegqo1hwsNiGoptgmGIQOIcw2CYIYwiiIox5W1oKksntvdTH2JGc
sj85OTk5+c/5/+/x+8gOSw6soCgqFq8Xu/rci+BB8FJMQdt5aXen0T2VU5NT
FQ9eKjY5Fa+jUW/avmepZ3lwakW5x8eBNBqyNp/VlvBAjq6dcA+h0St1Zcen
CnkQ1+mw5/twGs2vOd6xNYcH7LrG+fFtNKruL5pok/HA6tKyvTeORguuZseS
eB5ErEz8S7qbRh0pbF3vOzzY6ml1lX9II994I9XgwwOl90MRJaORKkS1UeLA
A49ue5HjJzRy+eC3rCfTHDBsE0iPKmj02Uis/d0+Diy4vboxKptGUnW2yv8n
DjjYa+LSj9Bo/dX2Sd9SDswkKC8NHqWRl1CzyVnOgfKr/bVff0mjPt/ksc3R
HDhTmDSbmU+jGnjsfo+YAzcb5APVBTR6+/eZN1woDqj+HVtcxOf2LtGutDEL
+Nn1xI0afO7K19/mrlvAXFZPVzbOT44SXHOutICYe09SivD7ivAfDVSuBbgb
N8QM4/9ntOG/PpdYgDhC2S3H9U2zZk1ssAVIJrRHYnH99fvLwv1dLCDPa2Z/
Ae7vb8/4iP4FFnRZs4xrcP+612RzueMsqGhRqhwwPtHHMirje1gQ0Ji8ORvj
V7n2G1DWxAI6QF2SgvGVJF6KSz7Pgn+Ei4dvY/y/yn/Lb6SUBSd/8SoxYn4y
HAc43wIWjCc9jtFh/opV7mkHclkQKG3rFGN+ncNqrEMXTUCcsz3BOVSI1MZy
x13VJlD3qXKqRixE/pqcndy3JnD54arpCVqIhodDqZFyE6CW4v97iee8i/cj
wXJ+aoXCLW1MsPz+g9LWRvNNwfL/9elrH0/uNUA5qW/1+wpdu4cB5pP6W+/b
1d8Y1UMp6e+LUYfClHN6WEX6z23ZdEH0kR7uIPhcL35XcWi9HjYQ/PZGyiO7
5hjIEHxNQZlthZCBOoL/e8LaUWEFA82En8/tB2M0CgbOEv5mHymGGuIYeIjw
Gwb/uJwYxMA9hP/mNwPcHogY2E30cTKzbzJjFQM7iH5kMVDsIWBgENFX9Eo3
O4pi4Hmiv6YrF4t88P0tos+Cp5Hf5eF8b6LfM9JTdvP4/Q1E3z/kKS5k4/93
E/333plQ38L12fwRFXawth/Xb/PPyKj+YCjur4r4K+TOoF8L7t+P+C/zqcF7
EeNj86f/61t2NGL8rMS/Fm3S81SMbw3xd3hC9J9ajL/N/+nGYtnLd/XQNh+0
ls4tq0UGaJsfjc92tgbvM0DbfLliPh3IawzQNn+GBpp1A2YD/A/pXG7H
                    "]], {-0.1, 0}]}, 
                    TemplateBox[{"\"0000\""}, "Ket"]], Annotation[#, 
                    Ket[{"0000"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{1.625, -1.375}, {2.375, -0.625}, 
                    RoundingRadius -> 0.1]}, "\"H\"", TooltipStyle -> 
                    "TextStyling"], Annotation[#, "H", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{1.625, -2.375}, {2.375, -1.625}, 
                    RoundingRadius -> 0.1]}, "\"Z\"", TooltipStyle -> 
                    "TextStyling"], Annotation[#, "Z", "Tooltip"]& ]}, {}}, {
                   0, 0}], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> (
                    Wolfram`QuantumFramework`Draw`PackagePrivate`qc$62945 = 
                    Wolfram`QuantumFramework`Draw`PackagePrivate`qc$62945[
                    "ToggleExpand", 
                    Append[{}, 1]]), PassEventsDown -> True, PassEventsUp -> 
                    False, Method -> "Preemptive"}]], 
                 TagBox[
                  GeometricTransformationBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Dashing[{Tiny, Tiny}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8]]], 
                    FaceForm[
                    RGBColor[0.898039, 0.898039, 0.898039, 0.3]]], 
                    RectangleBox[
                    NCache[{0.53125, 
                    Rational[-1, 2]}, {0.53125, -0.5}], 
                    NCache[{2.46875, 
                    Rational[-9, 2]}, {2.46875, -4.5}], RoundingRadius -> 
                    0.1]}, {{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{0.625, -1}, {1.625, -1}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{0.625, -4}, {1.625, -4}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -2}, {2.375, -2}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -3}, {2.375, -3}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}}, {
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    LineBox[{{1., -2}, {1., -3}}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8], 
                    Thickness[Medium], {
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{0.625, -2.}, {1.375, -2.}}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8], 
                    Thickness[Medium], 
                    
                    LineBox[{{0.8939339828220179, -2.106066017177982}, {
                    1.1060660171779821`, -1.8939339828220179`}}], 
                    
                    LineBox[{{1.1060660171779821`, -2.106066017177982}, {
                    0.8939339828220179, -1.8939339828220179`}}]}, "\"*\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "*", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{0.625, -3.}, {1.375, -3.}}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8], 
                    Thickness[Medium], 
                    
                    LineBox[{{0.8939339828220179, -3.106066017177982}, {
                    1.1060660171779821`, -2.893933982822018}}], 
                    
                    LineBox[{{1.1060660171779821`, -3.106066017177982}, {
                    0.8939339828220179, -2.893933982822018}}]}, "\"*\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "*", "Tooltip"]& ]}}, "\"SWAP\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "SWAP", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{{{
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.625, -4.}, {1.85, -4.}}], 
                    LineBox[{{2.15, -4.}, {2.375, -4.}}], 
                    EdgeForm[
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]]], 
                    DiskBox[{2., -4.}, 0.15000000000000002`], 
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]], 
                    Opacity[1], 
                    LineBox[{{1.85, -4.}, {2.15, -4.}}], 
                    LineBox[{{2., -4.15}, {2., -3.85}}]}, "\"NOT\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "NOT", "Tooltip"]& ], {{
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    LineBox[{{2., -1.09375}, {2., -3.85}}]}}}}, {
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.625, -1.}, {1.90625, -1.}}], 
                    LineBox[{{2.09375, -1.}, {2.375, -1.}}], 
                    EdgeForm[
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]]], 
                    DiskBox[{2., -1.}, 0.09375]}, "\"1\"", TooltipStyle -> 
                    "TextStyling"], Annotation[#, "1", "Tooltip"]& ]}, {}}, 
                    RowBox[{
                    SubscriptBox["\"C\"", "\"NOT\""], "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]], Annotation[#, 
                    Subscript["C", "NOT"][{1}, {}], "Tooltip"]& ]}, {}}, {2, 
                   0}], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> (
                    Wolfram`QuantumFramework`Draw`PackagePrivate`qc$62945 = 
                    Wolfram`QuantumFramework`Draw`PackagePrivate`qc$62945[
                    "ToggleExpand", 
                    Append[{}, 2]]), PassEventsDown -> True, PassEventsUp -> 
                    False, Method -> "Preemptive"}]], {
                  TagBox[
                   TooltipBox[{{
                    TagBox[
                    TooltipBox[{{
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.7367, 0.358, 0.503]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.7367, 0.358, 0.503], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{4.625, -1.375}, {5.375, -0.625}, 
                    RoundingRadius -> 0.1]}, "\"Measurement\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Measurement", "Tooltip"]& ]}, {{
                    Thickness[Small], {
                    
                    LineBox[{{5.151690686445303, -1.0772902651951612`}, {
                    5.212366961023424, -1.0332063712732258`}}], 
                    
                    LineBox[{{5.116904337848513, -1.0409065970372444`}, {
                    5.163666072987917, -0.9822692358521422}}], 
                    
                    LineBox[{{5.073692193435111, -1.015088542646603}, {
                    5.103169070809155, -0.9461239597052442}}], 
                    
                    LineBox[{{5.0251687373408105`, -1.0016969196685124`}, {
                    5.035236232277135, -0.9273756875359171}}], 
                    
                    LineBox[{{4.9748312626591895`, -1.0016969196685122`}, {
                    4.964763767722865, -0.9273756875359171}}], 
                    
                    LineBox[{{4.926307806564889, -1.015088542646603}, {
                    4.896830929190845, -0.9461239597052442}}], 
                    
                    LineBox[{{4.883095662151487, -1.0409065970372444`}, {
                    4.836333927012083, -0.9822692358521422}}], 
                    
                    LineBox[{{4.848309313554697, -1.0772902651951612`}, {
                    4.787633038976576, -1.0332063712732258`}}]}, 
                    Thickness[Medium], 
                    
                    LineBox[{{5, -1.1875}, {
                    5.17024643740233, -0.8533725534293621}}]}}, 
                    Dashing[{Small, Small}], {}}, 
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]], 
                    Annotation[#, 
                    "Measurement"["I"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{{
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.7367, 0.358, 0.503]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.7367, 0.358, 0.503], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{4.625, -2.375}, {5.375, -1.625}, 
                    RoundingRadius -> 0.1]}, "\"Measurement\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Measurement", "Tooltip"]& ]}, {{
                    Thickness[Small], {
                    
                    LineBox[{{5.151690686445303, -2.0772902651951615`}, {
                    5.212366961023424, -2.033206371273226}}], 
                    
                    LineBox[{{5.116904337848513, -2.040906597037244}, {
                    5.163666072987917, -1.9822692358521423`}}], 
                    
                    LineBox[{{5.073692193435111, -2.0150885426466028`}, {
                    5.103169070809155, -1.9461239597052442`}}], 
                    
                    LineBox[{{5.0251687373408105`, -2.001696919668512}, {
                    5.035236232277135, -1.9273756875359171`}}], 
                    
                    LineBox[{{4.9748312626591895`, -2.001696919668512}, {
                    4.964763767722865, -1.9273756875359171`}}], 
                    
                    LineBox[{{4.926307806564889, -2.0150885426466028`}, {
                    4.896830929190845, -1.9461239597052442`}}], 
                    
                    LineBox[{{4.883095662151487, -2.040906597037244}, {
                    4.836333927012083, -1.982269235852142}}], 
                    
                    LineBox[{{4.848309313554697, -2.0772902651951615`}, {
                    4.787633038976576, -2.033206371273226}}]}, 
                    Thickness[Medium], 
                    
                    LineBox[{{5, -2.1875}, {
                    5.17024643740233, -1.8533725534293621`}}]}}, 
                    Dashing[{Small, Small}], {}}, 
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]], 
                    Annotation[#, 
                    "Measurement"["I"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{{
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.7367, 0.358, 0.503]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.7367, 0.358, 0.503], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{4.625, -3.375}, {5.375, -2.625}, 
                    RoundingRadius -> 0.1]}, "\"Measurement\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Measurement", "Tooltip"]& ]}, {{
                    Thickness[Small], {
                    
                    LineBox[{{5.151690686445303, -3.0772902651951615`}, {
                    5.212366961023424, -3.033206371273226}}], 
                    
                    LineBox[{{5.116904337848513, -3.040906597037244}, {
                    5.163666072987917, -2.9822692358521423`}}], 
                    
                    LineBox[{{5.073692193435111, -3.015088542646603}, {
                    5.103169070809155, -2.946123959705244}}], 
                    
                    LineBox[{{5.0251687373408105`, -3.0016969196685124`}, {
                    5.035236232277135, -2.927375687535917}}], 
                    
                    LineBox[{{4.9748312626591895`, -3.0016969196685124`}, {
                    4.964763767722865, -2.927375687535917}}], 
                    
                    LineBox[{{4.926307806564889, -3.015088542646603}, {
                    4.896830929190845, -2.946123959705244}}], 
                    
                    LineBox[{{4.883095662151487, -3.040906597037244}, {
                    4.836333927012083, -2.9822692358521423`}}], 
                    
                    LineBox[{{4.848309313554697, -3.0772902651951615`}, {
                    4.787633038976576, -3.033206371273226}}]}, 
                    Thickness[Medium], 
                    
                    LineBox[{{5, -3.1875}, {
                    5.17024643740233, -2.853372553429362}}]}}, 
                    Dashing[{Small, Small}], {}}, 
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]], 
                    Annotation[#, 
                    "Measurement"["I"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{{
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.7367, 0.358, 0.503]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.7367, 0.358, 0.503], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{4.625, -4.375}, {5.375, -3.625}, 
                    RoundingRadius -> 0.1]}, "\"Measurement\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Measurement", "Tooltip"]& ]}, {{
                    Thickness[Small], {
                    
                    LineBox[{{5.151690686445303, -4.0772902651951615`}, {
                    5.212366961023424, -4.033206371273225}}], 
                    
                    LineBox[{{5.116904337848513, -4.040906597037244}, {
                    5.163666072987917, -3.9822692358521423`}}], 
                    
                    LineBox[{{5.073692193435111, -4.015088542646604}, {
                    5.103169070809155, -3.946123959705244}}], 
                    
                    LineBox[{{5.0251687373408105`, -4.001696919668513}, {
                    5.035236232277135, -3.927375687535917}}], 
                    
                    LineBox[{{4.9748312626591895`, -4.001696919668513}, {
                    4.964763767722865, -3.927375687535917}}], 
                    
                    LineBox[{{4.926307806564889, -4.015088542646604}, {
                    4.896830929190845, -3.946123959705244}}], 
                    
                    LineBox[{{4.883095662151487, -4.040906597037244}, {
                    4.836333927012083, -3.9822692358521423`}}], 
                    
                    LineBox[{{4.848309313554697, -4.0772902651951615`}, {
                    4.787633038976576, -4.033206371273225}}]}, 
                    Thickness[Medium], 
                    
                    LineBox[{{5, -4.1875}, {
                    5.17024643740233, -3.853372553429362}}]}}, 
                    Dashing[{Small, Small}], {}}, 
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]], 
                    Annotation[#, 
                    "Measurement"["I"], "Tooltip"]& ]}, 
                    Dashing[{Small, Small}], {{
                    RGBColor[0.7367, 0.358, 0.503], 
                    LineBox[{{5., -1.375}, {5., -1.625}}]}, {
                    RGBColor[0.7367, 0.358, 0.503], 
                    LineBox[{{5., -2.375}, {5., -2.625}}]}, {
                    RGBColor[0.7367, 0.358, 0.503], 
                    LineBox[{{5., -3.375}, {5., -3.625}}]}}}, 
                    TemplateBox[{
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}], 
                    RowBox[{"\[CircleTimes]", "4"}]}, "Superscript", 
                    SyntaxForm -> SuperscriptBox]], Annotation[#, 
                    Superscript[
                    "Measurement"["I"], 
                    CircleTimes[4]], "Tooltip"]& ]}}, {}}, {
               ImageSize -> Tiny}], 
              
              RowBox[{"\"I\"", "@*", "\"Second Part\"", "@*", 
                "\"First Part\""}]], Annotation[#, 
              Composition["I", "Second Part", "First Part"], "Tooltip"]& ], 
            InterpretationBox[
             TagBox[
              
              GridBox[{{""}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}], "Grid"], 
             
             Grid[{{}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
              Alignment -> {Left, Automatic}, Spacings -> {2, Automatic}]]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            TagBox[
             TooltipBox[
              GraphicsBox[{{{
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -1}, {2.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -2}, {2.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -3}, {2.625, -3}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{2.375, -4}, {2.625, -4}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{4.375, -1}, {4.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{4.375, -2}, {4.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{4.375, -3}, {4.625, -3}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{4.375, -4}, {4.625, -4}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{5.375, -1}, {5.625, -1}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{5.375, -2}, {5.625, -2}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{5.375, -3}, {5.625, -3}}]}}, {
                  Directive[
                   CapForm[None], 
                   RGBColor[0.537254, 0.537254, 0.537254], 
                   Opacity[0.3]], {
                   Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                   LineBox[{{5.375, -4}, {5.625, -4}}]}}}, {
                 TagBox[
                  GeometricTransformationBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Dashing[{Tiny, Tiny}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8]]], 
                    FaceForm[
                    RGBColor[0.898039, 0.898039, 0.898039, 0.3]]], 
                    RectangleBox[
                    NCache[{0.53125, 
                    Rational[-1, 2]}, {0.53125, -0.5}], 
                    NCache[{2.46875, 
                    Rational[-9, 2]}, {2.46875, -4.5}], RoundingRadius -> 
                    0.1]}, {{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -1}, {1.625, -1}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -2}, {1.625, -2}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -3}, {2.375, -3}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -4}, {2.375, -4}}]}}}, {
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    Hue[0.62, 0.45, 0.87]], 
                    FaceForm[
                    Directive[
                    Hue[0.62, 0.45, 0.87], 
                    Opacity[0.3]]], 
                    GeometricTransformationBox[
                    PolygonBox[CompressedData["
1:eJxFVAtMU1cYvtgyBmrM3YABxQFWeQznhkBkk+RsoKBAArYyMGPKiuLoVuU1
h8kGzCFReegqo1hwsNiGoptgmGIQOIcw2CYIYwiiIox5W1oKksntvdTH2JGc
sj85OTk5+c/5/+/x+8gOSw6soCgqFq8Xu/rci+BB8FJMQdt5aXen0T2VU5NT
FQ9eKjY5Fa+jUW/avmepZ3lwakW5x8eBNBqyNp/VlvBAjq6dcA+h0St1Zcen
CnkQ1+mw5/twGs2vOd6xNYcH7LrG+fFtNKruL5pok/HA6tKyvTeORguuZseS
eB5ErEz8S7qbRh0pbF3vOzzY6ml1lX9II994I9XgwwOl90MRJaORKkS1UeLA
A49ue5HjJzRy+eC3rCfTHDBsE0iPKmj02Uis/d0+Diy4vboxKptGUnW2yv8n
DjjYa+LSj9Bo/dX2Sd9SDswkKC8NHqWRl1CzyVnOgfKr/bVff0mjPt/ksc3R
HDhTmDSbmU+jGnjsfo+YAzcb5APVBTR6+/eZN1woDqj+HVtcxOf2LtGutDEL
+Nn1xI0afO7K19/mrlvAXFZPVzbOT44SXHOutICYe09SivD7ivAfDVSuBbgb
N8QM4/9ntOG/PpdYgDhC2S3H9U2zZk1ssAVIJrRHYnH99fvLwv1dLCDPa2Z/
Ae7vb8/4iP4FFnRZs4xrcP+612RzueMsqGhRqhwwPtHHMirje1gQ0Ji8ORvj
V7n2G1DWxAI6QF2SgvGVJF6KSz7Pgn+Ei4dvY/y/yn/Lb6SUBSd/8SoxYn4y
HAc43wIWjCc9jtFh/opV7mkHclkQKG3rFGN+ncNqrEMXTUCcsz3BOVSI1MZy
x13VJlD3qXKqRixE/pqcndy3JnD54arpCVqIhodDqZFyE6CW4v97iee8i/cj
wXJ+aoXCLW1MsPz+g9LWRvNNwfL/9elrH0/uNUA5qW/1+wpdu4cB5pP6W+/b
1d8Y1UMp6e+LUYfClHN6WEX6z23ZdEH0kR7uIPhcL35XcWi9HjYQ/PZGyiO7
5hjIEHxNQZlthZCBOoL/e8LaUWEFA82En8/tB2M0CgbOEv5mHymGGuIYeIjw
Gwb/uJwYxMA9hP/mNwPcHogY2E30cTKzbzJjFQM7iH5kMVDsIWBgENFX9Eo3
O4pi4Hmiv6YrF4t88P0tos+Cp5Hf5eF8b6LfM9JTdvP4/Q1E3z/kKS5k4/93
E/333plQ38L12fwRFXawth/Xb/PPyKj+YCjur4r4K+TOoF8L7t+P+C/zqcF7
EeNj86f/61t2NGL8rMS/Fm3S81SMbw3xd3hC9J9ajL/N/+nGYtnLd/XQNh+0
ls4tq0UGaJsfjc92tgbvM0DbfLliPh3IawzQNn+GBpp1A2YD/A/pXG7H
                    "]], {-0.1, 0}]}, 
                    TemplateBox[{"\"0000\""}, "Ket"]], Annotation[#, 
                    Ket[{"0000"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{1.625, -1.375}, {2.375, -0.625}, 
                    RoundingRadius -> 0.1]}, "\"H\"", TooltipStyle -> 
                    "TextStyling"], Annotation[#, "H", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{1.625, -2.375}, {2.375, -1.625}, 
                    RoundingRadius -> 0.1]}, "\"Z\"", TooltipStyle -> 
                    "TextStyling"], Annotation[#, "Z", "Tooltip"]& ]}, {}}, {
                   0, 0}], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> (
                    Wolfram`QuantumFramework`Draw`PackagePrivate`qc$62945 = 
                    Wolfram`QuantumFramework`Draw`PackagePrivate`qc$62945[
                    "ToggleExpand", 
                    Append[{}, 1]]), PassEventsDown -> True, PassEventsUp -> 
                    False, Method -> "Preemptive"}]], 
                 TagBox[
                  GeometricTransformationBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Dashing[{Tiny, Tiny}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8]]], 
                    FaceForm[
                    RGBColor[0.898039, 0.898039, 0.898039, 0.3]]], 
                    RectangleBox[
                    NCache[{0.53125, 
                    Rational[-1, 2]}, {0.53125, -0.5}], 
                    NCache[{2.46875, 
                    Rational[-9, 2]}, {2.46875, -4.5}], RoundingRadius -> 
                    0.1]}, {{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{0.625, -1}, {1.625, -1}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{0.625, -4}, {1.625, -4}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -2}, {2.375, -2}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], {
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.375, -3}, {2.375, -3}}]}}, {
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], Null}}, {
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    LineBox[{{1., -2}, {1., -3}}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8], 
                    Thickness[Medium], {
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{0.625, -2.}, {1.375, -2.}}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8], 
                    Thickness[Medium], 
                    
                    LineBox[{{0.8939339828220179, -2.106066017177982}, {
                    1.1060660171779821`, -1.8939339828220179`}}], 
                    
                    LineBox[{{1.1060660171779821`, -2.106066017177982}, {
                    0.8939339828220179, -1.8939339828220179`}}]}, "\"*\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "*", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{0.625, -3.}, {1.375, -3.}}], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.8], 
                    Thickness[Medium], 
                    
                    LineBox[{{0.8939339828220179, -3.106066017177982}, {
                    1.1060660171779821`, -2.893933982822018}}], 
                    LineBox[{{1.1060660171779821`, -3.106066017177982}, {
                    0.8939339828220179, -2.893933982822018}}]}, "\"*\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "*", "Tooltip"]& ]}}, "\"SWAP\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "SWAP", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{{{
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.625, -4.}, {1.85, -4.}}], 
                    LineBox[{{2.15, -4.}, {2.375, -4.}}], 
                    EdgeForm[
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]]], 
                    DiskBox[{2., -4.}, 0.15000000000000002`], 
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]], 
                    Opacity[1], 
                    LineBox[{{1.85, -4.}, {2.15, -4.}}], 
                    LineBox[{{2., -4.15}, {2., -3.85}}]}, "\"NOT\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "NOT", "Tooltip"]& ], {{
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    LineBox[{{2., -1.09375}, {2., -3.85}}]}}}}, {
                    TagBox[
                    TooltipBox[{
                    Directive[
                    CapForm[None], 
                    RGBColor[0.537254, 0.537254, 0.537254], 
                    Opacity[0.3]], 
                    Directive[
                    AbsoluteThickness[1], 
                    Opacity[0.3]], 
                    LineBox[{{1.625, -1.}, {1.90625, -1.}}], 
                    LineBox[{{2.09375, -1.}, {2.375, -1.}}], 
                    EdgeForm[
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    Opacity[0.3]]], 
                    DiskBox[{2., -1.}, 0.09375]}, "\"1\"", TooltipStyle -> 
                    "TextStyling"], Annotation[#, "1", "Tooltip"]& ]}, {}}, 
                    RowBox[{
                    SubscriptBox["\"C\"", "\"NOT\""], "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]], Annotation[#, 
                    Subscript["C", "NOT"][{1}, {}], "Tooltip"]& ]}, {}}, {2, 
                   0}], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> (
                    Wolfram`QuantumFramework`Draw`PackagePrivate`qc$62945 = 
                    Wolfram`QuantumFramework`Draw`PackagePrivate`qc$62945[
                    "ToggleExpand", 
                    Append[{}, 2]]), PassEventsDown -> True, PassEventsUp -> 
                    False, Method -> "Preemptive"}]], {
                  TagBox[
                   TooltipBox[{{
                    TagBox[
                    TooltipBox[{{
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.7367, 0.358, 0.503]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.7367, 0.358, 0.503], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{4.625, -1.375}, {5.375, -0.625}, 
                    RoundingRadius -> 0.1]}, "\"Measurement\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Measurement", "Tooltip"]& ]}, {{
                    Thickness[Small], {
                    
                    LineBox[{{5.151690686445303, -1.0772902651951612`}, {
                    5.212366961023424, -1.0332063712732258`}}], 
                    LineBox[{{5.116904337848513, -1.0409065970372444`}, {
                    5.163666072987917, -0.9822692358521422}}], 
                    
                    LineBox[{{5.073692193435111, -1.015088542646603}, {
                    5.103169070809155, -0.9461239597052442}}], 
                    
                    LineBox[{{5.0251687373408105`, -1.0016969196685124`}, {
                    5.035236232277135, -0.9273756875359171}}], 
                    
                    LineBox[{{4.9748312626591895`, -1.0016969196685122`}, {
                    4.964763767722865, -0.9273756875359171}}], 
                    
                    LineBox[{{4.926307806564889, -1.015088542646603}, {
                    4.896830929190845, -0.9461239597052442}}], 
                    
                    LineBox[{{4.883095662151487, -1.0409065970372444`}, {
                    4.836333927012083, -0.9822692358521422}}], 
                    
                    LineBox[{{4.848309313554697, -1.0772902651951612`}, {
                    4.787633038976576, -1.0332063712732258`}}]}, 
                    Thickness[Medium], 
                    
                    LineBox[{{5, -1.1875}, {
                    5.17024643740233, -0.8533725534293621}}]}}, 
                    Dashing[{Small, Small}], {}}, 
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]], 
                    Annotation[#, 
                    "Measurement"["I"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{{
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.7367, 0.358, 0.503]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.7367, 0.358, 0.503], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{4.625, -2.375}, {5.375, -1.625}, 
                    RoundingRadius -> 0.1]}, "\"Measurement\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Measurement", "Tooltip"]& ]}, {{
                    Thickness[Small], {
                    
                    LineBox[{{5.151690686445303, -2.0772902651951615`}, {
                    5.212366961023424, -2.033206371273226}}], 
                    
                    LineBox[{{5.116904337848513, -2.040906597037244}, {
                    5.163666072987917, -1.9822692358521423`}}], 
                    
                    LineBox[{{5.073692193435111, -2.0150885426466028`}, {
                    5.103169070809155, -1.9461239597052442`}}], 
                    
                    LineBox[{{5.0251687373408105`, -2.001696919668512}, {
                    5.035236232277135, -1.9273756875359171`}}], 
                    
                    LineBox[{{4.9748312626591895`, -2.001696919668512}, {
                    4.964763767722865, -1.9273756875359171`}}], 
                    
                    LineBox[{{4.926307806564889, -2.0150885426466028`}, {
                    4.896830929190845, -1.9461239597052442`}}], 
                    
                    LineBox[{{4.883095662151487, -2.040906597037244}, {
                    4.836333927012083, -1.982269235852142}}], 
                    
                    LineBox[{{4.848309313554697, -2.0772902651951615`}, {
                    4.787633038976576, -2.033206371273226}}]}, 
                    Thickness[Medium], 
                    
                    LineBox[{{5, -2.1875}, {
                    5.17024643740233, -1.8533725534293621`}}]}}, 
                    Dashing[{Small, Small}], {}}, 
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]], 
                    Annotation[#, 
                    "Measurement"["I"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{{
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.7367, 0.358, 0.503]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.7367, 0.358, 0.503], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{4.625, -3.375}, {5.375, -2.625}, 
                    RoundingRadius -> 0.1]}, "\"Measurement\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Measurement", "Tooltip"]& ]}, {{
                    Thickness[Small], {
                    
                    LineBox[{{5.151690686445303, -3.0772902651951615`}, {
                    5.212366961023424, -3.033206371273226}}], 
                    
                    LineBox[{{5.116904337848513, -3.040906597037244}, {
                    5.163666072987917, -2.9822692358521423`}}], 
                    LineBox[{{5.073692193435111, -3.015088542646603}, {
                    5.103169070809155, -2.946123959705244}}], 
                    
                    LineBox[{{5.0251687373408105`, -3.0016969196685124`}, {
                    5.035236232277135, -2.927375687535917}}], 
                    
                    LineBox[{{4.9748312626591895`, -3.0016969196685124`}, {
                    4.964763767722865, -2.927375687535917}}], 
                    
                    LineBox[{{4.926307806564889, -3.015088542646603}, {
                    4.896830929190845, -2.946123959705244}}], 
                    
                    LineBox[{{4.883095662151487, -3.040906597037244}, {
                    4.836333927012083, -2.9822692358521423`}}], 
                    
                    LineBox[{{4.848309313554697, -3.0772902651951615`}, {
                    4.787633038976576, -3.033206371273226}}]}, 
                    Thickness[Medium], 
                    
                    LineBox[{{5, -3.1875}, {
                    5.17024643740233, -2.853372553429362}}]}}, 
                    Dashing[{Small, Small}], {}}, 
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]], 
                    Annotation[#, 
                    "Measurement"["I"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{{
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.7367, 0.358, 0.503]], 
                    FaceForm[
                    Directive[
                    RGBColor[0.7367, 0.358, 0.503], 
                    Opacity[0.3]]], 
                    
                    RectangleBox[{4.625, -4.375}, {5.375, -3.625}, 
                    RoundingRadius -> 0.1]}, "\"Measurement\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Measurement", "Tooltip"]& ]}, {{
                    Thickness[Small], {
                    
                    LineBox[{{5.151690686445303, -4.0772902651951615`}, {
                    5.212366961023424, -4.033206371273225}}], 
                    
                    LineBox[{{5.116904337848513, -4.040906597037244}, {
                    5.163666072987917, -3.9822692358521423`}}], 
                    
                    LineBox[{{5.073692193435111, -4.015088542646604}, {
                    5.103169070809155, -3.946123959705244}}], 
                    
                    LineBox[{{5.0251687373408105`, -4.001696919668513}, {
                    5.035236232277135, -3.927375687535917}}], 
                    
                    LineBox[{{4.9748312626591895`, -4.001696919668513}, {
                    4.964763767722865, -3.927375687535917}}], 
                    
                    LineBox[{{4.926307806564889, -4.015088542646604}, {
                    4.896830929190845, -3.946123959705244}}], 
                    
                    LineBox[{{4.883095662151487, -4.040906597037244}, {
                    4.836333927012083, -3.9822692358521423`}}], 
                    
                    LineBox[{{4.848309313554697, -4.0772902651951615`}, {
                    4.787633038976576, -4.033206371273225}}]}, 
                    Thickness[Medium], 
                    
                    LineBox[{{5, -4.1875}, {
                    5.17024643740233, -3.853372553429362}}]}}, 
                    Dashing[{Small, Small}], {}}, 
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]], 
                    Annotation[#, 
                    "Measurement"["I"], "Tooltip"]& ]}, 
                    Dashing[{Small, Small}], {{
                    RGBColor[0.7367, 0.358, 0.503], 
                    LineBox[{{5., -1.375}, {5., -1.625}}]}, {
                    RGBColor[0.7367, 0.358, 0.503], 
                    LineBox[{{5., -2.375}, {5., -2.625}}]}, {
                    RGBColor[0.7367, 0.358, 0.503], 
                    LineBox[{{5., -3.375}, {5., -3.625}}]}}}, 
                    TemplateBox[{
                    RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}], 
                    RowBox[{"\[CircleTimes]", "4"}]}, "Superscript", 
                    SyntaxForm -> SuperscriptBox]], Annotation[#, 
                    Superscript[
                    "Measurement"["I"], 
                    CircleTimes[4]], "Tooltip"]& ]}}, {}}, {
               ImageSize -> Tiny}], 
              
              RowBox[{"\"I\"", "@*", "\"Second Part\"", "@*", 
                "\"First Part\""}]], Annotation[#, 
              Composition["I", "Second Part", "First Part"], "Tooltip"]& ], 
            GridBox[{{""}, {
               RowBox[{
                 TagBox["\"Gates: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Depth: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Width: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["8", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "3"}], ",", 
                    RowBox[{"-", "2"}], ",", 
                    RowBox[{"-", "1"}], ",", "0", ",", "1", ",", "2", ",", 
                    "3", ",", "4"}], "}"}]}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", 
                    ",", "2", ",", "2"}], "}"}]}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Measurement Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumCircuitOperator[<|"Elements" -> {
      Wolfram`QuantumFramework`QuantumCircuitOperator[<|"Elements" -> {
          Wolfram`QuantumFramework`QuantumOperator[
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {16}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1, {
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 2} -> 1, {
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 3} -> 1, {
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 4} -> 1|>], "Output" -> 
              Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 3} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 3} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 4} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 4} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Picture" -> "Schrodinger", "Label" -> Ket[{"0000"}], 
              "ParameterSpec" -> {}|>]], {{1, 2, 3, 4}, {}}], 
          Wolfram`QuantumFramework`QuantumOperator[
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[
            Automatic, {4}, 0, {
             1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
              2^Rational[-1, 2], 2^Rational[-1, 2], 2^
               Rational[-1, 2], -2^Rational[-1, 2]}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Picture" -> "Schrodinger", "Label" -> "H", 
              "ParameterSpec" -> {}|>]], {{1}, {1}}], 
          Wolfram`QuantumFramework`QuantumOperator[
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {4}, 0, {1, {{0, 2}, {{1}, {4}}}, {1, -1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Picture" -> "Schrodinger", "Label" -> "Z", 
              "ParameterSpec" -> {}|>]], {{2}, {2}}]}, "Label" -> 
        "First Part"|>], 
      Wolfram`QuantumFramework`QuantumCircuitOperator[<|"Elements" -> {
          Wolfram`QuantumFramework`QuantumOperator[
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[
            Automatic, {16}, 0, {
             1, {{0, 4}, {{1}, {7}, {10}, {16}}}, {1, 1, 1, 1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Picture" -> "Schrodinger", "Label" -> "SWAP", 
              "ParameterSpec" -> {}|>]], {{2, 3}, {2, 3}}], 
          Wolfram`QuantumFramework`QuantumOperator[
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[
            Automatic, {16}, 0, {
             1, {{0, 4}, {{1}, {6}, {12}, {15}}}, {1, 1, 1, 1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Picture" -> "Schrodinger", "Label" -> 
              Subscript["C", "NOT"][{1}, {}], "ParameterSpec" -> {}|>]], {{1, 
           4}, {1, 4}}]}, "Label" -> "Second Part"|>], 
      Wolfram`QuantumFramework`QuantumMeasurementOperator[
       Wolfram`QuantumFramework`QuantumOperator[
        Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {4096}, 0, {
          1, {{0, 16}, {{1}, {393}, {581}, {973}, {1059}, {1451}, {1639}, {
            2031}, {2066}, {2458}, {2646}, {3038}, {3124}, {3516}, {3704}, {
            4096}}}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 3} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 3} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 4} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 4} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[
                    Subscript["\[ScriptCapitalE]", 0], Bold], 
                   "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[
                    Subscript["\[ScriptCapitalE]", 1], Bold], 
                   "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[
                    Subscript["\[ScriptCapitalE]", 0], Bold], 
                   "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[
                    Subscript["\[ScriptCapitalE]", 1], Bold], 
                   "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[
                    Subscript["\[ScriptCapitalE]", 0], Bold], 
                   "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 3} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[
                    Subscript["\[ScriptCapitalE]", 1], Bold], 
                   "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 3} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[
                    Subscript["\[ScriptCapitalE]", 0], Bold], 
                   "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 4} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[
                    Subscript["\[ScriptCapitalE]", 1], Bold], 
                   "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 4} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 5} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 5} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 6} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 6} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 7} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 7} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 8} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 8} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Picture" -> "Schrodinger", "Label" -> "I", 
           "ParameterSpec" -> {}|>]], {{-3, -2, -1, 0, 1, 2, 3, 4}, {1, 2, 3, 
         4}}], {{1, 2, 3, 4}}]}, "Label" -> 
    Composition["I", "Second Part", "First Part"]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9442413569085693`*^9, 3.944241372063984*^9}, 
   3.9442414873999863`*^9, 3.944241542589346*^9, 3.944242484229521*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"a87c42fd-75e6-d449-9a00-986182c3cb36"]
}, Open  ]],

Cell["\<\
This can be helpful if you want to label various parts of an algorithm\
\[CloseCurlyQuote]s diagram:\
\>", "Text",
 CellChangeTimes->{{3.944241443583849*^9, 
  3.9442414584220676`*^9}},ExpressionUUID->"11721df3-bf67-4645-8420-\
c8c7e3703d94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"circuit2", "[", 
  RowBox[{"\"\<Diagram\>\"", ",", 
   RowBox[{"PlotLabel", "->", "\"\<Full Circuit\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9442413770581875`*^9, 3.9442414088631516`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"ef06d25b-8006-2845-bfb6-79bb260dd275"],

Cell[BoxData[
 GraphicsBox[{{
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{2.375, -1}, {2.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{2.375, -2}, {2.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{2.375, -3}, {2.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{2.375, -4}, {2.625, -4}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{4.375, -1}, {4.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{4.375, -2}, {4.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{4.375, -3}, {4.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{4.375, -4}, {4.625, -4}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{5.375, -1}, {5.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{5.375, -2}, {5.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{5.375, -3}, {5.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{5.375, -4}, {5.625, -4}}]}}}, {
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
     LineBox[{{0.375, -0.0234375}, {5.625, -0.0234375}}], 
     LineBox[{{0.375, 0.0234375}, {5.625, 0.0234375}}]}, InsetBox[
     StyleBox["\<\"c\"\>",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, 0}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]]}, {
    TagBox[GeometricTransformationBox[{
       {EdgeForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.8], 
        Dashing[{Tiny, Tiny}]}], FaceForm[{RGBColor[
        0.898039, 0.898039, 0.898039], Opacity[0.3]}], 
        RectangleBox[NCache[{0.53125, Rational[-1, 2]}, {0.53125, -0.5}], 
         NCache[{2.46875, Rational[-9, 2]}, {2.46875, -4.5}],
         RoundingRadius->0.1]}, {
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{1.375, -1}, {1.625, -1}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{1.375, -2}, {1.625, -2}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None]}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None]}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{1.375, -3}, {2.375, -3}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{1.375, -4}, {2.375, -4}}]}}}, {
        TagBox[
         TooltipBox[
          {EdgeForm[Hue[0.62, 0.45, 0.87]], FaceForm[{Hue[0.62, 0.45, 0.87], 
           Opacity[0.3]}], 
           GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxFVAtMU1cYvtgyBmrM3YABxQFWeQznhkBkk+RsoKBAArYyMGPKiuLoVuU1
h8kGzCFReegqo1hwsNiGoptgmGIQOIcw2CYIYwiiIox5W1oKksntvdTH2JGc
sj85OTk5+c/5/+/x+8gOSw6soCgqFq8Xu/rci+BB8FJMQdt5aXen0T2VU5NT
FQ9eKjY5Fa+jUW/avmepZ3lwakW5x8eBNBqyNp/VlvBAjq6dcA+h0St1Zcen
CnkQ1+mw5/twGs2vOd6xNYcH7LrG+fFtNKruL5pok/HA6tKyvTeORguuZseS
eB5ErEz8S7qbRh0pbF3vOzzY6ml1lX9II994I9XgwwOl90MRJaORKkS1UeLA
A49ue5HjJzRy+eC3rCfTHDBsE0iPKmj02Uis/d0+Diy4vboxKptGUnW2yv8n
DjjYa+LSj9Bo/dX2Sd9SDswkKC8NHqWRl1CzyVnOgfKr/bVff0mjPt/ksc3R
HDhTmDSbmU+jGnjsfo+YAzcb5APVBTR6+/eZN1woDqj+HVtcxOf2LtGutDEL
+Nn1xI0afO7K19/mrlvAXFZPVzbOT44SXHOutICYe09SivD7ivAfDVSuBbgb
N8QM4/9ntOG/PpdYgDhC2S3H9U2zZk1ssAVIJrRHYnH99fvLwv1dLCDPa2Z/
Ae7vb8/4iP4FFnRZs4xrcP+612RzueMsqGhRqhwwPtHHMirje1gQ0Ji8ORvj
V7n2G1DWxAI6QF2SgvGVJF6KSz7Pgn+Ei4dvY/y/yn/Lb6SUBSd/8SoxYn4y
HAc43wIWjCc9jtFh/opV7mkHclkQKG3rFGN+ncNqrEMXTUCcsz3BOVSI1MZy
x13VJlD3qXKqRixE/pqcndy3JnD54arpCVqIhodDqZFyE6CW4v97iee8i/cj
wXJ+aoXCLW1MsPz+g9LWRvNNwfL/9elrH0/uNUA5qW/1+wpdu4cB5pP6W+/b
1d8Y1UMp6e+LUYfClHN6WEX6z23ZdEH0kR7uIPhcL35XcWi9HjYQ/PZGyiO7
5hjIEHxNQZlthZCBOoL/e8LaUWEFA82En8/tB2M0CgbOEv5mHymGGuIYeIjw
Gwb/uJwYxMA9hP/mNwPcHogY2E30cTKzbzJjFQM7iH5kMVDsIWBgENFX9Eo3
O4pi4Hmiv6YrF4t88P0tos+Cp5Hf5eF8b6LfM9JTdvP4/Q1E3z/kKS5k4/93
E/333plQ38L12fwRFXawth/Xb/PPyKj+YCjur4r4K+TOoF8L7t+P+C/zqcF7
EeNj86f/61t2NGL8rMS/Fm3S81SMbw3xd3hC9J9ajL/N/+nGYtnLd/XQNh+0
ls4tq0UGaJsfjc92tgbvM0DbfLliPh3IawzQNn+GBpp1A2YD/A/pXG7H
             "]], {-0.1, 0}], GeometricTransformationBox[InsetBox[
             StyleBox[
              TemplateBox[{"\"0000\""},
               "Ket"],
              StripOnInput->False,
              FontFamily->"Roboto",
              FontSize->11,
              FontColor->GrayLevel[0],
              Background->GrayLevel[0, 0]], {1.129626135594409, -2.5}], {{{0, 
             1}, {-1, 0}}, Center}]},
          TemplateBox[{"\"0000\""}, "Ket"]],
         Annotation[#, 
          Ket[{"0000"}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {EdgeForm[RGBColor[0.368417, 0.506779, 0.709798]], FaceForm[{
           RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.3]}], 
           RectangleBox[{1.625, -1.375}, {2.375, -0.625},
            RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
             StyleBox["\<\"H\"\>",
              StripOnInput->False,
              FontFamily->"Roboto",
              FontSize->11,
              FontColor->GrayLevel[0],
              Background->GrayLevel[0, 0]], {2., -1.}], {{{1, 0}, {0, 1}}, 
             Center}]},
          "\"H\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "H", "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{
           RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
           RectangleBox[{1.625, -2.375}, {2.375, -1.625},
            RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
             StyleBox["\<\"Z\"\>",
              StripOnInput->False,
              FontFamily->"Roboto",
              FontSize->11,
              FontColor->GrayLevel[0],
              Background->GrayLevel[0, 0]], {2., -2.}], {{{1, 0}, {0, 1}}, 
             Center}]},
          "\"Z\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Z", "Tooltip"]& ]}, {}, InsetBox[
        StyleBox["\<\"First Part\"\>",
         StripOnInput->False,
         FontFamily->"Times",
         Background->GrayLevel[0, 0]], 
        NCache[{Rational[3, 2], Rational[-2, 5]}, {1.5, -0.4}]]}, {0, 0}],
     EventHandlerTag[{
      "MouseClicked" :> (
        Wolfram`QuantumFramework`Draw`PackagePrivate`qc$47472 = 
        Wolfram`QuantumFramework`Draw`PackagePrivate`qc$47472["ToggleExpand", 
          Append[{}, 1]]), PassEventsDown -> True, PassEventsUp -> False, 
       Method -> "Preemptive"}]], 
    TagBox[GeometricTransformationBox[{
       {EdgeForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.8], 
        Dashing[{Tiny, Tiny}]}], FaceForm[{RGBColor[
        0.898039, 0.898039, 0.898039], Opacity[0.3]}], 
        RectangleBox[NCache[{0.53125, Rational[-1, 2]}, {0.53125, -0.5}], 
         NCache[{2.46875, Rational[-9, 2]}, {2.46875, -4.5}],
         RoundingRadius->0.1]}, {
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None]}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None]}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{0.625, -1}, {1.625, -1}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{0.625, -4}, {1.625, -4}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None]}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{1.375, -2}, {2.375, -2}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{1.375, -3}, {2.375, -3}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[
         None]}}, {
        TagBox[
         TooltipBox[
          {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[
           None], LineBox[{{1., -2}, {1., -3}}], 
           {RGBColor[0.537254, 0.537254, 0.537254], Thickness[Medium], 
            Opacity[0.8], 
            TagBox[
             TooltipBox[
              {RGBColor[0.537254, 0.537254, 0.537254], AbsoluteThickness[1], 
               Opacity[0.3], CapForm[None], 
               LineBox[{{0.625, -2.}, {1.375, -2.}}], 
               {RGBColor[0.537254, 0.537254, 0.537254], Thickness[Medium], 
                Opacity[0.8], 
                LineBox[{{0.8939339828220179, -2.106066017177982}, {
                 1.1060660171779821`, -1.8939339828220179`}}], 
                LineBox[{{1.1060660171779821`, -2.106066017177982}, {
                 0.8939339828220179, -1.8939339828220179`}}]}},
              "\"*\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "*", "Tooltip"]& ], 
            TagBox[
             TooltipBox[
              {RGBColor[0.537254, 0.537254, 0.537254], AbsoluteThickness[1], 
               Opacity[0.3], CapForm[None], 
               LineBox[{{0.625, -3.}, {1.375, -3.}}], 
               {RGBColor[0.537254, 0.537254, 0.537254], Thickness[Medium], 
                Opacity[0.8], 
                LineBox[{{0.8939339828220179, -3.106066017177982}, {
                 1.1060660171779821`, -2.893933982822018}}], 
                LineBox[{{1.1060660171779821`, -3.106066017177982}, {
                 0.8939339828220179, -2.893933982822018}}]}},
              "\"*\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "*", "Tooltip"]& ]}},
          "\"SWAP\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "SWAP", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{{
            TagBox[
             TooltipBox[
              {RGBColor[0.537254, 0.537254, 0.537254], AbsoluteThickness[1], 
               Opacity[0.3], CapForm[None], 
               LineBox[{{1.625, -4.}, {1.85, -4.}}], 
               LineBox[{{2.15, -4.}, {2.375, -4.}}], 
               {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{
                RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
                DiskBox[{2., -4.}, 0.15000000000000002], 
                {RGBColor[0.880722, 0.611041, 0.142051], Opacity[1], 
                 LineBox[{{1.85, -4.}, {2.15, -4.}}], 
                 LineBox[{{2., -4.15}, {2., -3.85}}]}}},
              "\"NOT\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "NOT", "Tooltip"]& ], 
            {RGBColor[0.880722, 0.611041, 0.142051], 
             LineBox[{{2., -1.09375}, {2., -3.85}}]}}, 
           TagBox[
            TooltipBox[
             {RGBColor[0.537254, 0.537254, 0.537254], AbsoluteThickness[1], 
              Opacity[0.3], CapForm[None], 
              LineBox[{{1.625, -1.}, {1.90625, -1.}}], 
              LineBox[{{2.09375, -1.}, {2.375, -1.}}], 
              {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{
               RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
               DiskBox[{2., -1.}, 0.09375]}},
             "\"1\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "1", "Tooltip"]& ], {}},
          RowBox[{
            SubscriptBox["\"C\"", "\"NOT\""], "[", 
            RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}]],
         Annotation[#, 
          Subscript["C", "NOT"][{1}, {}], "Tooltip"]& ]}, {}, InsetBox[
        StyleBox["\<\"Second Part\"\>",
         StripOnInput->False,
         FontFamily->"Times",
         Background->GrayLevel[0, 0]], 
        NCache[{Rational[3, 2], Rational[-2, 5]}, {1.5, -0.4}]]}, {2, 0}],
     EventHandlerTag[{
      "MouseClicked" :> (
        Wolfram`QuantumFramework`Draw`PackagePrivate`qc$47472 = 
        Wolfram`QuantumFramework`Draw`PackagePrivate`qc$47472["ToggleExpand", 
          Append[{}, 2]]), PassEventsDown -> True, PassEventsUp -> False, 
       Method -> "Preemptive"}]], {
     TagBox[
      TooltipBox[{{
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{4.625, -1.375}, {5.375, -0.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{5.151690686445303, -1.0772902651951612`}, {
               5.212366961023424, -1.0332063712732258`}}], 
              LineBox[{{5.116904337848513, -1.0409065970372444`}, {
               5.163666072987917, -0.9822692358521422}}], 
              LineBox[{{5.073692193435111, -1.015088542646603}, {
               5.103169070809155, -0.9461239597052442}}], 
              LineBox[{{5.0251687373408105`, -1.0016969196685124`}, {
               5.035236232277135, -0.9273756875359171}}], 
              LineBox[{{4.9748312626591895`, -1.0016969196685122`}, {
               4.964763767722865, -0.9273756875359171}}], 
              LineBox[{{4.926307806564889, -1.015088542646603}, {
               4.896830929190845, -0.9461239597052442}}], 
              LineBox[{{4.883095662151487, -1.0409065970372444`}, {
               4.836333927012083, -0.9822692358521422}}], 
              LineBox[{{4.848309313554697, -1.0772902651951612`}, {
               4.787633038976576, -1.0332063712732258`}}]}, 
             {Thickness[Medium], 
              LineBox[{{5, -1.1875}, {
                5.17024643740233, -0.8533725534293621}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{4.625, -2.375}, {5.375, -1.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{5.151690686445303, -2.0772902651951615`}, {
               5.212366961023424, -2.033206371273226}}], 
              LineBox[{{5.116904337848513, -2.040906597037244}, {
               5.163666072987917, -1.9822692358521423`}}], 
              LineBox[{{5.073692193435111, -2.0150885426466028`}, {
               5.103169070809155, -1.9461239597052442`}}], 
              LineBox[{{5.0251687373408105`, -2.001696919668512}, {
               5.035236232277135, -1.9273756875359171`}}], 
              LineBox[{{4.9748312626591895`, -2.001696919668512}, {
               4.964763767722865, -1.9273756875359171`}}], 
              LineBox[{{4.926307806564889, -2.0150885426466028`}, {
               4.896830929190845, -1.9461239597052442`}}], 
              LineBox[{{4.883095662151487, -2.040906597037244}, {
               4.836333927012083, -1.982269235852142}}], 
              LineBox[{{4.848309313554697, -2.0772902651951615`}, {
               4.787633038976576, -2.033206371273226}}]}, 
             {Thickness[Medium], 
              LineBox[{{5, -2.1875}, {
                5.17024643740233, -1.8533725534293621`}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{4.625, -3.375}, {5.375, -2.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{5.151690686445303, -3.0772902651951615`}, {
               5.212366961023424, -3.033206371273226}}], 
              LineBox[{{5.116904337848513, -3.040906597037244}, {
               5.163666072987917, -2.9822692358521423`}}], 
              LineBox[{{5.073692193435111, -3.015088542646603}, {
               5.103169070809155, -2.946123959705244}}], 
              LineBox[{{5.0251687373408105`, -3.0016969196685124`}, {
               5.035236232277135, -2.927375687535917}}], 
              LineBox[{{4.9748312626591895`, -3.0016969196685124`}, {
               4.964763767722865, -2.927375687535917}}], 
              LineBox[{{4.926307806564889, -3.015088542646603}, {
               4.896830929190845, -2.946123959705244}}], 
              LineBox[{{4.883095662151487, -3.040906597037244}, {
               4.836333927012083, -2.9822692358521423`}}], 
              LineBox[{{4.848309313554697, -3.0772902651951615`}, {
               4.787633038976576, -3.033206371273226}}]}, 
             {Thickness[Medium], 
              LineBox[{{5, -3.1875}, {
                5.17024643740233, -2.853372553429362}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{4.625, -4.375}, {5.375, -3.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{5.151690686445303, -4.0772902651951615`}, {
               5.212366961023424, -4.033206371273225}}], 
              LineBox[{{5.116904337848513, -4.040906597037244}, {
               5.163666072987917, -3.9822692358521423`}}], 
              LineBox[{{5.073692193435111, -4.015088542646604}, {
               5.103169070809155, -3.946123959705244}}], 
              LineBox[{{5.0251687373408105`, -4.001696919668513}, {
               5.035236232277135, -3.927375687535917}}], 
              LineBox[{{4.9748312626591895`, -4.001696919668513}, {
               4.964763767722865, -3.927375687535917}}], 
              LineBox[{{4.926307806564889, -4.015088542646604}, {
               4.896830929190845, -3.946123959705244}}], 
              LineBox[{{4.883095662151487, -4.040906597037244}, {
               4.836333927012083, -3.9822692358521423`}}], 
              LineBox[{{4.848309313554697, -4.0772902651951615`}, {
               4.787633038976576, -4.033206371273225}}]}, 
             {Thickness[Medium], 
              LineBox[{{5, -4.1875}, {
                5.17024643740233, -3.853372553429362}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ]}, 
        {Dashing[{Small, Small}], 
         {RGBColor[0.7367, 0.358, 0.503], 
          LineBox[{{5., -1.375}, {5., -1.625}}]}, 
         {RGBColor[0.7367, 0.358, 0.503], 
          LineBox[{{5., -2.375}, {5., -2.625}}]}, 
         {RGBColor[0.7367, 0.358, 0.503], 
          LineBox[{{5., -3.375}, {5., -3.625}}]}}},
       TemplateBox[{
         RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}], 
         RowBox[{"\[CircleTimes]", "4"}]}, "Superscript", SyntaxForm -> 
        SuperscriptBox]],
      Annotation[#, 
       Superscript[
        "Measurement"["I"], 
        CircleTimes[4]], "Tooltip"]& ], 
     {RGBColor[0.537254, 0.537254, 0.537254], 
      LineBox[{{5., -0.625}, {5., -0.2109375}}], 
      {EdgeForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3]}], 
       FaceForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.8]}], 
       PolygonBox[{{4.90625, -0.2109375}, {5.09375, -0.2109375}, {
        5., -0.0234375}}]}}}}, {InsetBox[
     StyleBox["1",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -1}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["2",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -2}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["3",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -3}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["4",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -4}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]]}},
  ImageSize->Medium,
  PlotLabel->FormBox["\"Full Circuit\"", TraditionalForm]]], "Output",
 CellChangeTimes->{{3.9442413954279423`*^9, 3.9442414096746063`*^9}, 
   3.944241490505148*^9, 3.9442415449465256`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"50996b1e-ccc1-3c40-b7ed-db423daaa794"]
}, Open  ]],

Cell["\<\
This circuit now has measurements. Thus, evaluating it leads to a measurement \
object:\
\>", "Text",
 CellChangeTimes->{{3.944241742783823*^9, 
  3.944241791815817*^9}},ExpressionUUID->"f52a33ca-52d8-e346-8b53-\
b881ac843d3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mea1", "=", 
  RowBox[{"circuit2", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.944241782362179*^9, 3.9442418056568317`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"1301b4e7-8e3b-d847-a53c-aecde0e95699"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumMeasurement",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            TagBox[
             TooltipBox[
              GraphicsBox[{{
                 Opacity[0], 
                 
                 PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
                  0.}}]}, {{}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                   RGBColor[0.982864, 0.7431472, 0.3262672]], {{
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    
                    RectangleBox[{0.5487982520029133, 0.}, {
                    1.4512017479970867`, 0.5}, "RoundingRadius" -> 0], 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False]]}, {
                    FractionBox["1", "2"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], {}, StripOnInput -> False]], Annotation[#, 
                    Style[
                    Column[{
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False], 
                    Rational[1, 2]}], {}], "Tooltip"]& ], 
                    StatusArea[#, 0.5]& , TagBoxNote -> "0.5"], 
                    StyleBox["0.5`", {}, StripOnInput -> False]], 
                    Annotation[#, 
                    Style[0.5, {}], "Tooltip"]& ]}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    
                    RectangleBox[{1.5487982520029133`, 0.}, {
                    2.4512017479970867`, 0.5}, "RoundingRadius" -> 0], 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False]]}, {
                    FractionBox["1", "2"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], {}, StripOnInput -> False]], Annotation[#, 
                    Style[
                    Column[{
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False], 
                    Rational[1, 2]}], {}], "Tooltip"]& ], 
                    StatusArea[#, 0.5]& , TagBoxNote -> "0.5"], 
                    StyleBox["0.5`", {}, StripOnInput -> False]], 
                    Annotation[#, 
                    Style[0.5, {}], 
                    "Tooltip"]& ]}}}, {}, {}}, {}, {}, {}, {}, {}}, {
               ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], DisplayFunction -> Identity, 
                AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {-0.8428550619082302, 0.}, 
                CoordinatesToolOptions -> {"DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}, Frame -> {{True, False}, {True, False}},
                 FrameLabel -> {{None, None}, {None, None}}, 
                FrameTicks -> {{None, None}, {None, None}}, 
                GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], PlotRange -> {{All, All}, {All, All}},
                 PlotRangePadding -> {{
                   Scaled[0.02], 
                   Scaled[0.02]}, {None, 
                   Scaled[0.05]}}, Ticks -> {None, Automatic}}], "None"], 
             Annotation[#, None, "Tooltip"]& ], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Measurement Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            TagBox[
             TooltipBox[
              GraphicsBox[{{
                 Opacity[0], 
                 
                 PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
                  0.}}]}, {{}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                   RGBColor[0.982864, 0.7431472, 0.3262672]], {{
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    
                    RectangleBox[{0.5487982520029133, 0.}, {
                    1.4512017479970867`, 0.5}, "RoundingRadius" -> 0], 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False]]}, {
                    FractionBox["1", "2"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], {}, StripOnInput -> False]], Annotation[#, 
                    Style[
                    Column[{
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False], 
                    Rational[1, 2]}], {}], "Tooltip"]& ], 
                    StatusArea[#, 0.5]& , TagBoxNote -> "0.5"], 
                    StyleBox["0.5`", {}, StripOnInput -> False]], 
                    Annotation[#, 
                    Style[0.5, {}], "Tooltip"]& ]}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    
                    RectangleBox[{1.5487982520029133`, 0.}, {
                    2.4512017479970867`, 0.5}, "RoundingRadius" -> 0], 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False]]}, {
                    FractionBox["1", "2"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], {}, StripOnInput -> False]], Annotation[#, 
                    Style[
                    Column[{
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False], 
                    Rational[1, 2]}], {}], "Tooltip"]& ], 
                    StatusArea[#, 0.5]& , TagBoxNote -> "0.5"], 
                    StyleBox["0.5`", {}, StripOnInput -> False]], 
                    Annotation[#, 
                    Style[0.5, {}], 
                    "Tooltip"]& ]}}}, {}, {}}, {}, {}, {}, {}, {}}, {
               ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], DisplayFunction -> Identity, 
                AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {-0.8428550619082302, 0.}, 
                CoordinatesToolOptions -> {"DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}, Frame -> {{True, False}, {True, False}},
                 FrameLabel -> {{None, None}, {None, None}}, 
                FrameTicks -> {{None, None}, {None, None}}, 
                GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], PlotRange -> {{All, All}, {All, All}},
                 PlotRangePadding -> {{
                   Scaled[0.02], 
                   Scaled[0.02]}, {None, 
                   Scaled[0.05]}}, Ticks -> {None, Automatic}}], "None"], 
             Annotation[#, None, "Tooltip"]& ], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Measurement Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Entropy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{"1.`", "\"b\"", "bits", "\"Bits\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumMeasurement[
   Wolfram`QuantumFramework`QuantumMeasurementOperator[
    Wolfram`QuantumFramework`QuantumOperator[
     Wolfram`QuantumFramework`QuantumState[
     SparseArray[
      Automatic, {256}, 0, {
       1, {{0, 2}, {{1}, {154}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 1} -> 1|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[
                 Subscript["\[ScriptCapitalE]", 0], Bold], "Eigenvalue 1"], {
               0, {1}}], "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[
                 Subscript["\[ScriptCapitalE]", 1], Bold], "Eigenvalue 2"], {
               1, {2}}], "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[
                 Subscript["\[ScriptCapitalE]", 0], Bold], "Eigenvalue 1"], {
               0, {1}}], "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[
                 Subscript["\[ScriptCapitalE]", 1], Bold], "Eigenvalue 2"], {
               1, {2}}], "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[
                 Subscript["\[ScriptCapitalE]", 0], Bold], "Eigenvalue 1"], {
               0, {1}}], "Dual" -> False], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[
                 Subscript["\[ScriptCapitalE]", 1], Bold], "Eigenvalue 2"], {
               1, {2}}], "Dual" -> False], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[
                 Subscript["\[ScriptCapitalE]", 0], Bold], "Eigenvalue 1"], {
               0, {1}}], "Dual" -> False], 4} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[
                 Subscript["\[ScriptCapitalE]", 1], Bold], "Eigenvalue 2"], {
               1, {2}}], "Dual" -> False], 4} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 5} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 5} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 6} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 6} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 7} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 7} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 8} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 8} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schrodinger", "Label" -> None, 
        "ParameterSpec" -> {}|>]], {{-3, -2, -1, 0, 1, 2, 3, 4}, {}}], {{1, 2,
     3, 4}}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9442417864576073`*^9, 3.9442418075105057`*^9}},
 CellLabel->"Out[58]=",ExpressionUUID->"890e1f7b-d57a-2642-ab69-a92d678d2b73"]
}, Open  ]],

Cell["\<\
The measurement object can help you visualize the probability distribution or \
simply list the results:\
\>", "Text",
 CellChangeTimes->{{3.94424192735907*^9, 3.9442419515769615`*^9}, {
  3.944242097383356*^9, 
  3.9442421004880543`*^9}},ExpressionUUID->"a8a694a4-69b5-844a-ad7b-\
d3bcec4e987c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mea1", "[", "\"\<Distribution\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.9442421150830708`*^9, 3.9442421194960327`*^9}, {
  3.9442421793297215`*^9, 3.9442421863839817`*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"8662848f-e0ed-5f49-8193-0fda47853350"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CategoricalDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {
                10.869015226326882`, {0., 10.869015226326882`}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.55], 
               RectangleBox[{0., 0.}, {0.87, 1.}, RoundingRadius -> 0]}, {
               GrayLevel[0.8], 
               RectangleBox[{1., 0.}, {1.88, 2.}, RoundingRadius -> 0]}, {
               GrayLevel[0.65], 
               RectangleBox[{2., 0.}, {2.88, 3.}, RoundingRadius -> 0]}}, 
             AspectRatio -> 1, Background -> GrayLevel[1], 
             ImageSize -> {Automatic, 29.029}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Scalar\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "16"}, 
                    "RowWithSeparators"], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
                    "InitialData" -> {
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False]}, "AllowEmbedding" -> True, "InitialShape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`UnknownShape[False]], 16, 
                    DirectedInfinity[1], {}], "InitialType" -> 
                    TypeSystem`Vector[TypeSystem`AnyType, 16], "Meta" -> <||>,
                     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`UnknownShape[False]], 16, 
                    DirectedInfinity[1], {}], "Type" -> 
                    TypeSystem`Vector[TypeSystem`AnyType, 16], "Path" -> {}, 
                    "DisplayedRowCount" -> 16, "DisplayedColumnCount" -> 1, 
                    "DataRowCount" -> 16, "DataColumnCount" -> 1, 
                    "SortPaths" -> {}, "SortDirections" -> {}, 
                    "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}}, 
                    BaseStyle -> {
                    ContextMenu -> Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                    "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
                    Dividers -> All, FrameStyle -> 
                    GrayLevel[0.7490196078431373], Spacings -> {0, 0}, 
                    Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Source Sans Pro", FontSize -> 14, 
                    FontWeight -> Plain}], LineBreakWithin -> False, 
                    ContextMenu -> {}, NumberMarks -> False, ShowAutoStyles -> 
                    False]], TypeSystem`NestedGrid`PackagePrivate`initialQ = 
                    True}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`datasetData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`SubViewPathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = 
                    Dynamic[
                    Replace[
                    Replace[
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
                    Blank[]] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                    Blank[]], 
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                    Blank[]], 
                    Pattern[
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Blank[]]] :> (
                    Increment[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path$; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
                    TypeSystem`NestedGrid`PackagePrivate`pathType$; 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader = TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path$, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
                    Except[
                    Alternatives[
                    Blank[Spacer], ""]]] :> 
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
                    TypeSystem`NestedGrid`PackagePrivate`bar]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
                    DynamicWrapperBox[
                    DynamicBox[
                    ToBoxes[
                    Dataset`DatasetContent[
                    2, "Path" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
                    "Grid" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    "VPos" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
                    "TopBar" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
                    "BottomBar" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
                    "OutputID" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
                    StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
                    MouseAnnotation[]], 
                    Initialization :> (
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
                    CreateUUID[]), DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, 
                    UnsavedVariables :> {
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$}], 
                    Deploy, DefaultBaseStyle -> "Deploy"], 
                    Dataset`InterpretDataset[1], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], 
                    Magnification -> 0.8 Inherited, StripOnInput -> False]], 
                   Annotation[#, 
                    Magnify[
                    Dataset[{
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False]}, 
                    TypeSystem`Vector[TypeSystem`AnyType, 16], <||>], 0.8], 
                    "Tooltip"]& ], "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {
                10.869015226326882`, {0., 10.869015226326882`}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.55], 
               RectangleBox[{0., 0.}, {0.87, 1.}, RoundingRadius -> 0]}, {
               GrayLevel[0.8], 
               RectangleBox[{1., 0.}, {1.88, 2.}, RoundingRadius -> 0]}, {
               GrayLevel[0.65], 
               RectangleBox[{2., 0.}, {2.88, 3.}, RoundingRadius -> 0]}}, 
             AspectRatio -> 1, Background -> GrayLevel[1], 
             ImageSize -> {Automatic, 29.029}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Scalar\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "16"}, 
                    "RowWithSeparators"], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
                    "InitialData" -> {
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False]}, "AllowEmbedding" -> True, "InitialShape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`UnknownShape[False]], 16, 
                    DirectedInfinity[1], {}], "InitialType" -> 
                    TypeSystem`Vector[TypeSystem`AnyType, 16], "Meta" -> <||>,
                     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`UnknownShape[False]], 16, 
                    DirectedInfinity[1], {}], "Type" -> 
                    TypeSystem`Vector[TypeSystem`AnyType, 16], "Path" -> {}, 
                    "DisplayedRowCount" -> 16, "DisplayedColumnCount" -> 1, 
                    "DataRowCount" -> 16, "DataColumnCount" -> 1, 
                    "SortPaths" -> {}, "SortDirections" -> {}, 
                    "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}}, 
                    BaseStyle -> {
                    ContextMenu -> Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                    "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
                    Dividers -> All, FrameStyle -> 
                    GrayLevel[0.7490196078431373], Spacings -> {0, 0}, 
                    Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Source Sans Pro", FontSize -> 14, 
                    FontWeight -> Plain}], LineBreakWithin -> False, 
                    ContextMenu -> {}, NumberMarks -> False, ShowAutoStyles -> 
                    False]], TypeSystem`NestedGrid`PackagePrivate`initialQ = 
                    True}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`datasetData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`SubViewPathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = 
                    Dynamic[
                    Replace[
                    Replace[
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
                    Blank[]] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                    Blank[]], 
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                    Blank[]], 
                    Pattern[
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Blank[]]] :> (
                    Increment[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path$; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
                    TypeSystem`NestedGrid`PackagePrivate`pathType$; 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader = TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path$, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
                    Except[
                    Alternatives[
                    Blank[Spacer], ""]]] :> 
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
                    TypeSystem`NestedGrid`PackagePrivate`bar]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
                    DynamicWrapperBox[
                    DynamicBox[
                    ToBoxes[
                    Dataset`DatasetContent[
                    2, "Path" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
                    "Grid" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    "VPos" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
                    "TopBar" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
                    "BottomBar" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
                    "OutputID" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
                    StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
                    MouseAnnotation[]], 
                    Initialization :> (
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
                    CreateUUID[]), DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, 
                    UnsavedVariables :> {
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$}], 
                    Deploy, DefaultBaseStyle -> "Deploy"], 
                    Dataset`InterpretDataset[1], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], 
                    Magnification -> 0.8 Inherited, StripOnInput -> False]], 
                   Annotation[#, 
                    Magnify[
                    Dataset[{
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False]}, 
                    TypeSystem`Vector[TypeSystem`AnyType, 16], <||>], 0.8], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Probabilities: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                StyleBox[
                 TagBox[
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
                    "InitialData" -> <|
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False] -> NumberForm[
                    Rational[1, 2], 2], 
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False] -> NumberForm[
                    Rational[1, 2], 2], 
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False] -> NumberForm[0, 2], 
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False] -> NumberForm[0, 2]|>, "AllowEmbedding" -> True, 
                    "InitialShape" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 16, 
                    DirectedInfinity[1], {}], "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`AnyType, TypeSystem`AnyType, 16], 
                    "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
                    "Shape" -> TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 16, 
                    DirectedInfinity[1], {}], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`AnyType, TypeSystem`AnyType, 16], "Path" -> {},
                     "DisplayedRowCount" -> 16, "DisplayedColumnCount" -> 1, 
                    "DataRowCount" -> 16, "DataColumnCount" -> 1, 
                    "SortPaths" -> {}, "SortDirections" -> {}, 
                    "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[
                    Rational[1, 2], 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"0", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[
                    Rational[1, 2], 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "0", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    InterpretationBox[
                    StyleBox[
                    TemplateBox[{
                    
                    RowBox[{"1", "\[InvisibleSpace]", "1", 
                    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False]], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    
                    Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> 
                    False]]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}}, 
                    BaseStyle -> {
                    ContextMenu -> 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                    "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
                    Dividers -> All, FrameStyle -> 
                    GrayLevel[0.7490196078431373], Spacings -> {0, 0}, 
                    Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Source Sans Pro", FontSize -> 14, 
                    FontWeight -> Plain}], LineBreakWithin -> False, 
                    ContextMenu -> {}, NumberMarks -> False, ShowAutoStyles -> 
                    False]], TypeSystem`NestedGrid`PackagePrivate`initialQ = 
                    True}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`datasetData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`SubViewPathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = 
                    Dynamic[
                    Replace[
                    Replace[
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
                    Blank[]] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                    Blank[]], 
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                    Blank[]], 
                    Pattern[
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Blank[]]] :> (
                    Increment[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path$; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
                    TypeSystem`NestedGrid`PackagePrivate`pathType$; 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader = TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path$, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
                    Except[
                    Alternatives[
                    Blank[Spacer], ""]]] :> 
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
                    TypeSystem`NestedGrid`PackagePrivate`bar]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
                    Null}, 
                    DynamicWrapperBox[
                    DynamicBox[
                    ToBoxes[
                    Dataset`DatasetContent[
                    2, "Path" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
                    "Grid" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    "VPos" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
                    "TopBar" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
                    "BottomBar" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
                    "OutputID" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
                    StandardForm], 
                    ImageSizeCache -> {
                    133.60000000000002`, {182.20672090802512`, 
                    185.9262520594912}}, 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
                    MouseAnnotation[], 
                    ImageSizeCache -> {
                    133.60000000000002`, {182.20672090802512`, 
                    185.9262520594912}}], 
                    BaseStyle -> {LineBreakWithin -> False}, 
                    DynamicModuleValues :> {}, 
                    Initialization :> (
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
                    CreateUUID[]), 
                    UnsavedVariables :> {
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$}], 
                   Deploy, DefaultBaseStyle -> "Deploy"], 
                  Dataset`InterpretDataset[1], Editable -> False, 
                  SelectWithContents -> True, Selectable -> False], 
                 StripOnInput -> False, Magnification -> 0.8 Inherited], 
                "SummaryItem"]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  CategoricalDistribution[<|"Probabilities" -> {
      Rational[1, 2], 0, 0, 0, 0, 0, 0, 0, 0, 
      Rational[1, 2], 0, 0, 0, 0, 0, 0}, 
    "Index" -> <|
     Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> False] -> 1, 
      Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> False] -> 2, 
      Wolfram`QuantumFramework`QuditName[{0, 0, 1, 0}, "Dual" -> False] -> 3, 
      Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> False] -> 4, 
      Wolfram`QuantumFramework`QuditName[{0, 1, 0, 0}, "Dual" -> False] -> 5, 
      Wolfram`QuantumFramework`QuditName[{0, 1, 0, 1}, "Dual" -> False] -> 6, 
      Wolfram`QuantumFramework`QuditName[{0, 1, 1, 0}, "Dual" -> False] -> 7, 
      Wolfram`QuantumFramework`QuditName[{0, 1, 1, 1}, "Dual" -> False] -> 8, 
      Wolfram`QuantumFramework`QuditName[{1, 0, 0, 0}, "Dual" -> False] -> 9, 
      Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> False] -> 10,
       Wolfram`QuantumFramework`QuditName[{1, 0, 1, 0}, "Dual" -> False] -> 
      11, Wolfram`QuantumFramework`QuditName[{1, 0, 1, 1}, "Dual" -> False] -> 
      12, Wolfram`QuantumFramework`QuditName[{1, 1, 0, 0}, "Dual" -> False] -> 
      13, Wolfram`QuantumFramework`QuditName[{1, 1, 0, 1}, "Dual" -> False] -> 
      14, Wolfram`QuantumFramework`QuditName[{1, 1, 1, 0}, "Dual" -> False] -> 
      15, Wolfram`QuantumFramework`QuditName[{1, 1, 1, 1}, "Dual" -> False] -> 
      16|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.9442421197842903`*^9, {3.944242181587223*^9, 3.944242187007864*^9}},
 CellLabel->"Out[71]=",ExpressionUUID->"b6542d06-b0f4-1e43-b6a9-cf8d1961462e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mea1", "[", "\"\<Probability\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.9442419558754234`*^9, 3.9442419710598736`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"a484b42e-3605-cb4c-bbf0-41607dc3f245"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
         "0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0", 
          "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "2"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
         "1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0", 
          "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "2"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.944241966849575*^9, 3.944241971594372*^9}},
 CellLabel->"Out[68]=",ExpressionUUID->"9197ea61-4195-7547-ab86-84be3566420b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mea1", "[", "\"\<ProbabilityPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.944241798123947*^9, 3.9442418373538857`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"fa724cde-8977-c645-bffe-4ae072ad28ef"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.6859999999999999], Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6859999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 0.5},
          RoundingRadius->0],
         StatusArea[#, 
          Rational[1, 2]]& ,
         TagBoxNote->"1/2"],
        StyleBox[
         FractionBox["1", "2"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Rational[1, 2], {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6859999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 0.5},
          RoundingRadius->0],
         StatusArea[#, 
          Rational[1, 2]]& ,
         TagBoxNote->"1/2"],
        StyleBox[
         FractionBox["1", "2"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Rational[1, 2], {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.5487982520029133, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}],
          LineBox[{{2.4512017479970867`, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
            0.}]}], {{}, {}, {
           LineBox[{{1.4512017479970867`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.4512017479970867`, 
              0.}]}], LineBox[{{1.5487982520029133`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.5487982520029133`, 
              0.}]}]}, {}}}, 
        StyleBox[
         {Thickness[Tiny], InsetBox[
           RotationBox[
            InterpretationBox[
             StyleBox[
              TemplateBox[{
                RowBox[{
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm]}]},
               "Ket"],
              FontWeight->"Plain"],
             
             Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> 
              False]],
            BoxRotation->0.], Offset[{0, -2}, {1., 0.}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}], InsetBox[
           RotationBox[
            InterpretationBox[
             StyleBox[
              TemplateBox[{
                RowBox[{
                  FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["1", TraditionalForm]}]},
               "Ket"],
              FontWeight->"Plain"],
             
             Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> 
              False]],
            BoxRotation->0.], Offset[{0, -2}, {2., 0.}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.8428550619082302, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{{3.9442418183329563`*^9, 3.944241838169609*^9}},
 CellLabel->"Out[62]=",ExpressionUUID->"fc4e7602-7a62-e748-9ff7-6dd992967888"]
}, Open  ]],

Cell["\<\
You can use this probability distribution to simulate measurement results if \
desired:\
\>", "Text",
 CellChangeTimes->{{3.9442427957432632`*^9, 3.9442428185818043`*^9}, {
  3.9442429153504467`*^9, 
  3.9442429165028477`*^9}},ExpressionUUID->"809f1362-83e1-534b-9a5e-\
3ea632383362"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mea1", "[", 
   RowBox[{"\"\<SimulatedMeasurement\>\"", ",", "1000"}], "]"}], "//", 
  "Counts"}]], "Input",
 CellChangeTimes->{{3.9442428202193203`*^9, 3.94424283253607*^9}, {
  3.944242899457287*^9, 3.944242907816597*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"b63e4135-2d54-9a4a-8cf8-c934bfeba182"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
         "0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0", 
          "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 0, 0}, "Dual" -> False]], 
    "\[Rule]", "466"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
         "1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0", 
          "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 0, 1}, "Dual" -> False]], 
    "\[Rule]", "534"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.9442428281947403`*^9, 3.9442428332661266`*^9}, {
  3.944242901147003*^9, 3.944242908426344*^9}},
 CellLabel->"Out[85]=",ExpressionUUID->"6c5ef8a2-f29e-5940-8ae6-2446b522d925"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Equivalent Operators and Circuits", "Subsection",
 CellChangeTimes->{{3.944242072887499*^9, 
  3.944242076991701*^9}},ExpressionUUID->"73641f38-d6ae-9749-b8ae-\
b3cf4dabd13d"],

Cell["\<\
Given the measurement distribution in the last example, you might suspect \
that a simpler circuit could give equivalent results. This is usually the \
case when designing quantum algorithms. One of the key engineering challenges \
for practical quantum computing is creating circuits with few enough numbers \
of gates to run effectively.\
\>", "Text",
 CellChangeTimes->{{3.944242084296074*^9, 3.9442420924808483`*^9}, {
  3.9442425208000984`*^9, 3.944242602663763*^9}, {3.944242757047924*^9, 
  3.944242758486599*^9}},ExpressionUUID->"0c530d1d-366f-c440-a1cf-\
ae4eecf311ed"],

Cell["Let\[CloseCurlyQuote]s look at another example.", "Text",
 CellChangeTimes->{{3.9442427636791496`*^9, 
  3.9442427676084957`*^9}},ExpressionUUID->"782e2f56-75d6-9a48-9711-\
46ef71e1de75"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"longops", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<X\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<X\>\"", "\[Rule]", "4"}], ",", 
     RowBox[{"\"\<H\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<CNOT\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}]}], ",", 
     RowBox[{"\"\<SWAP\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}]}], ",", 
     RowBox[{"\"\<Z\>\"", "\[Rule]", "1"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"longcircuit", "=", 
   RowBox[{"QuantumCircuitOperator", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"QuantumCircuitOperator", "[", 
       RowBox[{"longops", ",", "\"\<Operations\>\""}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<M\>\"", "->", 
       RowBox[{"Range", "[", "4", "]"}]}]}], "\[IndentingNewLine]", "}"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"longcircuit", "[", "\"\<Diagram\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.944243099126951*^9, 3.9442433100247765`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"3d582180-17ce-fd43-bf26-f684b06d48c6"],

Cell[BoxData[
 GraphicsBox[{{
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{4.375, -1}, {4.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{4.375, -2}, {4.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{4.375, -3}, {4.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{4.375, -4}, {4.625, -4}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{0.375, -1}, {0.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{0.375, -2}, {0.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{0.375, -3}, {0.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{0.375, -4}, {0.625, -4}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{5.375, -1}, {5.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{5.375, -2}, {5.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{5.375, -3}, {5.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{5.375, -4}, {5.625, -4}}]}}}, {
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
     LineBox[{{0.375, -0.0234375}, {5.625, -0.0234375}}], 
     LineBox[{{0.375, 0.0234375}, {5.625, 0.0234375}}]}, InsetBox[
     StyleBox["\<\"c\"\>",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, 0}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]]}, {
    TagBox[GeometricTransformationBox[{
       {EdgeForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.8], 
        Dashing[{Tiny, Tiny}]}], FaceForm[{RGBColor[
        0.898039, 0.898039, 0.898039], Opacity[0.3]}], 
        RectangleBox[NCache[{0.53125, Rational[-1, 2]}, {0.53125, -0.5}], 
         NCache[{4.46875, Rational[-9, 2]}, {4.46875, -4.5}],
         RoundingRadius->0.1]}, {
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{1.375, -1}, {1.625, -1}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{1.375, -4}, {1.625, -4}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{2.375, -1}, {2.625, -1}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{3.375, -1}, {3.625, -1}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None]}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None]}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{0.625, -2}, {1.625, -2}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{0.625, -3}, {2.625, -3}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None]}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{2.375, -2}, {4.375, -2}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{3.375, -3}, {4.375, -3}}]}}, 
        {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
         {AbsoluteThickness[1], Opacity[0.3], 
          LineBox[{{2.375, -4}, {4.375, -4}}]}}}, {
        TagBox[
         TooltipBox[
          {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{
           RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
           RectangleBox[{0.625, -1.375}, {1.375, -0.625},
            RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
             StyleBox["\<\"X\"\>",
              StripOnInput->False,
              FontFamily->"Roboto",
              FontSize->11,
              FontColor->GrayLevel[0],
              Background->GrayLevel[0, 0]], {1., -1.}], {{{1, 0}, {0, 1}}, 
             Center}]},
          "\"X\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "X", "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{
           RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
           RectangleBox[{0.625, -4.375}, {1.375, -3.625},
            RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
             StyleBox["\<\"X\"\>",
              StripOnInput->False,
              FontFamily->"Roboto",
              FontSize->11,
              FontColor->GrayLevel[0],
              Background->GrayLevel[0, 0]], {1., -4.}], {{{1, 0}, {0, 1}}, 
             Center}]},
          "\"X\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "X", "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {EdgeForm[RGBColor[0.368417, 0.506779, 0.709798]], FaceForm[{
           RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.3]}], 
           RectangleBox[{1.625, -1.375}, {2.375, -0.625},
            RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
             StyleBox["\<\"H\"\>",
              StripOnInput->False,
              FontFamily->"Roboto",
              FontSize->11,
              FontColor->GrayLevel[0],
              Background->GrayLevel[0, 0]], {2., -1.}], {{{1, 0}, {0, 1}}, 
             Center}]},
          "\"H\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "H", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{{
            TagBox[
             TooltipBox[
              {RGBColor[0.537254, 0.537254, 0.537254], AbsoluteThickness[1], 
               Opacity[0.3], CapForm[None], 
               LineBox[{{1.625, -4.}, {1.85, -4.}}], 
               LineBox[{{2.15, -4.}, {2.375, -4.}}], 
               {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{
                RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
                DiskBox[{2., -4.}, 0.15000000000000002], 
                {RGBColor[0.880722, 0.611041, 0.142051], Opacity[1], 
                 LineBox[{{1.85, -4.}, {2.15, -4.}}], 
                 LineBox[{{2., -4.15}, {2., -3.85}}]}}},
              "\"NOT\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "NOT", "Tooltip"]& ], 
            {RGBColor[0.880722, 0.611041, 0.142051], 
             LineBox[{{2., -2.09375}, {2., -3.85}}]}}, 
           TagBox[
            TooltipBox[
             {RGBColor[0.537254, 0.537254, 0.537254], AbsoluteThickness[1], 
              Opacity[0.3], CapForm[None], 
              LineBox[{{1.625, -2.}, {1.90625, -2.}}], 
              LineBox[{{2.09375, -2.}, {2.375, -2.}}], 
              {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{
               RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
               DiskBox[{2., -2.}, 0.09375]}},
             "\"1\"",
             TooltipStyle->"TextStyling"],
            Annotation[#, "1", "Tooltip"]& ], {}},
          RowBox[{
            SubscriptBox["\"C\"", "\"NOT\""], "[", 
            RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}]],
         Annotation[#, 
          Subscript["C", "NOT"][{2}, {}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[
           None], LineBox[{{3., -1}, {3., -3}}], 
           {RGBColor[0.537254, 0.537254, 0.537254], Thickness[Medium], 
            Opacity[0.8], 
            TagBox[
             TooltipBox[
              {RGBColor[0.537254, 0.537254, 0.537254], AbsoluteThickness[1], 
               Opacity[0.3], CapForm[None], 
               LineBox[{{2.625, -1.}, {3.375, -1.}}], 
               {RGBColor[0.537254, 0.537254, 0.537254], Thickness[Medium], 
                Opacity[0.8], 
                LineBox[{{2.893933982822018, -1.1060660171779821`}, {
                 3.106066017177982, -0.8939339828220179}}], 
                LineBox[{{3.106066017177982, -1.1060660171779821`}, {
                 2.893933982822018, -0.8939339828220179}}]}},
              "\"*\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "*", "Tooltip"]& ], 
            TagBox[
             TooltipBox[
              {RGBColor[0.537254, 0.537254, 0.537254], AbsoluteThickness[1], 
               Opacity[0.3], CapForm[None], 
               LineBox[{{2.625, -3.}, {3.375, -3.}}], 
               {RGBColor[0.537254, 0.537254, 0.537254], Thickness[Medium], 
                Opacity[0.8], 
                LineBox[{{2.893933982822018, -3.106066017177982}, {
                 3.106066017177982, -2.893933982822018}}], 
                LineBox[{{3.106066017177982, -3.106066017177982}, {
                 2.893933982822018, -2.893933982822018}}]}},
              "\"*\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "*", "Tooltip"]& ]}},
          "\"SWAP\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "SWAP", "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{
           RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
           RectangleBox[{3.625, -1.375}, {4.375, -0.625},
            RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
             StyleBox["\<\"Z\"\>",
              StripOnInput->False,
              FontFamily->"Roboto",
              FontSize->11,
              FontColor->GrayLevel[0],
              Background->GrayLevel[0, 0]], {4., -1.}], {{{1, 0}, {0, 1}}, 
             Center}]},
          "\"Z\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Z", "Tooltip"]& ]}, {}, InsetBox[
        StyleBox["\<\"Operations\"\>",
         StripOnInput->False,
         FontFamily->"Times",
         Background->GrayLevel[0, 0]], 
        NCache[{Rational[5, 2], Rational[-2, 5]}, {2.5, -0.4}]]}, {0, 0}],
     EventHandlerTag[{
      "MouseClicked" :> (
        Wolfram`QuantumFramework`Draw`PackagePrivate`qc$66824 = 
        Wolfram`QuantumFramework`Draw`PackagePrivate`qc$66824["ToggleExpand", 
          Append[{}, 1]]), PassEventsDown -> True, PassEventsUp -> False, 
       Method -> "Preemptive"}]], {
     TagBox[
      TooltipBox[{{
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{4.625, -1.375}, {5.375, -0.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{5.151690686445303, -1.0772902651951612`}, {
               5.212366961023424, -1.0332063712732258`}}], 
              LineBox[{{5.116904337848513, -1.0409065970372444`}, {
               5.163666072987917, -0.9822692358521422}}], 
              LineBox[{{5.073692193435111, -1.015088542646603}, {
               5.103169070809155, -0.9461239597052442}}], 
              LineBox[{{5.0251687373408105`, -1.0016969196685124`}, {
               5.035236232277135, -0.9273756875359171}}], 
              LineBox[{{4.9748312626591895`, -1.0016969196685122`}, {
               4.964763767722865, -0.9273756875359171}}], 
              LineBox[{{4.926307806564889, -1.015088542646603}, {
               4.896830929190845, -0.9461239597052442}}], 
              LineBox[{{4.883095662151487, -1.0409065970372444`}, {
               4.836333927012083, -0.9822692358521422}}], 
              LineBox[{{4.848309313554697, -1.0772902651951612`}, {
               4.787633038976576, -1.0332063712732258`}}]}, 
             {Thickness[Medium], 
              LineBox[{{5, -1.1875}, {
                5.17024643740233, -0.8533725534293621}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{4.625, -2.375}, {5.375, -1.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{5.151690686445303, -2.0772902651951615`}, {
               5.212366961023424, -2.033206371273226}}], 
              LineBox[{{5.116904337848513, -2.040906597037244}, {
               5.163666072987917, -1.9822692358521423`}}], 
              LineBox[{{5.073692193435111, -2.0150885426466028`}, {
               5.103169070809155, -1.9461239597052442`}}], 
              LineBox[{{5.0251687373408105`, -2.001696919668512}, {
               5.035236232277135, -1.9273756875359171`}}], 
              LineBox[{{4.9748312626591895`, -2.001696919668512}, {
               4.964763767722865, -1.9273756875359171`}}], 
              LineBox[{{4.926307806564889, -2.0150885426466028`}, {
               4.896830929190845, -1.9461239597052442`}}], 
              LineBox[{{4.883095662151487, -2.040906597037244}, {
               4.836333927012083, -1.982269235852142}}], 
              LineBox[{{4.848309313554697, -2.0772902651951615`}, {
               4.787633038976576, -2.033206371273226}}]}, 
             {Thickness[Medium], 
              LineBox[{{5, -2.1875}, {
                5.17024643740233, -1.8533725534293621`}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{4.625, -3.375}, {5.375, -2.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{5.151690686445303, -3.0772902651951615`}, {
               5.212366961023424, -3.033206371273226}}], 
              LineBox[{{5.116904337848513, -3.040906597037244}, {
               5.163666072987917, -2.9822692358521423`}}], 
              LineBox[{{5.073692193435111, -3.015088542646603}, {
               5.103169070809155, -2.946123959705244}}], 
              LineBox[{{5.0251687373408105`, -3.0016969196685124`}, {
               5.035236232277135, -2.927375687535917}}], 
              LineBox[{{4.9748312626591895`, -3.0016969196685124`}, {
               4.964763767722865, -2.927375687535917}}], 
              LineBox[{{4.926307806564889, -3.015088542646603}, {
               4.896830929190845, -2.946123959705244}}], 
              LineBox[{{4.883095662151487, -3.040906597037244}, {
               4.836333927012083, -2.9822692358521423`}}], 
              LineBox[{{4.848309313554697, -3.0772902651951615`}, {
               4.787633038976576, -3.033206371273226}}]}, 
             {Thickness[Medium], 
              LineBox[{{5, -3.1875}, {
                5.17024643740233, -2.853372553429362}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{4.625, -4.375}, {5.375, -3.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{5.151690686445303, -4.0772902651951615`}, {
               5.212366961023424, -4.033206371273225}}], 
              LineBox[{{5.116904337848513, -4.040906597037244}, {
               5.163666072987917, -3.9822692358521423`}}], 
              LineBox[{{5.073692193435111, -4.015088542646604}, {
               5.103169070809155, -3.946123959705244}}], 
              LineBox[{{5.0251687373408105`, -4.001696919668513}, {
               5.035236232277135, -3.927375687535917}}], 
              LineBox[{{4.9748312626591895`, -4.001696919668513}, {
               4.964763767722865, -3.927375687535917}}], 
              LineBox[{{4.926307806564889, -4.015088542646604}, {
               4.896830929190845, -3.946123959705244}}], 
              LineBox[{{4.883095662151487, -4.040906597037244}, {
               4.836333927012083, -3.9822692358521423`}}], 
              LineBox[{{4.848309313554697, -4.0772902651951615`}, {
               4.787633038976576, -4.033206371273225}}]}, 
             {Thickness[Medium], 
              LineBox[{{5, -4.1875}, {
                5.17024643740233, -3.853372553429362}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ]}, 
        {Dashing[{Small, Small}], 
         {RGBColor[0.7367, 0.358, 0.503], 
          LineBox[{{5., -1.375}, {5., -1.625}}]}, 
         {RGBColor[0.7367, 0.358, 0.503], 
          LineBox[{{5., -2.375}, {5., -2.625}}]}, 
         {RGBColor[0.7367, 0.358, 0.503], 
          LineBox[{{5., -3.375}, {5., -3.625}}]}}},
       TemplateBox[{
         RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}], 
         RowBox[{"\[CircleTimes]", "4"}]}, "Superscript", SyntaxForm -> 
        SuperscriptBox]],
      Annotation[#, 
       Superscript[
        "Measurement"["I"], 
        CircleTimes[4]], "Tooltip"]& ], 
     {RGBColor[0.537254, 0.537254, 0.537254], 
      LineBox[{{5., -0.625}, {5., -0.2109375}}], 
      {EdgeForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3]}], 
       FaceForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.8]}], 
       PolygonBox[{{4.90625, -0.2109375}, {5.09375, -0.2109375}, {
        5., -0.0234375}}]}}}}, {InsetBox[
     StyleBox["1",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -1}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["2",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -2}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["3",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -3}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["4",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -4}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]]}},
  ImageSize->Medium]], "Output",
 CellChangeTimes->{
  3.944243134556673*^9, 3.944243167924282*^9, 3.944243200090788*^9, 
   3.9442432303834534`*^9, {3.944243280720646*^9, 3.9442433138840294`*^9}},
 CellLabel->
  "Out[104]=",ExpressionUUID->"7e0ddc56-3b5f-9740-9e02-e174ee3cac77"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["circuit depth",
  FontWeight->"Bold"],
 " is the maximum number of operations performed on any qubit."
}], "Text",
 CellChangeTimes->{{3.944243793342285*^9, 
  3.9442438082473507`*^9}},ExpressionUUID->"ee8fa151-a194-e242-9c5a-\
f065b294294e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"longcircuit", "[", "\"\<Flatten\>\"", "]"}], "[", "\"\<Depth\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.9442437174025784`*^9, 3.944243761017172*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"01152b56-380f-ce48-a21d-4c78b4429fd1"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{{3.944243724829132*^9, 3.944243761352892*^9}},
 CellLabel->
  "Out[117]=",ExpressionUUID->"403246f1-4947-5b4c-ace3-92931e2f4cc7"]
}, Open  ]],

Cell["\<\
In this circuit, is it possible to come up with a different set of operations \
that lead to the same measurement results?\
\>", "Text",
 CellChangeTimes->{{3.9442433226710796`*^9, 
  3.9442433541837883`*^9}},ExpressionUUID->"d9416d0b-5241-7843-b072-\
651a67ba0ddd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"longcircuit", "[", "]"}], "[", "\"\<ProbabilityPlot\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.944243370776556*^9, 3.944243379743059*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"a94f76e9-780a-1240-bcb7-76df2042e414"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.6859999999999999], Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6859999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 0.5},
          RoundingRadius->0],
         StatusArea[#, 
          Rational[1, 2]]& ,
         TagBoxNote->"1/2"],
        StyleBox[
         FractionBox["1", "2"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Rational[1, 2], {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6859999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 0.5},
          RoundingRadius->0],
         StatusArea[#, 
          Rational[1, 2]]& ,
         TagBoxNote->"1/2"],
        StyleBox[
         FractionBox["1", "2"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Rational[1, 2], {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.5487982520029133, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}],
          LineBox[{{2.4512017479970867`, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
            0.}]}], {{}, {}, {
           LineBox[{{1.4512017479970867`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.4512017479970867`, 
              0.}]}], LineBox[{{1.5487982520029133`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.5487982520029133`, 
              0.}]}]}, {}}}, 
        StyleBox[
         {Thickness[Tiny], InsetBox[
           RotationBox[
            InterpretationBox[
             StyleBox[
              TemplateBox[{
                RowBox[{
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["1", TraditionalForm]}]},
               "Ket"],
              FontWeight->"Plain"],
             
             Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
              False]],
            BoxRotation->0.], Offset[{0, -2}, {1., 0.}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}], InsetBox[
           RotationBox[
            InterpretationBox[
             StyleBox[
              TemplateBox[{
                RowBox[{
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["1", TraditionalForm]}]},
               "Ket"],
              FontWeight->"Plain"],
             
             Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
              False]],
            BoxRotation->0.], Offset[{0, -2}, {2., 0.}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.8428550619082302, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{3.9442433813432045`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"4338b4fe-2b53-3b4b-ac93-bc24833486c6"]
}, Open  ]],

Cell["\<\
The simplicity of the measurement distribution certainly suggests this is the \
case. Consider the following circuit:\
\>", "Text",
 CellChangeTimes->{{3.9442433857109585`*^9, 3.9442434113363495`*^9}, {
  3.944244455688833*^9, 
  3.9442444739530697`*^9}},ExpressionUUID->"593bcef1-8cdd-6142-8841-\
af3b0ddd963e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"shortops", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<H\>\"", "->", "3"}], ",", 
     RowBox[{"\"\<Z\>\"", "->", "3"}], ",", 
     RowBox[{"\"\<X\>\"", "->", "4"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"shortcircuit", "=", 
   RowBox[{"QuantumCircuitOperator", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Splice", "@", "shortops"}], ",", 
      RowBox[{"\"\<M\>\"", "->", 
       RowBox[{"Range", "[", "4", "]"}]}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"shortcircuit", "[", "\"\<Diagram\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.9442443282249126`*^9, 3.94424444731394*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"b6031aca-727d-2542-a474-c4643df83cd7"],

Cell[BoxData[
 GraphicsBox[{{
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{1.375, -3}, {1.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{2.375, -3}, {2.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{1.375, -4}, {2.625, -4}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{0.375, -3}, {0.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{0.375, -4}, {0.625, -4}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{0.375, -1}, {2.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{0.375, -2}, {2.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{3.375, -1}, {3.625, -1}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{3.375, -2}, {3.625, -2}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{3.375, -3}, {3.625, -3}}]}}, 
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], CapForm[None], 
     {AbsoluteThickness[1], Opacity[0.3], 
      LineBox[{{3.375, -4}, {3.625, -4}}]}}}, {
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
     LineBox[{{0.375, -0.0234375}, {3.625, -0.0234375}}], 
     LineBox[{{0.375, 0.0234375}, {3.625, 0.0234375}}]}, InsetBox[
     StyleBox["\<\"c\"\>",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, 0}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]]}, {
    TagBox[
     TooltipBox[
      {EdgeForm[RGBColor[0.368417, 0.506779, 0.709798]], FaceForm[{RGBColor[
       0.368417, 0.506779, 0.709798], Opacity[0.3]}], 
       RectangleBox[{0.625, -3.375}, {1.375, -2.625},
        RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
         StyleBox["\<\"H\"\>",
          StripOnInput->False,
          FontFamily->"Roboto",
          FontSize->11,
          FontColor->GrayLevel[0],
          Background->GrayLevel[0, 0]], {1., -3.}], {{{1, 0}, {0, 1}}, 
         Center}]},
      "\"H\"",
      TooltipStyle->"TextStyling"],
     Annotation[#, "H", "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
       0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
       RectangleBox[{1.625, -3.375}, {2.375, -2.625},
        RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
         StyleBox["\<\"Z\"\>",
          StripOnInput->False,
          FontFamily->"Roboto",
          FontSize->11,
          FontColor->GrayLevel[0],
          Background->GrayLevel[0, 0]], {2., -3.}], {{{1, 0}, {0, 1}}, 
         Center}]},
      "\"Z\"",
      TooltipStyle->"TextStyling"],
     Annotation[#, "Z", "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
       0.880722, 0.611041, 0.142051], Opacity[0.3]}], 
       RectangleBox[{0.625, -4.375}, {1.375, -3.625},
        RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
         StyleBox["\<\"X\"\>",
          StripOnInput->False,
          FontFamily->"Roboto",
          FontSize->11,
          FontColor->GrayLevel[0],
          Background->GrayLevel[0, 0]], {1., -4.}], {{{1, 0}, {0, 1}}, 
         Center}]},
      "\"X\"",
      TooltipStyle->"TextStyling"],
     Annotation[#, "X", "Tooltip"]& ], {
     TagBox[
      TooltipBox[{{
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{2.625, -1.375}, {3.375, -0.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{3.1516906864453027`, -1.0772902651951612`}, {
               3.212366961023424, -1.0332063712732258`}}], 
              LineBox[{{3.1169043378485126`, -1.0409065970372444`}, {
               3.1636660729879176`, -0.9822692358521422}}], 
              LineBox[{{3.073692193435111, -1.015088542646603}, {
               3.103169070809155, -0.9461239597052442}}], 
              LineBox[{{3.0251687373408105`, -1.0016969196685124`}, {
               3.0352362322771347`, -0.9273756875359171}}], 
              LineBox[{{2.9748312626591895`, -1.0016969196685122`}, {
               2.9647637677228653`, -0.9273756875359171}}], 
              LineBox[{{2.9263078065648895`, -1.015088542646603}, {
               2.896830929190845, -0.9461239597052442}}], 
              LineBox[{{2.8830956621514874`, -1.0409065970372444`}, {
               2.8363339270120824`, -0.9822692358521422}}], 
              LineBox[{{2.8483093135546973`, -1.0772902651951612`}, {
               2.787633038976576, -1.0332063712732258`}}]}, 
             {Thickness[Medium], 
              LineBox[{{3, -1.1875}, {
                3.17024643740233, -0.8533725534293621}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{2.625, -2.375}, {3.375, -1.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{3.1516906864453027`, -2.0772902651951615`}, {
               3.212366961023424, -2.033206371273226}}], 
              LineBox[{{3.1169043378485126`, -2.040906597037244}, {
               3.1636660729879176`, -1.9822692358521423`}}], 
              LineBox[{{3.073692193435111, -2.0150885426466028`}, {
               3.103169070809155, -1.9461239597052442`}}], 
              LineBox[{{3.0251687373408105`, -2.001696919668512}, {
               3.0352362322771347`, -1.9273756875359171`}}], 
              LineBox[{{2.9748312626591895`, -2.001696919668512}, {
               2.9647637677228653`, -1.9273756875359171`}}], 
              LineBox[{{2.9263078065648895`, -2.0150885426466028`}, {
               2.896830929190845, -1.9461239597052442`}}], 
              LineBox[{{2.8830956621514874`, -2.040906597037244}, {
               2.8363339270120824`, -1.982269235852142}}], 
              LineBox[{{2.8483093135546973`, -2.0772902651951615`}, {
               2.787633038976576, -2.033206371273226}}]}, 
             {Thickness[Medium], 
              LineBox[{{3, -2.1875}, {
                3.17024643740233, -1.8533725534293621`}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{2.625, -3.375}, {3.375, -2.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{3.1516906864453027`, -3.0772902651951615`}, {
               3.212366961023424, -3.033206371273226}}], 
              LineBox[{{3.1169043378485126`, -3.040906597037244}, {
               3.1636660729879176`, -2.9822692358521423`}}], 
              LineBox[{{3.073692193435111, -3.015088542646603}, {
               3.103169070809155, -2.946123959705244}}], 
              LineBox[{{3.0251687373408105`, -3.0016969196685124`}, {
               3.0352362322771347`, -2.927375687535917}}], 
              LineBox[{{2.9748312626591895`, -3.0016969196685124`}, {
               2.9647637677228653`, -2.927375687535917}}], 
              LineBox[{{2.9263078065648895`, -3.015088542646603}, {
               2.896830929190845, -2.946123959705244}}], 
              LineBox[{{2.8830956621514874`, -3.040906597037244}, {
               2.8363339270120824`, -2.9822692358521423`}}], 
              LineBox[{{2.8483093135546973`, -3.0772902651951615`}, {
               2.787633038976576, -3.033206371273226}}]}, 
             {Thickness[Medium], 
              LineBox[{{3, -3.1875}, {
                3.17024643740233, -2.853372553429362}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            TagBox[
             TooltipBox[
              {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
               0.7367, 0.358, 0.503], Opacity[0.3]}], 
               RectangleBox[{2.625, -4.375}, {3.375, -3.625},
                RoundingRadius->0.1]},
              "\"Measurement\"",
              TooltipStyle->"TextStyling"],
             Annotation[#, "Measurement", "Tooltip"]& ], {
             {Thickness[Small], 
              LineBox[{{3.1516906864453027`, -4.0772902651951615`}, {
               3.212366961023424, -4.033206371273225}}], 
              LineBox[{{3.1169043378485126`, -4.040906597037244}, {
               3.1636660729879176`, -3.9822692358521423`}}], 
              LineBox[{{3.073692193435111, -4.015088542646604}, {
               3.103169070809155, -3.946123959705244}}], 
              LineBox[{{3.0251687373408105`, -4.001696919668513}, {
               3.0352362322771347`, -3.927375687535917}}], 
              LineBox[{{2.9748312626591895`, -4.001696919668513}, {
               2.9647637677228653`, -3.927375687535917}}], 
              LineBox[{{2.9263078065648895`, -4.015088542646604}, {
               2.896830929190845, -3.946123959705244}}], 
              LineBox[{{2.8830956621514874`, -4.040906597037244}, {
               2.8363339270120824`, -3.9822692358521423`}}], 
              LineBox[{{2.8483093135546973`, -4.0772902651951615`}, {
               2.787633038976576, -4.033206371273225}}]}, 
             {Thickness[Medium], 
              LineBox[{{3, -4.1875}, {
                3.17024643740233, -3.853372553429362}}]}}, 
            {Dashing[{Small, Small}]}},
           RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}]],
          Annotation[#, 
           "Measurement"["I"], "Tooltip"]& ]}, 
        {Dashing[{Small, Small}], 
         {RGBColor[0.7367, 0.358, 0.503], 
          LineBox[{{3., -1.375}, {3., -1.625}}]}, 
         {RGBColor[0.7367, 0.358, 0.503], 
          LineBox[{{3., -2.375}, {3., -2.625}}]}, 
         {RGBColor[0.7367, 0.358, 0.503], 
          LineBox[{{3., -3.375}, {3., -3.625}}]}}},
       TemplateBox[{
         RowBox[{"\"Measurement\"", "[", "\"I\"", "]"}], 
         RowBox[{"\[CircleTimes]", "4"}]}, "Superscript", SyntaxForm -> 
        SuperscriptBox]],
      Annotation[#, 
       Superscript[
        "Measurement"["I"], 
        CircleTimes[4]], "Tooltip"]& ], 
     {RGBColor[0.537254, 0.537254, 0.537254], 
      LineBox[{{3., -0.625}, {3., -0.2109375}}], 
      {EdgeForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3]}], 
       FaceForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.8]}], 
       PolygonBox[{{2.90625, -0.2109375}, {3.09375, -0.2109375}, {
        3., -0.0234375}}]}}}}, {InsetBox[
     StyleBox["1",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -1}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["2",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -2}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["3",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -3}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["4",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -4}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]]}},
  ImageSize->Medium]], "Output",
 CellChangeTimes->{{3.9442444002237015`*^9, 3.9442444487334633`*^9}},
 CellLabel->
  "Out[134]=",ExpressionUUID->"47c2f40b-7d1a-1447-a80b-17511ee2a3df"]
}, Open  ]],

Cell["\<\
The circuit depth is shorter and the measurement distribution is identical:\
\>", "Text",
 CellChangeTimes->{{3.9442444783785095`*^9, 
  3.944244492224249*^9}},ExpressionUUID->"a59c1878-dc0c-0b46-9ff7-\
d450e9c69da4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"shortcircuit", "[", "\"\<Depth\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.9442444956047173`*^9, 3.944244500617216*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"bc012bce-26e2-e443-8e75-6acfc9099af7"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.944244501154833*^9},
 CellLabel->
  "Out[135]=",ExpressionUUID->"3ccc30ae-9484-eb4b-b475-69a042369b09"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"shortcircuit", "[", "]"}], "[", "\"\<ProbabilityPlot\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.9442445071958046`*^9, 3.944244513625124*^9}},
 CellLabel->
  "In[136]:=",ExpressionUUID->"1ee2da96-0ab4-f540-899e-fed84d229fce"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.6859999999999999], Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6859999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 0.5},
          RoundingRadius->0],
         StatusArea[#, 
          Rational[1, 2]]& ,
         TagBoxNote->"1/2"],
        StyleBox[
         FractionBox["1", "2"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Rational[1, 2], {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6859999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 0.5},
          RoundingRadius->0],
         StatusArea[#, 
          Rational[1, 2]]& ,
         TagBoxNote->"1/2"],
        StyleBox[
         FractionBox["1", "2"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Rational[1, 2], {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.5487982520029133, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}],
          LineBox[{{2.4512017479970867`, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
            0.}]}], {{}, {}, {
           LineBox[{{1.4512017479970867`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.4512017479970867`, 
              0.}]}], LineBox[{{1.5487982520029133`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.5487982520029133`, 
              0.}]}]}, {}}}, 
        StyleBox[
         {Thickness[Tiny], InsetBox[
           RotationBox[
            InterpretationBox[
             StyleBox[
              TemplateBox[{
                RowBox[{
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["1", TraditionalForm]}]},
               "Ket"],
              FontWeight->"Plain"],
             
             Wolfram`QuantumFramework`QuditName[{0, 0, 0, 1}, "Dual" -> 
              False]],
            BoxRotation->0.], Offset[{0, -2}, {1., 0.}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}], InsetBox[
           RotationBox[
            InterpretationBox[
             StyleBox[
              TemplateBox[{
                RowBox[{
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
                  FormBox["1", TraditionalForm]}]},
               "Ket"],
              FontWeight->"Plain"],
             
             Wolfram`QuantumFramework`QuditName[{0, 0, 1, 1}, "Dual" -> 
              False]],
            BoxRotation->0.], Offset[{0, -2}, {2., 0.}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.8428550619082302, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{3.9442445144679165`*^9},
 CellLabel->
  "Out[136]=",ExpressionUUID->"75276872-a234-fc4a-be57-3778501ae258"]
}, Open  ]],

Cell["\<\
You can even verify that the quantum state after the long sequence of \
operations is the same as the quantum state after the short sequence of \
operations:\
\>", "Text",
 CellChangeTimes->{{3.944244578969639*^9, 
  3.9442446067451363`*^9}},ExpressionUUID->"e7db0b8f-4bf7-934f-b14b-\
f528deca4221"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"QuantumCircuitOperator", "[", "longops", "]"}], "[", "]"}], "==", 
  RowBox[{
   RowBox[{"QuantumCircuitOperator", "[", "shortops", "]"}], "[", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.9442445449718456`*^9, 3.944244566289036*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"b5c6e769-4526-fe4a-a385-403416c5813a"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.9442445620769653`*^9, 3.944244567383997*^9}},
 CellLabel->
  "Out[138]=",ExpressionUUID->"8df9a180-85a0-724d-874b-305e7296e6c0"]
}, Open  ]],

Cell["\<\
Note that the states being equivalent before measurement is an even stronger \
requirement than just having identical measurement distributions.\
\>", "Text",
 CellChangeTimes->{{3.944244664225321*^9, 
  3.9442447074247417`*^9}},ExpressionUUID->"d381e617-fd2c-5f4f-a859-\
166b3262ca1b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pauli Operators", "Subsection",
 CellChangeTimes->{{3.9442451048009415`*^9, 
  3.944245107049162*^9}},ExpressionUUID->"1834b8b2-6b3f-2246-b91d-\
17b17f2acbaf"],

Cell[TextData[{
 "You might have noticed that an X gate seems to act a lot like a NOT gate. \
That\[CloseCurlyQuote]s because they have identical effects on qubits. An X \
gate ",
 StyleBox["is",
  FontSlant->"Italic"],
 " a NOT gate."
}], "Text",
 CellChangeTimes->{{3.9442451145765133`*^9, 3.9442451570255547`*^9}, {
  3.9442452141290665`*^9, 
  3.9442452518722744`*^9}},ExpressionUUID->"3c848812-abb7-5a48-8b0f-\
83651be0a115"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"QuantumOperator", "[", "\"\<X\>\"", "]"}], "==", 
  RowBox[{"QuantumOperator", "[", "\"\<NOT\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.944245160024719*^9, 3.9442451896040688`*^9}, {
  3.944245259723196*^9, 3.944245264953554*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"d7456596-add1-b444-9886-2ea22f90c7a2"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.944245169821495*^9, 3.944245190052614*^9}, 
   3.9442452653302345`*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"74509634-e4d8-2740-ad9a-d64b5d70876f"]
}, Open  ]],

Cell["Recall the Bloch sphere representation of a qubit:", "Text",
 CellChangeTimes->{{3.9442452828961544`*^9, 
  3.944245292537163*^9}},ExpressionUUID->"c06720c8-ea1c-6c40-9ae8-\
8da5345eaddd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsGrid", "@", 
  RowBox[{"Apply", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"QuantumState", "[", "#2", "]"}], "[", 
      RowBox[{"\"\<BlochPlot\>\"", ",", 
       RowBox[{"PlotLabel", "->", 
        RowBox[{"Highlighted", "[", 
         RowBox[{
          RowBox[{"QuantumState", "[", 
           RowBox[{
            RowBox[{"QuantumState", "[", "#2", "]"}], ",", "#1"}], "]"}], ",", 
          RowBox[{"Background", "->", "LightOrange"}]}], "]"}]}]}], "]"}], 
     "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<Z\>\"", ",", "\"\<Up\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Z\>\"", ",", "\"\<Down\>\""}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<X\>\"", ",", "\"\<+\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<X\>\"", ",", "\"\<-\>\""}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<Y\>\"", ",", "\"\<R\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Y\>\"", ",", "\"\<L\>\""}], "}"}]}], "}"}]}], "}"}], 
    ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.944245798604809*^9, 3.944245843642439*^9}, {
   3.94424588619981*^9, 3.9442460527945633`*^9}, {3.9442461204833546`*^9, 
   3.944246138476721*^9}, 3.9442461772043667`*^9, {3.9442465473617954`*^9, 
   3.9442465706755257`*^9}, {3.944246749363699*^9, 3.944246758819067*^9}, {
   3.9446613314015617`*^9, 3.944661370945549*^9}},
 CellLabel->
  "In[233]:=",ExpressionUUID->"ab075f60-1e52-f74c-870f-1af608e42d24"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      Graphics3DBox[{{{{}, {}, 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
/+93dv6TPv/7nb3gP/8/6l7Cig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767411#1"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
cNzz//+z5/0P5bTCig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767411#2"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
             "]]},
           Annotation[#, "Charting`Private`Tag$767411#3"]& ]}, {}}, {
         {Opacity[0.4], SphereBox[{0, 0, 0}]}, 
         {GrayLevel[0], Thickness[0.005], Opacity[1.], 
          Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
          Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
          Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], Text3DBox[
           TemplateBox[{"0"},
            "Ket"], {0, 0, 1.3}], Text3DBox[
           TemplateBox[{"1"},
            "Ket"], {0, 0, -1.3}], Text3DBox[
           TemplateBox[{"\"R\""},
            "Ket"], {0, 1.3, 0}], Text3DBox[
           TemplateBox[{"\"L\""},
            "Ket"], {0, -1.3, 0}], Text3DBox[
           TemplateBox[{"\"+\""},
            "Ket"], {1.3, 0, 0}], Text3DBox[
           TemplateBox[{"\"-\""},
            "Ket"], {-1.3, 0, 0}], 
          {RGBColor[1, 0, 0], Arrowheads[0.05], 
           Arrow3DBox[TubeBox[{{0, 0, 0}, {0, 0, 1}}, 0.03], {0, -0.01}]}}}},
       Axes->False,
       Boxed->False,
       DisplayFunction->Identity,
       FaceGridsStyle->Automatic,
       ImagePadding->Automatic,
       Method->{
        "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}},
       PlotLabel->FormBox[
         FrameBox[
          InterpretationBox[
           TooltipBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 FormBox[
                  InterpretationBox[
                   StyleBox[
                    TemplateBox[{
                    RowBox[{
                    FormBox[
                    SubscriptBox["\"\[ScriptZ]\"", 
                    InterpretationBox["\"+\"", 1]], TraditionalForm]}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptZ]", 
                    Interpretation["+", 1]], "Dual" -> False]], 
                  TraditionalForm]}]}], "ShowStringCharacters" -> False], 
            TagBox[
             GridBox[{{"\"Z\""}, {
                TemplateBox[{"\"QuantumState: \"", 
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Center}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]], 
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1|>], "Output" -> 
              Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptZ]", 
                    Interpretation["+", 1]], "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptZ]", 
                    Interpretation["\[Minus]", -1]], "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Picture" -> "Schrodinger", "Label" -> "Z", 
              "ParameterSpec" -> {}|>]]], DefaultBaseStyle -> 
          "HighlightedInput", StripOnInput -> False, FrameStyle -> None, 
          Background -> RGBColor[1, 0.9, 0.8]], TraditionalForm],
       PlotRange->All,
       PlotRangePadding->{{
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic, Automatic},
       ViewPoint->{1, 1, 1}], {192., -210.59558452006934}, 
      ImageScaled[{0.5, 0.5}], {360., 391.8057386419895},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}},
      ContentSelectable->True], InsetBox[
      Graphics3DBox[{{{{}, {}, 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
/+93dv6TPv/7nb3gP/8/6l7Cig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767516#1"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
cNzz//+z5/0P5bTCig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767516#2"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
             "]]},
           Annotation[#, "Charting`Private`Tag$767516#3"]& ]}, {}}, {
         {Opacity[0.4], SphereBox[{0, 0, 0}]}, 
         {GrayLevel[0], Thickness[0.005], Opacity[1.], 
          Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
          Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
          Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], Text3DBox[
           TemplateBox[{"0"},
            "Ket"], {0, 0, 1.3}], Text3DBox[
           TemplateBox[{"1"},
            "Ket"], {0, 0, -1.3}], Text3DBox[
           TemplateBox[{"\"R\""},
            "Ket"], {0, 1.3, 0}], Text3DBox[
           TemplateBox[{"\"L\""},
            "Ket"], {0, -1.3, 0}], Text3DBox[
           TemplateBox[{"\"+\""},
            "Ket"], {1.3, 0, 0}], Text3DBox[
           TemplateBox[{"\"-\""},
            "Ket"], {-1.3, 0, 0}], 
          {RGBColor[1, 0, 0], Arrowheads[0.05], 
           Arrow3DBox[TubeBox[{{0, 0, 0}, {0, 0, -1}}, 0.03], {0, -0.01}]}}}},
       Axes->False,
       Boxed->False,
       DisplayFunction->Identity,
       FaceGridsStyle->Automatic,
       ImagePadding->Automatic,
       Method->{
        "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}},
       PlotLabel->FormBox[
         FrameBox[
          InterpretationBox[
           TooltipBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 FormBox[
                  InterpretationBox[
                   StyleBox[
                    TemplateBox[{
                    RowBox[{
                    FormBox[
                    SubscriptBox["\"\[ScriptZ]\"", 
                    InterpretationBox["\"\[Minus]\"", -1]], 
                    TraditionalForm]}]}, "Ket"], FontWeight -> "Plain"], 
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptZ]", 
                    Interpretation["\[Minus]", -1]], "Dual" -> False]], 
                  TraditionalForm]}]}], "ShowStringCharacters" -> False], 
            TagBox[
             GridBox[{{"\"Z\""}, {
                TemplateBox[{"\"QuantumState: \"", 
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Center}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]], 
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1|>], "Output" -> 
              Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptZ]", 
                    Interpretation["+", 1]], "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptZ]", 
                    Interpretation["\[Minus]", -1]], "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Picture" -> "Schrodinger", "Label" -> "Z", 
              "ParameterSpec" -> {}|>]]], DefaultBaseStyle -> 
          "HighlightedInput", StripOnInput -> False, FrameStyle -> None, 
          Background -> RGBColor[1, 0.9, 0.8]], TraditionalForm],
       PlotRange->All,
       PlotRangePadding->{{
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic, Automatic},
       ViewPoint->{1, 1, 1}], {576., -210.59558452006934}, 
      ImageScaled[{0.5, 0.5}], {360., 391.8057386419895},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}},
      ContentSelectable->True]}, {InsetBox[
      Graphics3DBox[{{{{}, {}, 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
/+93dv6TPv/7nb3gP/8/6l7Cig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767593#1"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
cNzz//+z5/0P5bTCig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767593#2"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
             "]]},
           Annotation[#, "Charting`Private`Tag$767593#3"]& ]}, {}}, {
         {Opacity[0.4], SphereBox[{0, 0, 0}]}, 
         {GrayLevel[0], Thickness[0.005], Opacity[1.], 
          Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
          Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
          Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], Text3DBox[
           TemplateBox[{"0"},
            "Ket"], {0, 0, 1.3}], Text3DBox[
           TemplateBox[{"1"},
            "Ket"], {0, 0, -1.3}], Text3DBox[
           TemplateBox[{"\"R\""},
            "Ket"], {0, 1.3, 0}], Text3DBox[
           TemplateBox[{"\"L\""},
            "Ket"], {0, -1.3, 0}], Text3DBox[
           TemplateBox[{"\"+\""},
            "Ket"], {1.3, 0, 0}], Text3DBox[
           TemplateBox[{"\"-\""},
            "Ket"], {-1.3, 0, 0}], 
          {RGBColor[1, 0, 0], Arrowheads[0.05], 
           Arrow3DBox[TubeBox[{{0, 0, 0}, {1, 0, 0}}, 0.03], {0, -0.01}]}}}},
       Axes->False,
       Boxed->False,
       DisplayFunction->Identity,
       FaceGridsStyle->Automatic,
       ImagePadding->Automatic,
       Method->{
        "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}},
       PlotLabel->FormBox[
         FrameBox[
          InterpretationBox[
           TooltipBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 FormBox[
                  InterpretationBox[
                   StyleBox[
                    TemplateBox[{
                    RowBox[{
                    FormBox[
                    SubscriptBox["\"\[ScriptX]\"", 
                    InterpretationBox["\"+\"", 1]], TraditionalForm]}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptX]", 
                    Interpretation["+", 1]], "Dual" -> False]], 
                  TraditionalForm]}]}], "ShowStringCharacters" -> False], 
            TagBox[
             GridBox[{{"\"X\""}, {
                TemplateBox[{"\"QuantumState: \"", 
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Center}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]], 
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1|>], "Output" -> 
              Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptX]", 
                    Interpretation["+", 1]], "Dual" -> False], 1} -> 
                 SparseArray[
                  Automatic, {2}, 0, {
                   1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptX]", 
                    Interpretation["\[Minus]", -1]], "Dual" -> False], 1} -> 
                 SparseArray[
                  Automatic, {2}, 0, {
                   1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], -2^Rational[-1, 2]}}]|>], "Picture" -> 
              "Schrodinger", "Label" -> "X", "ParameterSpec" -> {}|>]]], 
          DefaultBaseStyle -> "HighlightedInput", StripOnInput -> False, 
          FrameStyle -> None, Background -> RGBColor[1, 0.9, 0.8]], 
         TraditionalForm],
       PlotRange->All,
       PlotRangePadding->{{
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic, Automatic},
       ViewPoint->{1, 1, 1}], {192., -631.786753560208}, 
      ImageScaled[{0.5, 0.5}], {360., 391.8057386419895},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}},
      ContentSelectable->True], InsetBox[
      Graphics3DBox[{{{{}, {}, 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
/+93dv6TPv/7nb3gP/8/6l7Cig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767670#1"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
cNzz//+z5/0P5bTCig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767670#2"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
             "]]},
           Annotation[#, "Charting`Private`Tag$767670#3"]& ]}, {}}, {
         {Opacity[0.4], SphereBox[{0, 0, 0}]}, 
         {GrayLevel[0], Thickness[0.005], Opacity[1.], 
          Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
          Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
          Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], Text3DBox[
           TemplateBox[{"0"},
            "Ket"], {0, 0, 1.3}], Text3DBox[
           TemplateBox[{"1"},
            "Ket"], {0, 0, -1.3}], Text3DBox[
           TemplateBox[{"\"R\""},
            "Ket"], {0, 1.3, 0}], Text3DBox[
           TemplateBox[{"\"L\""},
            "Ket"], {0, -1.3, 0}], Text3DBox[
           TemplateBox[{"\"+\""},
            "Ket"], {1.3, 0, 0}], Text3DBox[
           TemplateBox[{"\"-\""},
            "Ket"], {-1.3, 0, 0}], 
          {RGBColor[1, 0, 0], Arrowheads[0.05], 
           Arrow3DBox[TubeBox[{{0, 0, 0}, {-1, 0, 0}}, 0.03], {0, -0.01}]}}}},
       Axes->False,
       Boxed->False,
       DisplayFunction->Identity,
       FaceGridsStyle->Automatic,
       ImagePadding->Automatic,
       Method->{
        "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}},
       PlotLabel->FormBox[
         FrameBox[
          InterpretationBox[
           TooltipBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 FormBox[
                  InterpretationBox[
                   StyleBox[
                    TemplateBox[{
                    RowBox[{
                    FormBox[
                    SubscriptBox["\"\[ScriptX]\"", 
                    InterpretationBox["\"\[Minus]\"", -1]], 
                    TraditionalForm]}]}, "Ket"], FontWeight -> "Plain"], 
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptX]", 
                    Interpretation["\[Minus]", -1]], "Dual" -> False]], 
                  TraditionalForm]}]}], "ShowStringCharacters" -> False], 
            TagBox[
             GridBox[{{"\"X\""}, {
                TemplateBox[{"\"QuantumState: \"", 
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Center}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]], 
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1|>], "Output" -> 
              Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptX]", 
                    Interpretation["+", 1]], "Dual" -> False], 1} -> 
                 SparseArray[
                  Automatic, {2}, 0, {
                   1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptX]", 
                    Interpretation["\[Minus]", -1]], "Dual" -> False], 1} -> 
                 SparseArray[
                  Automatic, {2}, 0, {
                   1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], -2^Rational[-1, 2]}}]|>], "Picture" -> 
              "Schrodinger", "Label" -> "X", "ParameterSpec" -> {}|>]]], 
          DefaultBaseStyle -> "HighlightedInput", StripOnInput -> False, 
          FrameStyle -> None, Background -> RGBColor[1, 0.9, 0.8]], 
         TraditionalForm],
       PlotRange->All,
       PlotRangePadding->{{
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic, Automatic},
       ViewPoint->{1, 1, 1}], {576., -631.786753560208}, 
      ImageScaled[{0.5, 0.5}], {360., 391.8057386419895},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}},
      ContentSelectable->True]}, {InsetBox[
      Graphics3DBox[{{{{}, {}, 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
/+93dv6TPv/7nb3gP/8/6l7Cig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767747#1"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
cNzz//+z5/0P5bTCig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767747#2"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
             "]]},
           Annotation[#, "Charting`Private`Tag$767747#3"]& ]}, {}}, {
         {Opacity[0.4], SphereBox[{0, 0, 0}]}, 
         {GrayLevel[0], Thickness[0.005], Opacity[1.], 
          Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
          Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
          Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], Text3DBox[
           TemplateBox[{"0"},
            "Ket"], {0, 0, 1.3}], Text3DBox[
           TemplateBox[{"1"},
            "Ket"], {0, 0, -1.3}], Text3DBox[
           TemplateBox[{"\"R\""},
            "Ket"], {0, 1.3, 0}], Text3DBox[
           TemplateBox[{"\"L\""},
            "Ket"], {0, -1.3, 0}], Text3DBox[
           TemplateBox[{"\"+\""},
            "Ket"], {1.3, 0, 0}], Text3DBox[
           TemplateBox[{"\"-\""},
            "Ket"], {-1.3, 0, 0}], 
          {RGBColor[1, 0, 0], Arrowheads[0.05], 
           Arrow3DBox[TubeBox[{{0, 0, 0}, {0, 1, 0}}, 0.03], {0, -0.01}]}}}},
       Axes->False,
       Boxed->False,
       DisplayFunction->Identity,
       FaceGridsStyle->Automatic,
       ImagePadding->Automatic,
       Method->{
        "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}},
       PlotLabel->FormBox[
         FrameBox[
          InterpretationBox[
           TooltipBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 FormBox[
                  InterpretationBox[
                   StyleBox[
                    TemplateBox[{
                    RowBox[{
                    FormBox[
                    SubscriptBox["\"\[ScriptY]\"", 
                    InterpretationBox["\"+\"", 1]], TraditionalForm]}]}, 
                    "Ket"], FontWeight -> "Plain"], 
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptY]", 
                    Interpretation["+", 1]], "Dual" -> False]], 
                  TraditionalForm]}]}], "ShowStringCharacters" -> False], 
            TagBox[
             GridBox[{{"\"Y\""}, {
                TemplateBox[{"\"QuantumState: \"", 
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Center}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]], 
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1|>], "Output" -> 
              Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptY]", 
                    Interpretation["+", 1]], "Dual" -> False], 1} -> 
                 SparseArray[
                  Automatic, {2}, 0, {
                   1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], Complex[0, 1] 2^Rational[-1, 2]}}], {
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptY]", 
                    Interpretation["\[Minus]", -1]], "Dual" -> False], 1} -> 
                 SparseArray[
                  Automatic, {2}, 0, {
                   1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], Complex[0, -1] 2^Rational[-1, 2]}}]|>],
               "Picture" -> "Schrodinger", "Label" -> "Y", 
              "ParameterSpec" -> {}|>]]], DefaultBaseStyle -> 
          "HighlightedInput", StripOnInput -> False, FrameStyle -> None, 
          Background -> RGBColor[1, 0.9, 0.8]], TraditionalForm],
       PlotRange->All,
       PlotRangePadding->{{
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic, Automatic},
       ViewPoint->{1, 1, 1}], {192., -1052.9779226003466}, 
      ImageScaled[{0.5, 0.5}], {360., 391.8057386419895},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}},
      ContentSelectable->True], InsetBox[
      Graphics3DBox[{{{{}, {}, 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
/+93dv6TPv/7nb3gP/8/6l7Cig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767824#1"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
cNzz//+z5/0P5bTCig==
             "]]},
           Annotation[#, "Charting`Private`Tag$767824#2"]& ], 
          TagBox[
           {GrayLevel[0], Thickness[Tiny], Line3DBox[CompressedData["
1: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
             "]]},
           Annotation[#, "Charting`Private`Tag$767824#3"]& ]}, {}}, {
         {Opacity[0.4], SphereBox[{0, 0, 0}]}, 
         {GrayLevel[0], Thickness[0.005], Opacity[1.], 
          Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
          Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
          Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], Text3DBox[
           TemplateBox[{"0"},
            "Ket"], {0, 0, 1.3}], Text3DBox[
           TemplateBox[{"1"},
            "Ket"], {0, 0, -1.3}], Text3DBox[
           TemplateBox[{"\"R\""},
            "Ket"], {0, 1.3, 0}], Text3DBox[
           TemplateBox[{"\"L\""},
            "Ket"], {0, -1.3, 0}], Text3DBox[
           TemplateBox[{"\"+\""},
            "Ket"], {1.3, 0, 0}], Text3DBox[
           TemplateBox[{"\"-\""},
            "Ket"], {-1.3, 0, 0}], 
          {RGBColor[1, 0, 0], Arrowheads[0.05], 
           Arrow3DBox[TubeBox[{{0, 0, 0}, {0, -1, 0}}, 0.03], {0, -0.01}]}}}},
       Axes->False,
       Boxed->False,
       DisplayFunction->Identity,
       FaceGridsStyle->Automatic,
       ImagePadding->Automatic,
       Method->{
        "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}},
       PlotLabel->FormBox[
         FrameBox[
          InterpretationBox[
           TooltipBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 FormBox[
                  InterpretationBox[
                   StyleBox[
                    TemplateBox[{
                    RowBox[{
                    FormBox[
                    SubscriptBox["\"\[ScriptY]\"", 
                    InterpretationBox["\"\[Minus]\"", -1]], 
                    TraditionalForm]}]}, "Ket"], FontWeight -> "Plain"], 
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptY]", 
                    Interpretation["\[Minus]", -1]], "Dual" -> False]], 
                  TraditionalForm]}]}], "ShowStringCharacters" -> False], 
            TagBox[
             GridBox[{{"\"Y\""}, {
                TemplateBox[{"\"QuantumState: \"", 
                  RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Center}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]], 
           Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1|>], "Output" -> 
              Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptY]", 
                    Interpretation["+", 1]], "Dual" -> False], 1} -> 
                 SparseArray[
                  Automatic, {2}, 0, {
                   1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], Complex[0, 1] 2^Rational[-1, 2]}}], {
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[ScriptY]", 
                    Interpretation["\[Minus]", -1]], "Dual" -> False], 1} -> 
                 SparseArray[
                  Automatic, {2}, 0, {
                   1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], Complex[0, -1] 2^Rational[-1, 2]}}]|>],
               "Picture" -> "Schrodinger", "Label" -> "Y", 
              "ParameterSpec" -> {}|>]]], DefaultBaseStyle -> 
          "HighlightedInput", StripOnInput -> False, FrameStyle -> None, 
          Background -> RGBColor[1, 0.9, 0.8]], TraditionalForm],
       PlotRange->All,
       PlotRangePadding->{{
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}, {
          Scaled[0.05], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic, Automatic},
       ViewPoint->{1, 1, 1}], {576., -1052.9779226003466}, 
      ImageScaled[{0.5, 0.5}], {360., 391.8057386419895},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}},
      ContentSelectable->True]}}, {}},
  ImageSize->{
    UpTo[600], 
    UpTo[700]},
  Method->{"IgnoreImageSizeAutomaticLimit" -> True},
  PlotRangePadding->Automatic]], "Output",
 CellChangeTimes->{{3.9442458308850327`*^9, 3.9442458443476048`*^9}, {
   3.944245886760788*^9, 3.944245892358715*^9}, {3.944245976799736*^9, 
   3.9442460534011974`*^9}, 3.9442461393750057`*^9, 3.9442461779646397`*^9, {
   3.9442465544711933`*^9, 3.9442465725046024`*^9}, 3.944246760192583*^9, {
   3.9446613482895603`*^9, 3.944661371979803*^9}},
 CellLabel->"Out[233]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzsvetzG9e19tlvA6Rk2U58SZycJCdxrr6cN7GPLzqyHOsSS5YtO7KoSGJI
kSbNkCJNmoc0adIMaVKEgcBAgAMUAhwgwHDIIpsc8mVRIocsDlXQSJHLo9Sp
mk/4A1L5mu+TqamaqinNetbau7sBgRddLTtW1Wp1Nxpg997Pb6+1197d/cu3
329r6Xz7/Xd+8/ajh3re7m575ze9j77S1UO7PP/NMDy/NIyKgUcNL61fNYwN
FkcN48u9X+79cu8/3t7/AwvzUVo8aK/x5xNlPvjE9R3Dow89g60HZF+j2veo
/XfGt3jw5fV/+0HZh+1Gw3Bdzf+8xYP/tOlv/1Vf8VZ+u+jgDX7bw/u8VR9X
vV71+xNHtJm0qPJgzfDQZ0ee+OiwVIYpvzGhT2HDc3F+/MgN/7g69/+dl/fR
4a/SF2Gvs/3Hr18fjJ543YqchL1xbujwAXy18MZTT1qR6jc9tKgyaXHMwOpx
K1rDZlRgy9hO3zluhcWu1P7b8/hu/p19L1nh48es4LHjOMsTOMsTJ6oCR6qc
y/2P9c/HCh+7pedz7reHD210PmtSQv8bL7c98dHRA3JGVDJhXTLVb5AdMUz6
W28a99CyyorWwo6xxWqPn/vwzdf4TN98+me0fZKOjdVW06Ku2kuLGqOSlrVY
c6y2hr5d46FFreHlLx956mn68VqyGrrKmhr6W5HqGisMOykWOl5NV3KSzvHX
VHq/pvM9KkX60aYX8OZtv4Arp3bvvpELWJY6+F95eT/tPohLoNM/RKf/Gv3E
61aULiFafYT+1pv2qdNp04nAcLrx+pNYVNOZxutrrER9zbkzx37J13T0madp
u7aCFnUmLepp0VBPGoo31NPBbPwL9R4rRquev3/vwQf/su/xx+mncVistt7w
0p+spwtrUP/X4wLrSHPh6jq6MFgtXRxd4LHqwY9/VU0i+3VVoOoEV84AX1lF
1e+vvTJUCmlr23pXhuvCmd51F3ZWKm2Bl1+lSvsFXdpBQu0VurRD9ENUaTVU
abVSaTG6tFjdMb4suiRcEJ1lNZ1vDZ1IogEX0VBHZ5NorD935sQxub7nnsGO
Bt7daCWaGuX/xkb6SmMTrhZrDU0Gvt2Itb/sf/wJfJdKo5EvvZFEXN8IETdC
qo3013CxEVg1SidMy0q+0hDseK0VrKqBNqmN+DVX379/7q7xXvc14grp+upL
rrFaX6MxJ1X5P+xW+WAxe/ry6lyXJ8qks6k29fU11pLVweik6BLpipKN9WQN
yug0k01YNDcZ3nOj1QxHoWrnTtrd7KHdzXSNyeYWrCnjdQPfa8aihVqUZGML
Nul/bS1XGvb+ghughr376C83oywb6AtxLGL1zYRXrK4Za2J1TVaUrZFLC4pv
hBAaSAihkw1UQPXUSNUN/q7qFEmdGqnD1SyE1rIl9MbtK6GTt7qE8l2vvs4l
BEk1e25BCdXoEpoWFc0oRxQSR0SwHBIV1ajWu64KzqXuGF18vP64LiM6qRqU
SS3OrKmOLgoGPpPNDVjoUpHLbmm2UmImLVpod7ql5Zy/poYL7PiuXSbtaMVn
rfSDqeZWsjYY/SCWtK+lDZ/iM97XiuJtpXYvSQfSGn7oL7948qdUkrTd1Eql
2Epn1koUNrZyE9tK1kLn34KWtB7nEKtr4WKMwmqbUWrNaElrmqnoYE1UeI1W
kAovUFVLBXfKllbj567Y2u5csTWWK7ZJ0duUNM5ScL+mggOTulFmHsm4wMga
7EITGJtq6RzruLQYxuYGFJlYSxPKAW0JlRTKSay1hQqtlS473dpGjPpr61TZ
vYA9+KwdxdraQYd3yP+tHR5smFgz8MV22mynn21HEdLS8/fvP/x1btGTzbSF
JZ1MUzuajHZ2DG103m1SePWtVGL1rRyRtdIltnC5RWqbUWwoNHCKdkLKrIHK
rA5lxk09a632NhcZrraFLxTl1QozzNtTaH/5xU9/dj2FVlGu0OjLZUsMKlPd
W9Ud3KFja/oCxdVcXqrZr6dmv0GVVyOa/MYa0jAXlzCpTBVXi1NcYK6Fy4dO
Id1G5dXW5lhrG5ddOy3aeEGlcc5f1yAF+MKLKJu2ThyCRVsnNrtQxnWNV35z
4BD+x2co3S4u486/HPjp09w1+qiWmohUaydLvJPOxzY4Gfq5RHMHCrKpA0VK
lwZro1aooQ3o0lq0rtXYQbpppbJoJe21iBG0oZNNuigH/XASR06x9o475TgY
rnYFGLeyHL0oOhZNmwinFaK50fJruK3lZ6LoTJQbotDyJfc/iQbHePmVJ0LV
Byj8eE1p8A1VdsecsmvkshNmhVcUniBbKWVH5ZZqaaKzhzXTZaH4WtkjFCuQ
yqMd5dbOFLZ1WJl2WCdtYemlZde539U1qvJ8iXa3dZm0t5uUkWnvwZoyXs/3
Hj2hjt1Dv9pN1oOf70bpdxteKnTuidL/r9OeHvxR+izFi9YuKtmWLopWks1d
VLydjlEhxxvJGnCeMVp+hZbtVCbtVrS+jcqojcqqTelUtBqyS7vR8lfVD/rf
JOSPij8+otvIGytrxwkjYLu2sI27ubSh57ZuOlVYl5W8XaXe4C71P4rGcxJi
U7kfHuQyJ78UQfxTX1VU5nGUeZOUeUJrm5xAi61tuInWZkaW3FBbiyrqVlx5
m24N2ju4YFGCKMYOXHumowtrynpkt+fc7xqapCR37zGwr6eCFr34Zi9/qS/f
e0zFUbv38m7s7UU9dvRyWHTgZ89yPfKXevClth4UujZooodPWBc+Gxq3bhR+
CwpfWRNZYycVQ6cVa+zkwu807qNiooKva7ciMCr4MFurFVIFHzzebAWOkdzf
rKeG5S2W+mHVq5Em+XUVCvwDFbl3q6VscinfD6Ffb0kbadG3yPz+khjCKehY
g6ugm7mgtcNDe9LSiAZctSPSltgljbJFKaMByXADQsVM5QHr4vLr8ujy7qRy
7uxR1lthZTup1M4FG05zaZ54cR/9mWxnn4cW/dSCZTr7XUW9n36lHz9In1Vi
HVVBW2x//8HXv4njTCvb0Yc/2o8/2sdn04eaoBPkGuI6TLf1clWkxKCfHlRC
aw9ZN10vWXM3lUI3V0i8qQtSb+yC1Bs6qRI6qAI6uBLCte1cCSFqZ0LVLVbw
ZIsVoErwVzVRMPc2S/2Vu6D0Pe7SN6TovVRYve7iv3Oln7pdpd+sSr8RpZ8S
9ad1U4Pyt1t2lP0xu+zjjXYTI2Xf0iBFj6bGLnqO51rcAXM7rJ2uEbEe1YCp
WpkOaWVMaViynT0oVmoocp1UQDkqRFrt6j8XamzjAj750v7ttGOADu0aMCry
7/+qXirlpf3YQ98doDPBZ9utDG1nOgf+cvDpnRwQBhve0ceg6vDXBlBRA9xa
DajK6pdqSbfjT6epWtJtfVT8ZO19CHT6qApSVDPJVrIWZc09XA3xZggo3tTN
LX6Xqga0TFQR9D2uihqqhupWK1gNAFos/7FmqoJm6fv9wq6BIyU1cPzLGrgl
NVBbWgPNdg38QSgQGB7gOojUkFELZNeBdrToa6MFaqE6aKm3vay0PlwJUv6u
EJLKPt2B5qcDRd+Bou/s0q19F6yHCgel30X+MNfdV0mL/gpaUIGeCzW9I8W/
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
6fSjx+l5Q4ssRfMmBSlNZKWVoSazjCjLarL7OjRZwy0ka1LeP6s62vcpadYo
adZrabILj1ETGYcLt7XZLtqsVNokF97VI9oUXUr3xutIU2Qpo3oVosz+UXde
BwrFMwRZmZjZoJM745LYkQG97VqVdlLHvmNUq1LNjncFlGp8TE90Ed89y1MS
qEqdLjP3U1RvQ/dasFQOG7phCRk7RDWiPe61sGtOTql9U9YC6XEhNWVaC2ks
UlMeawGizH/U/VHh7RNt2EXXKofQBxVYxZoyfBtqpzXD4+zjtniBQwDt6Z2+
lU4wjXNW0+4awclLyqjSnuWjc/joC02iHzTJSfNJR62YMRYQV5+SHhHZGLKV
OY5CWbgUhWY5Cs2OwNdnSMSZ4QSJFkKGd/8aiTZq+3aoNtELC7Fy491kXUHu
CUU7SLntvmLVkm/3NwxYvrpebkk/PPrO/8Nqvf+JD6uPrqPYpvUUa9iS7frC
StbU7abotji4/CLpNnRHdNt/y3TbKY2tRKb3Qb6FZ3/4KPXea6nPBPk2bCRf
KLcdr1BSjW0KgYCtXu4vGSLf7SJfkm7WnVBS2s0N+OQOJq8rDkCfKciTJxDS
j4Tdg4Vatqa6p83v3A9ri1Xy5TM8SjjDw4AymysDvcJMPWoX42SR7ogoB+91
2lXt0cV3ixuvINc+JSJLTZEKRwtvHz9Nf2MhPW1aZ9Pk8c+mpw0PtJn3v+eX
Lb1MTWPN2cffMLG/khZYSyKYOEt/eoHDARUSxFVIMMcLiQt04jPmEua9kmvS
4+CRrCSYJBaAQEmZGVImWQAgkzJNRADot1K/acxHNipGupTeEsekSo/cZ4Iq
oceYakujVpI0mWBNIgIIW3GlSe69qwggjAiA+kihZvSRhiw/RQC++j6lx67/
m4X49RIh1m0mRLtzdCeUGLn7ldh6o0o0cPQURCiffanId6WF7OLlV5/4qEiY
9WQNnFUSYTZbsTYIs/VaYXbhUZskSx55FOeepn5S2ukrkT77BpF6lwFHpckS
Xd5LWvQjm8S9pLFhV6q9aGhbHnMjT7HxslefhvEzBSDRoHh29uq2NNMyl4sk
mbGdelbGU8T7xcYMSdioao4jwTOORI/p7r4kbTPRA8Ju7YlFprYfn4bTTtsi
hGmhQrwztMjMkAjOZqaxlvf3+gtvn2znvaZuOtVREPCMtQjLTNOnWHpkm36Z
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
RFyz1GmXcaXs+TifdjMO5a9M/fHLTpccd4/Nc9xFUAsWBGqGS7fdLhZOty6A
069cbE7t1Pmigppsgyo2MDv4HlIK2g8K16iNq+TCZ4OVOAU24RP4zwnFLXEK
34FgKxiPfyTIbTkzuRhtu90EYpPPRKyLyDqL6LzbKvG1taKN4iufd1uCnTtS
mdcUDK/+T4+8Sv3YmsJGUhpDdEVg4ZsDXJ2rZgFblGW3fSxgpTyVcYCAfcKO
r1/0jq87e6LMs+qA7PdvYKEEzqoTtmlYoZolkpC2T7Dx3sfit37pm+CFbv3y
t5zFwZYHn+QhdTtT1ppEmg6Avx1QC0mJYhYNme1SzCaIiv2qMLeKWRnCo5YP
Sonxh4+lKWIVPC6xConTMBrnyogrZcmQa420UqaM+Rn26kdxqRdG18sYWfg1
ov2dXYN2eKWSC/0KYsY3Tsolw+sIT4hP+Fiu0Tkyqf0mpOWiJEZILUuMNLg6
GabyMMdPxG9wEpwlYTqoD7KIbvxRwHcaXpsGXuFP+CxgE3kzryla4evDW656
c1BhTB9OKbThlixqAI4wwFy7ogx6DOlFrQfg69eW1fm1r+HhZpL0H9wwImgd
Vy9fc64wDSI1PKC2vch9vEqnOGwNwNPac1+PStLaOtnIpEpWTZgqyzYmePAp
QUYxRU89GxWqaFgAU+Jr/brs14LX9rwY/+njz5JlgGWC/QzsVbAKiLIe2AsQ
aZeiQaS9B+wVsFOPro/9w5pdXl1xE5ILXxPYhTBLy13y6ynMVuTWemVMrr/5
6Z1ecTaTWwihtkCRmwZZcWqJlwWH2wxWUUiYPROv+z4WvA6EeE2ai1eMqaT/
pxIyHIbIGFgnEoaVo+qi2aR2zyY1YqmVJtiYUofCqY2kQtT9aPMZtfkU/RPP
3IZi6gIBHbgogMI7qHHLgicHA2uX83nFqFY7YVylNcXVOhtmPQUG1yoVWNuC
3TtTbUaDHTuOq7uCzo3RLMVohTBaPiejElp5hGfJyhdWmow4c8suwFVlxIxq
Ptag9h72Nz3yJKO636AqG0cJVzy60vDdcXUBdY7p2WbmB5vveyJ+2599C+zb
8dv/7Dt+5tY91LNtzQuhyoN3hSL5L5GUuLTaKCrAesrrJB0Gq1KafwtVUh+2
6N0vlBKL1n+QdooAsPjPDrgOk1F4pUwYW/wtSKoOr1iI8kbRdF7MArp+blZE
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
9xtjeklQMN/x/Qs63rpkSTc7xJvc7zZHrA08YNf9xjbS/P8rx9fD0/TvN5Iy
eBt2/MsbHXPwTf8ugsnbDft2u5G+rY93bzu98bH+yrhA/oU22YVZt5HYbY51
Tzu98bFaubbchVmX76Siu82x7mmnOztWL1ik7Pawb12SrFsea1ryul/51m12
rEk73eZYt9lt0i7MbpNkvZlj3XKne/Prdl3jV96xbha+dnqsm+30hrHrxgyY
3R72/+2Wx7qDnT6y1U5vfKybdc9f+deZ3W7kdZtj3Wqnnt6b7fTGx7pZc+12
v9nqq250rNvt9Fdb7fTGx3rYv4uU5uZv9VVyrJtVUDez020qLc3i+6zev3ES
BUeqTw/7/27L49zrDrc5RlMMvekkUrTd7aYxa8tj8+3o9zvZ0Y2r342cbVP9
Jm28zb4fSl6X4GKbkUzSxr+64b4Pb/DXNvtO2vjG+96oxTb7ths/srN9b/T3
NvtO2vjG++b74Rvu+8FN1i3p36wmvjbf7ueB5M0TPhneeuPD/o3Nvv9D4qPk
Y/yHTT5Y8n2eWNyyWZOL+pX5/6bj3PDRz+6nOf9SlsE3v5/xhUc+dK088ddv
7HBjM/s5bfyF1fz497//j/+Z8w1Zyi5sC3Xf1TvceCZp33ZT2fCvdPPDf/Y/
Xkred9UON9admnNPcije5k/o5tLYpH2/tsONt9n3k/LK5wQeVPKnF5P+euPn
78q/vlfd9Pv/+O/+8fdrC2P833nErPvf/+sVWc939237LVvuJcCX9+/wGPiX
58+f5//eMdh1//4/md3hMfj/wu7lF+P9yXvZ49Hg72Ud9ncTR7NhL7s8mj9T
z+Lt7o/hz8w6vv95b4e8+8BejwHr3mr6vqwDK7qfPR3Nhr3s8Wj8Ou/9aDbs
ZY9H49d570ezYS+7PJpPerTs/hhS/nYv35yi7r17O4bN9rLLo0nzRTWuB/1O
gHs123E9t/jwJhTs/qhv+tv22Dq7Dsbf9sFS19m/PeD7PrPe2bcJaXtvsW3J
Vkfw8FbftssWp8u6NJtvZFvjbSdgvtdEONlyv7KMVQc8qnffyt1+68PJ37XL
Nuq6kHwD92qi9oHkpqR0jnt23ajNvgayfGirne+yFfeZdXbXrA5Csi7dqzGs
cRt8n5QS6SlEcV+7b9zW3x70fzuOZZOv5A5upsncOdex44dS1hGWdIOMRUm3
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
5ZGowIRvl1p15izPcp902Sfz5Xa53C9XdsvkF8stC7LdEl4p8lL8Mdlzoznl
nZfnlEfDTllunFIfJK4D7JvYMc2oJmEd8zCPalopioc8E02sxUWYzahemYJX
hjyzoxTPLjA3S6x3hGmw4btkN9ZtQR9EUAdUValtqsjwxDnd3RfEbruSAs8L
wzRCDdfG9Zo6jf8Nkf8Nhf1PMocyZuDYJ4mZtt44j38ReVn64VU/gihcR4xc
qTbz7q8xqXs0NQCPG6BPI7/zxtiwx1v2u/oP68PHvLHUAF7hWvqA8DF6b4qP
pQZi/JK27XzQnCA/3eKNwU/tiMmOz3Vw1SORPW5HRPgtB5GVgo9qcjXRHc0I
SUCHr5KTdpKTkjUgwGNIlBcMicjSsDrk09O1KR4PtQfjIbhqNbupy376VY7n
7KVq7eXGS0VuJtVTW8lTWyA14aVFMg5qOoJxUJVXf6jSq9tflnnigR888tFb
7zv/dw4Xbb4sFz2lLlqW5aLISIYzkRvx0vxsLzX3zSxH5VJgKjI3g/zVNsN8
7h227wvgsOUbc9jGqMOaWO98ILfWknDMP4jb6n6yg16z+C1iPp4enYTLRmL+
Ca8dLRbks7ymrN5UxWvt8KiTYn1nWSU7bheWyCKvdW4xfqvxvs7kidhp0xrr
syqJjis31/66Vl1VApFeJmfDdxvbuSchpV35xjqNz7K/dpEmtuMg9tlu47us
9Di6tvVIcseJi3O0W3MR0NmVOZjbsC7eK24YJ3c9pu46CKPDnbwhF/XrS+sz
775ThEPitm74ko7BmFzH7x0n9yaj68ZxyTguHid3z+cz7Pwp9et2VhAuNIML
rw6PrziX3xvgycjaCqhjpUNzuJbZn0CSPvDqLvLoLvJo/DeSX2P9h4ZOGVOR
pWH1KHGm65Ct6q5LiUerddW0izd3qjcnvRQ8upI8mW+/LV4bhAKGVaXwZrKS
Jq+FhlXw5pYT4tFN8Oaj4s0N8OYD5fb2+3+xGxc88lHhW3oLXubKzhfNl+PZ
voyaTFoHLdfdleW6uN6lrTvfiN4cC3szvLi+4yq6cmINVz4hN+bHeBtDU1Iv
Gb7qPNPYIT3G/x7l7a3wfP/t55/x9+z4EWtj8fxDKj6OeK0kPNjzi2BF6vnF
8HxHXD8/cP3SiOu78Hs3cPqtSG+FnD7s8LYrCf+3NVhHoFfbQPqxFlkdWT1y
WwP1STdwd0ysirr7EBcEh5DLGuKmDvi63q/5T28dHVUfHZNlO7oZUmF8Tx4G
cSE2kM8eni+e3WmNvfrwO8fJNzuHaNM1RBQcLizyG35XT4cGYXyOvp3sDvEe
X5qHQ/St5CA8no2vzONbOZ2DRmkf0AEfjwf7JDtmEmxiMtSLh6qqQ1pVdbXd
FIX9fjaRH33ctNzXhBgHCQL50YPEV6O9QcOnyaNhkB7dJD3uoeFcSr2aPZsT
Xx1IfLFbt5Jbk5W3em3q2slSWMJrJc3RQpqjhTRHs96hE8dqya1FczQcqiK3
rsg88V1y68KTj4jrYq21Q8Z178jh4iUbdPuPC9/KPPnA/XrDvxy33xIeEkbv
+GW441d96flX3fP7cnv+trDnh9utsj3/mjs+38/XcHzczwvfV8fvXcXx78fe
I8tu+0vmLSH/X4pefif833/nR8+u47Z/3Gsj3287ccL4P483UyelsEH+jwxO
aZlr7vji90j6cD2jRl2/3utmt7eVXRpk3iquX5PQYWZC+v7g8nWt5PCwpFmv
y6bkBmmkOcjdwoM860OdX8yMNLV6MdxilHo3E4D8bJorrzzIlIoYXIqdPk88
TIeFnQPGySFH2I27BnO5MY51D2WOFBaRnXBc3ubhDI4H1iXXD8e9CX7TRNcw
XvFeHrZ0olNf0qtBa6Akpjzo6NXIHtf84EajBWNTqYu4phmHO2x6bC1nsMV0
1cRsV02/jQV5wVDUYGEkjnOf111vsGA0GIlOWE1K0nqc2msLsLBIkJW1eEnF
opVkTovKnGYef9ZzWg9INAAJjD8PIhb8ELFAHg8T+ztt/tMgcaccWwrf409u
GgtHrhYL6avCwhZR+yuzECj9NECAOZtFQ9cXjYa+605DECAMDXXLaIh4foiG
0+bYwysHiNuDy22MeYi3X18BisNeC4A4dlShOJ4TinaFIhURSFYcOYyGczfY
IDP5SBFIJkpgmaye6gaeH801HEMGUxGQwUPgLDIGhQyX0SAhRCppqKnTKCT+
s0o6ElCwOOLRHwIFiiQjXCQZQZGEs5GjjIZgIWhgpKpoxHWUO2AQgdqBhGE3
Vk8PrFspcb2J7mE4d/cIXi1tf+yVpe2Pv8JHcW6EgEgPy1XKRvewPRt6Z8iU
IoMM82RMztEPN8EAT3QYtWVG1ylNkmIwz9Uml7f6e7f3RiSjjqXNGBrpzTTj
E+dBM1Pj9bLhv7ynkUQpjZUJljSNmANYOgiWjgAWUlUd1e0CTDVGyGQVSVVU
NEouaxFgSlsEllMGFlFUCB0YITcAmMPV/ts73vR/9fzPActDK4eO/1wrdKyf
koNe4shmU3L7ZlAiwwdMyqk3q1JaSgAJDySGUGYaQmfcFSPScVUQefxLRK4+
Irniyd/Dx9aOJ5HLv89bPNPvLa/hQGFm+4Pf85qYlEOWlBYm5ZiXLAqTQpSc
sKRgHeVTWJUUD3JeTkmeUFIeokQmolfVO1+R1WHNQLumKUSIDrA5joRiCcWR
QZRfB3mFREAy1NghcSQhkJCmAx/DsGCcTWxYUcVs2CZjLshztxOnJ0mrsHih
HxxM6EAZkorlDY+YY4GaIhuGwS274fLpYYJZXHrEbyz7JHNkzwkB5IlXM0f3
fuA3/v4TXDaKzYi8AbiMMBOT6RHawzbfm8Q+fdCkHCfDa/oedCCOVzSaniQ+
JomXSZFn0GWqxobCY3dNz+qvFagyNrovaP9hnqZk+3TCQC/P8yNAZEuKbADW
jP/F/uY0t7imSY11sxEyoAXTmXsauggWtfpOHrFDjHXVAZgOA4wLYpy7mJlU
lTDTrszIIJ2MeWkmXhKcnWoGMzQaaeKkq9VgmacefNyr2V8GXr6/ckg57YRG
GauElBVAKdw4KMVfEFD6VgSlIBcoxvucq8PK5PVixbZFctek4UUbHQs4pgyG
7aoz026YKb9cZkpDzOSKMb3KxzpjTOTyB3l7xyMfHyB09hf6hS8+7+/ZuSMn
Oq2ETbJIlJhFp1jVGCmxFB7dBHoKiJ4Kr6PM5nPJQA7Tg2xgRS1mcyGfKwN5
S0+vGcgjh1uHsl0/VnFCGjfG2Aw2wNBsJtwMgRthRrlpRi+qMKNG3IywpYMc
lnOzxJb23vDoJNS3MGDLaGOsYkR5xXnonh8MyY0EEolkFRV5N0cM8v243Y76
n/z+E5g32TPiLj39xKvAo4cOVySIpmK6iPZifJYAGXWZHRwEL6PKDc7JBSNM
D33GlIWKL6cfIT+AqVNh6uIUAGcduASosjJlrF+rkuiWk/+TUCMchxptfZN4
I+Q0p3nUz1uipl+oQToe3KDelw96lJtOEWjETlcdaTZSZ2j7JWw6QtosVYm/
bjttb2Nu2hBrylpFl5UaZpqYmcSJBmHmeB0xU8vMPAlmDnCceXDlOHMoDMYq
cSYHLPcGsOy4Ilik3n2q/EtaNkoLHU58ScuV0VLj1Rta9odpyRVhIrSsHWHM
5TinTyXOZ3FWv3+P13hwf+bphx400Lggxvl+TmbaVmPm1IrMmLXjs5hpDJZL
qIU2E30mVUKuFKouY2QIlXbgQn/DJizXMaSVkuFmY108ssdwVHGBiSijAIhK
ocVFx7j4qg1x0iQnXXfagBSq5wVDehfe6PLoO0+wSauJKBO1hS28nm1UMHHy
WaB9UgF+RmFLzzzxKtlrrjfVOwYOekcz7+0r5r3QMW+qZ4xslH6JKf4w3ec9
uo6p4f00bASGw3wp7w7DcCmjNWUV3XBY1cW0vKl6zolJl6JUTUXC6hwBM1+F
c9BDtgFFqUJ+hrb54Ar6jeuUfTDkoZkrTkODqx7lqlu4orcSWWjyjCo4lW5t
hqs2cFWe5Kxzsky4al3GVb1wdazWL9z1S//tnW+ZKPS9HFHorhys/evaQN2/
DKgD2UAd+VwAtSUXUHaUM4LGKg1Anw+Y/ARJuGsE08SNDNPdAlPNMpjAEkWo
to3SlNn+0BNe3eGqLJoi5OSi6aGVo9QdweW21CMPyL7bRqkGggppBIWKZV3L
8dzSrg1EsZV47cukncg729jSWV6NnhZAZYAK9bRYqGr4iZO1eA6RhSqcjAZQ
sKZ2NRJ2iRRR1AGaEJkwwXmEBN2IEXTJbhZ0nEQinpgpyxVz1MeZZ9PcPU7u
M86JA+6I1VTBoPidSQfHWMPFVb9ZpFh18eB/1BDj4BhUWu+o5eUDMKK8bAUb
S8/802swHPGm+mDjeJ15b/9JP1H5R752HHDgHK6h9+fhFaNloOsdM4CB3TB0
YdgA2jDIGolpLqILcjSUfnA4o+0auoKsg4pfM/NomGdpDrfJVMpek12A7m5F
zXSgpUdxShNOaVV9fU2YLdTb1E3Sr5uY6lbxxzwJTvEgNkl8kuzCHURUOxPV
Vik0JcuSXivpvihNTV6iuJFpalSangpo2l39m3/97sqx6T+d0MgnV2wKYXRo
NYyefvDBlTE68SVGa2K0LYyRCUzgiGwsTNIXAySeCs35uviNjA+C0XdXDkYR
pNYORpF89nd4uy1Mkb9nx4v+3l07vcTRI14zU3RMKSpyCSMsOLcCRJKTu0kZ
qgwEXrkIPG6usQDV8wLrsnzITfKompomK+76tK9yINRYI+IOw1BCCMqOIBo2
ELV0ED2dSlCXKrskRk2jyTTRA+thhYJ5n2NEEfEj1iEcScNKGKEuTVrbnhc3
yCbkqaCz1Rqw47gmF23YIao4ErFjw9fHXKIiYXkYZzpcUEN/Xmbpyde86b4x
+iGn+8Zd/494GAS9wn7/OF7hrDcNfqZ7+bDsYg+Gq8dcHKFNz1gebSDypukn
mhbdxyJvhH4DmyPnfLnUXlm7xhglbRwKzVUBSeFmT6aprZ9JwpTW4WQfaT2y
1l62QVhLL3HVy4oPjPU39xBXaWu9TWlOTHSHchLd9V1eF1un11nX4YIqtOQj
J1Gd8lLV7WKVovag9JLlBqwWr6UUYCUCsEjpNRbV+4WvvO2/s+uXClY5wNJA
kjMwmZTc/WsEphxI3RFFameAVEsUKRC1WmDafKZaA6Ya1mKq84ZhyrVjpBEN
SBosrh9T8TBTIEryfvFspNYgKp5NVIxh2rYaTBKoOFj1uKCIYnGvsCRxqqk7
F0v0/QFSPBskyT/cepkclYU5yhWhIhytHaEimXB+j3MLfQuLk9d46GDm6Yce
CiLUsWOCFOHUWnRCkcIcAAKKfi3G6aTovBTrvDLJhBNPHcqTSUB0hXjqqeJn
IhNRMc6CM0uydEZtMz/qEfGpRVlqNUlwb7BRhV6inVjqMCIPLCFt14LlW0wq
j0FiU4nHXZCEEgOlMEG7AKhxiL1xnno13jWg4m7QJhukLJovZdGwSTDi5LWk
GVRfjTkFmVdfetmJ0/aVpXvvfiDz2kuvwNzMaztecWKyu4PNcZfu/cZ384IT
lx5/9EkY9na8UoBDNNyqeL/UmyGeyOj3wDbPmyGQZggo/kpAzXDqYppTF0QT
vRqF4ZhgFaQoBKspzt4zTpLYlyilHUWmviyaN0/wCuXPR7gLSCu1bSz9wBUS
Esle3PIMWzSWEgGoIlACVIwjVB7rvjQx1R0whXo9ib+vsegLmCKrSnntRvlV
tK0AVSIMVWb7w0959UdrvFpAdZCD03dWjk2HwuCsEpuuDKYTXzSY+q8STH7Z
8Q9XgomZWQ8928L0iAkt2fTcMPDkReDRgITqIEekPhuRxK4pQQfCBOWKShGC
1o5Kkcu/bUF6y6vbW2hB2o7s+NGjUZCO54pKeRak9hIFqbTcwcyECoKho0zW
AQ1Aqg2DxHXZ3iD1EAJpq52RBpAGGSSBaFBTD6TuoNcTKPKNNIcUnuQeIOd4
GpqBaKwNuVuFiKLROAypBuaHmy6RF5auTBpAILcwxEKOW296RtzMqy/ucpmN
GL18Ga/MnuHFqDYoOBZuLpQZEXVsX7HqM7L+CdFr+DowgfjSP+HkLT375OtL
zz71OvbIJvlozJuhK/LNfub4wQ/l/AD2J/WttB3Xt7EBQPqBiEiG1IlnE+kC
QdJmAuOoN9MjBupYCYYy7FoJRmcTD7S6jCI0cyhsi5QIwa3St9phltHo4zWG
OFkhCQvO+yGZ3ot0H+gzIWugucdk0h3RgzHWgz2sA/E3TTd0Y4pLQ3doXNXp
ddSS1XR4qRpMlSDusGIJU9ceoa6ljKg7hbp/c0mCfh+mjqyxqCHz1MNPMnV1
Qdy6P0fc+moOEovXxm3ntcOt6jJwu2U9uNm4NRKJW/kct7Jj1hgWHF2ZNh1C
cLda1yDfyi+XO4pZpStwl5eLO4SYgYlrC91YAF08GzoXxGVVtSxzW9diTkdg
yA5uWQu6CHMD14q50rWZC0W6+3PwlYu5768c6XLN07uPt3dU1u1DDRjYHfCa
jhzKPP3wQxHsWhS7VsGOUxltjFwEO5e5u4VUYlD/tdRVGurqmDp+mnV1JL/O
j6/ut9Ouibag98gqxeGmdg1wJFksdV1MHR6OM9oaEDeG5pkx/IVl6aDxdiDX
L8bDdPk60TkgeWXBDfIp88oLuzKvwl7cxYDtcvIJrF2E04jmtEdNUpzz5eBr
jGLHlOQUArz6JgxiyExkju8vxms3QEoAGphExBuQY5OADwYu6Mzy6ybpxyk6
dMpvrmn1ZgYn9dxEAGJMOB0Qdg2cs7Q/S5fN9sPGGU438zpxuSXzOg0FXxdR
q/ayX3H8QwGzB8kTSTWmTeJ+JCg9d0OODhsdGuP/w7iUlXUSBy8sMpqCILfr
5kl+kTMirurOwWQfMZiVU9RhW19CcovEIPgjCu8AhSEGu5CuJ7UJDplBIrDD
a4eFGUQiBGpT4h4R2Ox6iZNY1rXpRKO/59VC5EBs2KumsFdeeFLjVM6493cn
NA7LFfdWhu9/8Gop5tVzzDvg79m1w9/78ss5Y94a8IWKWxXBcjfro09nuybW
Q98/EHy8xyfinw/k8rKRY+LcoMkQa030a+Dru3zu7l0nd6mc3LUE3AE7in1N
Frx3VgYvV/CLgLdW8HP/bqn7bmXdHgl5DQh5hw9JluQY1ObykJeMUHeKs/eG
ulSpPAJHqEPqvkomd7DKVOqq6lRlLqeun1eVIuYgPmwpLCkqk5/bMNyEheag
MkcSilyzGdR105+1FbUVUDeWZIEJ6DhdP47pG+MpyYYgEQLamLhB/3dHioHZ
TheckSIkxkRZso0YV5MM/KjwFZPEef8YZ9c5xy6CMm6FpOpF12+uaubYNRFg
MjDBPMUAj7v03PafuN7s4BR9qhAyxXs4RpfQS9f/t9NoQKaXcpYAZJroc5kn
fhcbval/Mg7CcAXpz9k+a35FkfD2MuEbsPZy5rUXXwZe+jumTUuv6kxHhCZS
K9p3KGtNcBrFNCiPBiM6TqMMyGqJ+QzZkBrIGmwla+kDWL0xzqLEmCpWlI1p
pep2JsrmT+q6lCirKL32GqGqjYhKVpCVQ1GaSNYCohwJZfkgKrP9ke1e/fE6
UZNHmKhVolgkk79KFItUxL6Vi6cjq/FUfNV46t8snmJhnjTJGNMIxuZsNlPj
AVMUx4K6VQQrUOU3f9RsuHItVC6gYlgmQRbMWREvOZGHl2AMZiij/5gbgLD8
HIQNgK+Y8jW8Dr56ia+ea8RXnfBVWX3oD6sEqwhfqwSrbXIMr3eaj8jP8RHf
5GM3V57e83Y4lPl7d+1SEZkTPeRMSpybvLYQee2hBqloEZpXTaFfmtij/0Cb
L6lW8mpsrt9qxwHb2BHSjo3SFQX2XHDnAjrcKQm7URiSJWRj4A6roYy193A7
Qq8mSYzRnTbzyvM7yNVeeWEHaIP5vztajDQJfAm5+2Ezi0Ny5ayc4IZu0J8k
3FnGmMT+cUi4CZGCeQF1HxnqeCQ2KOOxKWFjcFJBK/Bmh+jY0LQBUJgamqav
03JNDJfEPJ+ujvutp5N+a20Se2TTLl5gA/r42ABsEmbOMZk+kenTT8ZfEU5z
QMmFBC7R9Y4h7YKsENHolx0v4a5gEZF5WssO6tmTUj/QWvaQUZGOaUIDjoSh
rRvw2A1AopJtQRQZSfKxF1Mhe52vc6zrQY1ALd2YJg7TzGKXYdFmTzqJxU4Z
tRkWK4XF1nKtERCLCVaPSNU1FTfR3TYHiyr2osEuT46BIBvI5BHucXPs70qe
G4Bo4cwVF7cGH2mhLVgV2MI1gD1x9YBtunGBFbfMN7RGhnrSoqFdHRoxxULM
5udiloidcq8EW8RQ7PN12PsCAewywAUSTS3AEYgdofi+FSju3gyKwbC/5/U9
fuGrhRGKqw794b4cEfUKIV47+Ea+W36Oj7hXWa4ufNurO7DXsEza90jm6Ycf
ZpableUWZbnVsLwlwnJQaLey10Xmhi6TBrBgxkwYZcI4nDQdyCaZKbYkM8Up
5xYrekdbOgXkFoKYQSZrS8sIkkePSjLmxTDB2O7UfM2AFCe4zXBQJBxM55mg
+XfEtb3EpreK+0WmuT4QqhEMjAfJl8HsLGcsU3TgJJNskXWZzDzhcVCNXvtD
0Lf+0LS79PzTP+FXYHV4ml7N8J6cxYUx3ieGa9syJw6XYQ/G4BIN/hAjrWhP
6f4Uw53HGMcE4f5JGD6YGKZ3B6oY5Q0ubUg5f5v/++MlRhWzvUrqOChsWHxN
+d6uVCDle1RiZZFnXhoUrZnDakNIoSKLs5VCsGkgY3K9vuZer7eZxplNIJfp
ZS2cdu7W7E23pdZoYVCL7E1bVcpLwlgLg9okUSuVC87clDC1me2PbvcaihrD
1H5cffgPMi5cMfQumeMaJ800AWYunoPBD3KwGoq79tqCFVn9WuXpjbHK49O2
4lP/WLAiwJreSJHHyGRqzhQpnXGTzgGuPPrkw1NhUm3cHJw2fGosjRtWDXNX
l9Z4dtAVYj83wDZeGbAt6wMWYfZbOaDLBawEQw6zYWhzMStTwdcdZgtyHPsG
b2/fXf2bt73a/YTuwQNeo6BLsvllkc050E2G0G0DurwyaMquySNTVKucMLvp
CLuyrFtfmN1twq7htk6brEPsDktPACtmUuyjzSqWycasWBZsx2HtvZlXnnuJ
UH1JVTJWPes32EpdZBJ1kUnuAYDL6VxOGJOrc2y4U6yPWy81rWTaWqQwweI4
qHdIBQPhVmCV5BExfPCkilyTI5o2uIkNM6YMJr3MI3h/uvT8Mz8VctlmmNwZ
uSx8bHg6xi/jeJn54IiAPDc0k08b+sC5IYrtc4P4BnOBfnZYPAvHecrxuIAr
FRXcWPgmRfLiK0FTXY/YdM+opfjVF7ms5JcdPcnNAxNmUi8vnG0WNQ2J5lGe
EzHabkTzAPE7QPwOcKMOdLMZ9A60Sv0kBDFd05vAU2UBcrqxx+plQNxZ34Xm
uC7nTq+jLsxwh2W4FQyXCcPNSD6dYob9PT/Z6xe+vsdrOKEMH6vxag4zwzrC
XDvqZinav4eui5RU1ht1t1w2usfXgW7ZPyi6/RtHd/C6oUvfkdhlcq8FvUNf
LHp3V75baehdZwhem97Li7+Rj7ibt1/hpvKavXu8eoK4QSAmOyrymSEuygWx
C4pjpjeowvluqCuhOotc7Uww5Fbb+mgE3cH6VlvPAbqMbVPK1nNGjVpuBbcR
djMvP/ti5hWY4dabSPVZboXdyc4BTDkd5MXmhrwpNoPtiEplqcozushMjSq6
celpMwNcbaeTgWyeyTuFTDJLtM2cOHTSaGJgEmjh4RnmTugjwujY3MjM0gvP
/BRG+7P0veeYTDqOVziGrzEciAfniNpyOT80w2/BhrCe42/GH8xIQ3gTyByD
6Y2soeeQxuo3PQwTQJbHAn0TofbZsRjP/ciT/5geYyP+798rQRfHC7ucmP+7
IycNuI7O45VHDkmnHso8amB1uG3A1nqIVTTp4dETwLW/pY9QhfWIYk70uGDV
+UaQXa5Pc16KQCVMyWq7uNKDnFQbWbKyI4pqGVBtVVSbSSg/TZg2ZaP6yEf/
Uq5DyrUDrRyLm2OGP73UZIeB5kZjbQ5Mb2NMaxnTgxvB1MTaL0ldg9S8MKli
gxpVrxWxOCexV74Oc/idviJog0YjppVZdTeP2FiIWKSTEV6/6fUkTFKqxyLb
tSayqXUi25CN7L05It46id25nFicXi2+coiOn7bfEh/Ne+5pe7H95+b4bCVa
akUadBuFZi9x7BgR/QgRLcq5RWluJZqTlmYuEolwlpU07XPwzOPuBWpHnkJ6
E4tnm6+qtu0UUicyUMvkLSioxjZU4nND7YJoJ584fiFg+dkXSTWzcgbO6KiY
6OgzSKMdoHOAJTP3CQwq0EitTPFcLVSFbFixRI+52kROUjI/kp3iFoZBbl+I
S94YGeKtRtoSySX0dUpzTtMBvUMqeRGJh5XQkVkxopcxdeJK9M+8uVE+5/Lh
GF82L0Z7tMWG0MV+HC8zxUd/L1cMz26lDd40T997fgiGPBltATFGw5K86p80
lSQQ7XLFKBauGDlmNmYwtVknj9mWwXwkrfzfHT3JnZW2BtdlHw411jnEDxgZ
VfGMfOFIapCE86CgbcXzYLLftgwy12hnau6NAWl6CZjTgLkBySvSyyyTDcyd
FmbI5VbAXN7mtZQnvWYCupnkcuJUs7/3Z/vmf/XK2xGYawnm6sNVG4y90dRy
lnRmGHMF3i8iv4Mb5femlfgFvojI6wPYrOuCgDydFZDHnM8pv8PMbx7zmy/8
0vcJjHmOfYly89ip3/4Oo97VUF4zKEt2eVnSOVdhdq2gvJVFM68Qnw3waSck
x7/Ox+6urCZJXXeAAD500Gs8LAA3HT2mkloBLloOsOnS4KZGXZ03B8EuI3yb
7czvsQA3BgDXKcD1LQzwUGMyVC1igCVttY347fDGWjozLz/zAtsrz77gjZOo
Hm9La9qqx5uQANzHAbjfm+xgLc38kgdNYYo0sN0SktPD5H3DsiKGRt8ZlItm
NPxymkpLujx1c3ZAslITRkNzYonbI0w1J8Qwc0vnRqbJtRnZkZlc4hgAgtb5
AFF36Uf/48+IwlGBE8d8NSKaDrv2FS4Y5RMg2G+rT5lzuB0ItvwBMwr88Ew+
IOZ4jFvBIDGN7Bb/brL1zX1KfmtR2eP0XxfM7x4XgHUaqRaQYryYSEGYYa7X
mSLSWBjcjkELryaxMEG7DY/ZGkj2E7j9BG6/6Gtu1+hN9Dr3EMG9pK17RVub
5FUDkldkdd3MMLdo1Ki2zs3w/9RQ/MnFXU/92Gs8mfAaipu8ejBcRAwframs
PlJ1j7CzZjSORxnjpFVB9Dq+BawYjTcK7unrBW5TDnBb1wS3JQTuszcKuEMb
AHfuS3BvIHDLEHxbMk/TgHh1cNcZe1cFl5lcczR8v/1++Fzec+93Ijr97+YH
+Rpvb5WE1v79DHHD4cOS0Dp6jCT0cZbQUjxSiE+UEMgWYvr/ROnoKxZiWcAk
qp+7KyWx1VNZn02xC4zRr1GHnFYzzyYYakgug3gkoS2STpzofd6EXuSzXCDs
gl83gPcmAtfC602R00x1qVhODwm2hO800OUueei+OPshT42WadKMMOjtM91U
XElBIssgPIkGCNbMMbMdtnkrVsgkdzMfEMhKriMSeIsq4hDNFtsAT2aSIQZh
Y3RyzMchiGHaxnCNYEt7/I4Yv4x7C6Oz/p8aUv6f6v/sLYz4Lg7E6BU4X6Dv
tjAsRvKaWcaGWWbYMUjWwbLIam7JmhO8Q9JaW7To74f8V2TZlT6ZaK5TE8wq
frKMf9ou7MVrxYBvGgaBcPPI5VGyHGSbrJdoavKd1n7nPtoC7T6vtxnWC8Bt
Qakbxto6inY76+pOi3ayIuW1VLR5zYQ30E6Utmae/uEzXtPJ5mVo1xytQSVJ
Sq+rxuS/B8HUjpD5Wk0vHwqH1BVjcuz+yIn/tMc2xvTR68N0S06mh9fBNGb+
UFCeaOOgHLBdsBrbMhAmvpRtDcsjl8n21HVme2yz2MYHDs1o/mua81/Thmn6
TcUkfHMPdfwLAXZqo2A/8tG/fKRgrxaz1wI7opU3WCHOj34r/liR21/xavbu
1bLTYU10MdH+3lde9fe98joT3RIiOilJLgH6FnlugF1lTBZIigJdlw20g9YO
zNrvr01IhK7T8XFAtOPyihH3orUj8/LTz4sRyaNacRqHJbtZZzPObcC5T7Jb
KWI5tQLPKrGjLJvVuizFmJEwZpY6YdO+hxhLz5hEK4nVIrWl/htqykD9aFpr
RmGmuY4USGtjyrBFlTGdgznu0ovP/oxwHMOJBYrNC2NzMAecgm46o8d8MXoj
neG38DUu0f1neQWq8SmzruGb9D7zPcLmYgcb8L0AtqU7RLq77ESJYJKEzYfF
jBTvjfLM00LsYm3y3FFe50xovjnzMtE82jEklhpikodhnPbqZ5IHIbxFfIPl
PhcYk3+gltyb6BPh3aQQN3Lmi1s+OgzEtSGIK1MivCvaoxD/gCAuiUJcxxBX
c/FYcsOrhmce6xYsWYrtv3gQWG2ueYO90Tnxrb0MfNtXwzc7Hl8Jvnm58EU1
srXbuWuz8V2R3tksejERaDIrKx1mFpz6ydNJw6wTW4VXzjX7VjHHrgW+0fB8
nfHdtia+UlMmbIld59scgmXorLbJBDdmheG643VeNRFcfsASvFocDhMcyVll
Ecz/Li8Om+v440Vd3155et8erw4gHzpMMGva6xhgLiJ1/WjuOHyylGAu01mF
FeRQxDGpnPAyMqGKE5EctICEZxVmkzzYGEjr4aY2/+Seg5ldTz9H9nxW+wcC
cZoTXhM8WG7rxeqc7VJlEoj7BeKuAaS6BjnVhUXChnmEjDYGPFrArqep2pkL
K+yTPD0QiS3rrzJFgMhViKXrkRs22Ou5HuQna5OZ4ndLONkkVaCC8NhWtXBE
D4M2vNzC6AZE0tdx3gfIZD+P4wDYM6f4NAM753qLdO5mb5HOLdLbF8dhc8H+
qO+nGjr8VGMHXusxwnkRdC9y2myR7iiLJO4XxGJgmlGfFhUuqlvyZNskR2Za
OIemAgHO/2ETZhUbl9s282TOhPZrTuujH0zHjWXdPgt8myxIGjxGKfPyC7sI
+V0We2hvQt3lPFke6lPeINlAckADNtemKFjfI6obijsB1HtZdXdloZ6qg+Lu
8tpqBPU2Rb1FUU+UJUltP+s1nWrxGjVY1yvqtcfrKqvfq15HnJZCM0fh+E4n
qE79p7mUF51ZY9JwdoBekWsToBs0QK/I9cnVuP7qMq7TV86144JqrAEV5VqG
y1uD4MwBOifXzmWAHZdxsU7JC4h2VkTaBdFSyQ3y0Zxu5hFsFs4RmheulOat
66HZAb34UYhhIVvscqGe/sJA3bWJUK+Z9l4Nanm7TWxdXvSODMRliZA7dlfv
+41Xd+CgV3/oEEfvRpsbK/ISx09knnnkUaa8RQtWSSa9lEbSWrCSnJjLDxy/
OyfkkOK92ZDXBpCbKvNgIxes/JOFv83s2v4s8PZL9r4rcxJbbJsI1n3juJ00
ClyS3fTXngTjHcL4VGd/wDivXzZEjA+pACfWZ5R1o7xFbVvQzYo0ojy3hFgP
TfrjvsgpbYck4As4xaWFIb+tNum3fZwkmJn8UOaKKYfaJioVaohqZRfKenye
TyyKLb307M+XXnru5xRsx+fpfYsT9hTopWNxIZuPzcPy+SRdOjav0NOljHtM
bgByI8Db8W0XWf0b1Bf5p12EKl9kAbKoebSFoRkW5wvDkhbX9m2ZSDWFdN9A
KDHeH2oIlS5QXmCAfj9b6VKbkiffSrWLhFjXCD91FzYG6yTrIOFOqDv5mV0E
O2fNUtJeMtTOlCNhBui5zqWmOTP6IQlz+uR0SKwD9M76NEB3vVRtF55ZAdar
VKdXCOct5e2Zpx97Fjp9Ged1wvnu6iPVOrJd9wzkvzuhEXUseh0H4g0G8Zx4
110fvPuvLt6dm413wWp4y2yFCNuzX3i2hzaT7ZF1sx0Lsc3TptqxgCsiOKEt
ubRWzYlvs/nwnlAQ7w6zXXdZbDdYtuuV7UrD9ppBfL1sr71ucqSSJQ8ZuEMq
WQf2qy4/QrpccG4SnP19r77u73v9J4xz60o4lyrO99j1kpdLcl1IgFfbaswR
rVv84sIDmZ3AePtzfsmeg6hg6eoBHXbNHsyyGLdVaSIZMypIi0+myDoAc58L
kvHsv64BzpVNw7oHLcszsB4YZi8yz7OYRAD1yCvZmGVtnMhSOKHp/uE5DNqd
OT8yLU2WQNhqcF81uEhzRrYAoLKUjjOJeUTnPGCF0ZEF2l8ATRNMaUAojjDQ
Oc+Nzwns+QZsP/XJX2DeGbrsDDM7hm+pIjzGpNLVo5ou49SZps+kVi1FrSkp
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
Ve4Euk+1SXcYzX+SDjWdPZvU/amSaa8yHhBm/2pZD0jwmaZOcB51qFpF6cim
DE3Ahxi2g+sulBm/XXRGDUHhKG0jwlhtVLciBm5HnPRvRinRr3hR4jjVrLm7
jC9Hot32LJYuqVaNnWTVXqy7DxPlqgA2d+DAy8HWcJqCqM04Fbo8QHWMScal
ScbPR2gVzsZ/3u+1nWw23HgV4VzMzMPZJp4/4uYh1uR9mpHls5E33lyA5hjQ
zAm2RD/Q3KdojgDNXW5fZ8eKn7e2xgTjU0895TYDxq3rAeON8zGOLIhxzaIY
J5aKceu/TYxHbxTGv74SxtxRejl8p+4kfO9bKr5Ir/c/9MFPpOn03NjLL0N0
3XbpP9VuszEQ25f+v1rYaf9X2mn/PYXjWl2+rt9ee2n7w1+b+xssfd1QekOV
9OJeOmt9lPbSBSLXpDd1HfS2I70Si39Er/fXnV693m1Zs8lt27DF7QCvTQBv
3QkA75Y4jPmy/W4/eO3+/YcufuFjvzX3rQdWAMDstQFg+McDwtYDlC9jgE8w
wI1NBHCGAGaIc8185XG+te0S/AXGD7+wNXDPYYmvPC4f3bwR1nPB05rstcv1
27a4IwNRd2wgVj6+feulDY/+4aWvfOaTSHD5xM7txmlNWElqSbF4tEJYz0RR
957P6KnGYZ9kvPCALz2w9KHNwgjXvPShzRD1m73tsdF+GzduMr9QAT2s5h+F
A63fdOpjDOs2/zDGc5B45kLIvPRQDzpTEwrEZsvNBwywb3nLZjaNk2xhk8hL
tRCOazc9K867klZ91TLDXF1h2BloqWrpuptxMxETjVmyc2HzSjI6qDGuGnJk
BrmZDquqqGipe0nZTtvqblIfY4tDcLVxVcmYuqpEHbLGkFzEU1ozNBRlmJYK
zdhLVrLu9aI9fZf+Aqj+6sNfu7R1e235VCPXuCZyntS7PGSaHDZSPQZEnzze
iFRThqwI32Ch2h3OFi6sf2oNCtqi2hdRLTabF7akYIasiC47zWQXcOIHoG3d
r+HOxVMXV3zxgQurn1wpcMcNuNlkJ8Bka7gjPe5Ad5fb29Fm/dXlkN52WaQv
PP7wN64d6TM3FWmvv7HxzkF68kYgXeVPUpHrDH/NH98Yqt9+t1J992JUl/9j
46nyvzSemvs/wVH/K2+XefsML9u3Wfde+ntA2cD50pvba+cKB16+bTinrxnn
/u5OwvnPzED9hdU/XbnWPYNJMXHbnZs5KdaNbnvHHqZ69363D932/oMUqP/o
gS+5g5QUA7ddd9SNU1KsHqiul8IWUt3IVDeeAqpPa6qV2863tF188DOfufDM
9/7EGE1IBzowRdgVgX/uUHdv+diW58rHXtjElS2fau+tV1+9tOG737i04ZFv
AM1/WN6x5mmjO0WPJ7RwNCFeP2BeQzIltxLxhEJFtWNcP8BnO+ChPouPd7yX
KCyNpLq+BWuUa1whojlkto/isQ4+0hGifJgBtYwp5AuJ/ErXmLqT2Bg5TPSC
7+ZF9xPxJUXksLXxFsbuqegTKfuWebKskA7aaOJT5hhJsSykAZc/wW8FDas7
gn2eMec1a9n6qiDVdzKrrg232Ho7xkFqcdxIs+o2CVJNh69wB0PO20h7yYXi
ePyVgB4aM28Vs/jmkDDPQ4Ef1kxxRIVqLFgX8VVOW1Kwxv7QEh7i+MmR8ou1
O4BvypPBaxjCdiPw3ejzjacukWw821F0kGkbgbbCF9avJqQpGcYJMewRBZip
npUjlosqub0wzADyKvozfJhjAHO0AuY+N9bb6w5Gut3+ro7Vb3W1S2wWitds
dNsMirsWoLjfp5hj802n+OPXTPGEOWQ0mfEHpCxM8VIgrl4IYhw0SqXqkB6Q
QtlsOZs1MqGz2tINvhSEMVHtn8tyfz1+zqCZ7ht7H2VC+UMa5dngBYH+aKMg
ygiy9x8ifeV/aTpZ/s+NJy/939shbm/HzfZ2DN5DTzx+qQuWQfPcmwcOXD/N
VZU0S3TOLBnowUWA7lFA/0xF58fp9esuee51NcD0FrezBjz3lh2aacqDUWQm
zx2MzIeYaa5HK6bBc9cj0yeAZ+Y603SKPHcWuM42n5Hj060Xnnn0e/TXL7S1
s+c2hhN6VK7SJaty/QubYG32IseOXXr2O38APH8dmZ7b/dQPvb7jx3FsAnea
4YDCeJL7RnFQDV8ZqLi2afJRlTsl4/8JbXBNdLgjV8TGb48PXALjhQWGoVAi
TJJhfPBSDlJTK4o/QhhLV8P8GW6kfzU8qfJhls1ZMJkSPjqjRiFZinO03dJH
Sqj4VwTMUmeKAvmcmg1EQHO2jMCrIidO5nrZwmWseaew9UQlbiTna3n8NlXj
XgKml7EO6YqUYOxf502JMHMK4QxTHNJjDyQZhrmwKbzuM3BoY8pMh+EOB0uA
56krt6wu+R6iG7y43kwfFvW1HRbNKeN4HJLasww8wUznZB7bSSijnfdwzR04
cMAhjh3P7Y4gx+VT4K7x3EaRLfZystjDbLHZZgcozhPFNhtsgBj+SYRxKoAx
ZcPySbSMQLH1QeA4OX5w7z78g87+/I03DI4H3SQyPNBvcNwDHFM27JfCbvNS
2d0XjMdRzW79ouxmlsRuxw1mN3VZdjGDzYOMbgG4eNEnX+6ljbVlnNQyhpj5
d3pYthpiRse2dDJb+svuGIClm9sPy+dUJ9idyPBdlQx7b3e/Vf5PjU1zO//4
25f+FYIzxOVLp7Zvu/Mhxm2yQPyYGYd/f/VPVz/LuS/w152btlLuq5vS2bt0
7ovj8IGLX/jox+b+6IsYhw8Dy9j+eYTiMI48SMBKAs9Jw19nkOcm9tfZU8xy
7gz56/Gf1Gymv3n/q/XAcodb7JD8Fx6w7Jbhg91Yj8LcF+W/5n688rFLG77z
B3O7V/05+Ot6zH1JC6jg/H3GmSx2ypjhj3O+q4J3dfpX+PKw4HDwBl+aSUYX
cmECFHC2kWabhpncHWgc0c0j6iyHjEHA/fKvqDL1KzwvpM5bYqjVR7FU+DWG
GFEYnnF08CVIw8Y4YabwnKXBo/fO6YFGjLCj2kZ1W3jZz5Qt19ZZL/9GHDX/
jx8P8CjwLxWQSUP6qpxz7BNUGe2ctLfM8sOIj04Gj03OGHku6Q6hBk/d3Kmm
eQcbPCd4cT3KJne9TDJfY0bma5Tc9UwRl98L5ptrd5r7wizKazv+JhlWHUZk
zKnksZMTSMbojFzjolqV7Y7TjU1jWV2xsvB0ZdEhg+0YVOepF4xozuNZDnDX
nrhrodrCDXMG9ghCNdtrsthJNxtPUF745b17hepoBdUQlvt6gepud6C7s+4X
na//ch7OWwycMTTvkvJyAGcJzYJz3fs43xCcqwOnsvzjlTN6rsn7WN8OrMv5
xkaFNf56S7FOVGAduxLWq3/RpYL1E3I0i9PZNW4HJsLAePuBGns897p9u/cB
2fv9QH3QCNRovI/6m+akKlRhIgxXExjvU6eAbKCb6s4tTHdLKxepnn+BjHeR
ClWdvvEmutWUYCLbi7zyytyulY+h+S431L7g9dXXW4z23XRbXv0e/8Al4j0Z
mDWYoWTYdCqHWc10HjQhiTA5rVGULpKSavTkLpLlxmCEYZ0Oo3GDOLGIvDdP
IsOE2HnFN5/fsFXT5ySKe8Ts8zQKVqNM+HRIorZ/koMWneBQrSMTRkeJOTrh
nMKcmiyljGUSa9mXtm961j/34Rtx6iZbyFqrrk16nxJ0imO1NNfmViFs3HA7
q1pIrEDvCGNt6fn9gjQ2kYSkPoUnXvjSa4QY8NVzSjx1Cpquti2OUq5apbvQ
ak8XqcSs09fwmJ7Kq/T1cnOv7E7kPW8Q/PVpTl8rr019JIQvl6h8fOHbMOJb
brHdz2iSHTLdnMf2MlkC2cMOsCInsxHiAgCMEOcJ4qSC+OKKL37xwlNPPulm
oibE/T7EvRGAuMsd6OpY8fM3WiU2rzj1o6euhuALj3/t61ckOHWjCO65IsEG
wHrnfCWAeWCooy7V0TUpvxXsOiB2TIhRsFdNsHkWSy7MU9FZArOG2Hqf4mui
uGoxim3CtwpBRoRpGRDfWIZTS2B4wGe4bx7DgUD8O3VnVq93W9fVUMcIYtwl
GbCeHbsJ497dZLMlED/gDh5AjA8Lxkcke32MM2CIcX2Dm24QjMVmM8bNgLFC
uZUrUo/+CWIM318A2fogX2nfJWP71bBAOTU50ttfbti2mU5OjvYNYlUKu0Vg
bcNhvwnwRJU2eyIht9fiXApBWW62hx9/Go3PjOTB1P13s3L/HSfDsCCFkyHL
xSGBWG6/K5rZsDHNcODWDnXNvRohyDMQ5LJ7nQ8L+VMQzJ5O+kzNNgkbhy+U
ESffi6MDOPGFaAKl65FUdW9eIHclpzT0uKBzqvgV8M7Kb9MFApSlJpf/D6rI
RI8W3QMS5mlCQe9s6TYQ+Be+4+Opklm2phS/Y/qwBH6vzlGFXk/v5EUt1gsU
jKcrgaWKMR1qDgI7xcAqWPFX7OLEMuQ4NYg0Iqxo6jAPOppjXvGlQJfRIqz5
BWCtNkFl95zClSFcEdq0dZ8BbEKAjV9Y/eSTXHciYAd9YCHgxsE1x8A1D/Z0
uv1d7alFKO1enFIOtldL6akKSjnYLonSoQUpHbzFlIYXolR6u8IyHnBMTxbT
iKpR3e9UjuoekVHd7zJAZ282oOEgoFwDtvRVdEFC39uA1rlvdvx5IJrSuYgW
6fFAY9y1uZaMcU8tJq32CKf7Ln5eR9NDbhSMcexwHXOKPR4Gp8l6NsZ+NG3i
pNXp00Y0bQFGH1W1YPyXAaeOjNPuckud3bjb745Y90BEpTkEYIqPgCF+RUVT
HvRH43dj5RM7tpVP7NxGW9vje16iehKO+gNOl/HJiIpGj2mVusrwMAKcIVSk
Jg98nMvpRVoFnkRgORxCOYxaxiChsJ+t0vP+iFSAFO9KnKAuBYGUxhOwmh11
PILGE/B98egm1SU5eloYeWZChkidkSrxP46r0hLZUv98I1eQmTb//KB8DBwq
pnXx6Zx23P7BKcvRYxEqfPAkH0E8J4c3+D9+zkSbnDDjTWjPEN80SkRmAvH4
PrnlmRpRgWgcyTmixuvK4gkD1HzpB1seGiJpKodgrobXEUbZb6A2UlNTBbze
XVBWy2ukLNURu9zc2Gg5XhQiA7ZyMMj0qlAmnEOK5AJZ4zxC7A4FQZZqUimD
7ZaldABmtMYZ68NUT0JnXECOieWkyfL4wb17OVX1l3+5AMsRSlENdneudrva
rdRCFG8yKN4xj2KItg/fJor7y/Vba4TgATyEvHSKK0rDuMFdIsWFW0yxrWLt
2B2JcPkyCM/eNISxi5oSzMOqDDyuk803n2YOziEzOOMygL7rckAjzrCyCLRz
DSR7J199dRGSuzTJEpafpNc/ddE+t63nNo+uzZir2iEhebfbi7kqCcnf+sIX
AeaDbhSAjh1ioOME81E3IUAn6aiiDzTBjJtcgDnb3Eww58+0jB+ueZ4ePP/N
85v9Fq2OTgWzWwILbdxLV65/oUbG+ulBYATzGJ1X5Bm8APTcHz/0lXLjru0L
3COrbreZF5X9FkwaLcDtHujncEwQ31ulC0rUhilzgkbUbAGLeqhpyp+jL7hR
N9SpDJXc8+6oS2XHAl0fYz7eM3JmgHozqStCXKwaLaAOMzJXd5mzBoIeWhln
7uBUd8cHGB8/F5J2SU2nXpJ8shxpnzR2uNReyTmod/SSaT50rdS0buKQ8R9S
LFI5qUlcls3lordlSB+Di53RBrhsp9FCl2ijq9oqVbbKG7FUJ9ZMUV07hVM3
h2l4ruqQjnW/hXaagKUqEY798QhWPqHI8ZemBaj4S6QWNK3ziMXPidacHcRV
uWef1YSwGkdW3Wwshn/ChaeeeBxYHQBW+5lVdM+93W60B1ntSFfw2XF5Pi88
/lUJtjeOT695z973CJ80UTd01Xxqw6xmfN3hfDrGQWGDzX9jaGauE83y1k3P
LYJmpzvQ3fFDM4I+uPq1lc+6res2uu0buLmqe0ut27NtpxupRUL3YLUHCP0o
RdCB/RJBDypCjwihTCnbYVXxOSGNkk1u9pRPaf7MGTfP1Z4Lax79HhOqKj4B
QnUSChslcYD9gHW/PxuXAI0qQN3xqJ6/hZCWG3fv8Nymk+5kPONXfOhCdqz4
YLPzMml2LlRkobgl4xz+BAFPOvdPOSjzZhl9YxQbY3bHTvCKV1uOFNLZhVFJ
DFOdh1LFgOr9PJbHmIDNiMqv/gWwRufzjGGAtWmmIbO+R50173nHGs9625Wb
Uon2Sd0uweyrpkyjj8JSl7T5U3TE8IrPfQd7v96hj7jxcVRd00iLyzhho79C
eV0ZbUspKH0kwSJIbX8aR9jorxAsqaY2SxfrAp6cjKJRDOB4HTkEjNOMCcrm
xiZcc9/942/jbTGeg1ziXetyBkGWsrkMpgOvAGaOoLRseq2qiJs5hjPNcOIk
3CxWd9IZ10tlKAdVTKaR1JR1L7wmhdK4UBpDSi9+CQs7GEDB6KYGkNI+oDSi
0k+r3Z52K305PmuBzx0BPi/88Pcfvk4+myv5LG9f9dT18Rl7l/JpB0IpsWmp
Bmfcuv5KbqDwu5t1KL3NZGI5dXxWhU+0teMLXKl44wAdvQpALUd2oUPIqIVb
0CYrhIzq4uuiqBZvPKppE9X8VaPapVGViLqSXu9zW57eQJ63Uzxvz7YdEE13
ub3geft27b34+d+QaLrvAO1JYwfR8wKtSOyRozbian2EWhtT9T6s6uSBDqZ+
Refig5/+zNz3vvo1grVIsHaI5eXrYABWG48eWB9BVvmgvhzWH/aHzesJOgIr
90Dt3eeOx5Nef1NTuWn3jnLTizv9DFMyx+f175Fxd+q8PrdCzVbMu8MWx1nJ
GJfpzD4mm0LSQhEcP09VV93yaPEFbtWBdkc5u882mI4NVp5KEGhp/t2UmnGL
lOirlrmvWQVW/9oJAeofJqS/UNzvemVrA1DycSSh1W9KnDXP8Onje2Oq/0HB
GfKnyvKikEr3ntI4nJCyuD6l+M2RI/fsbj8Ir+MyDIevSzRcLmeOPEUqUMkO
Fwl1fDjx/uOh8pnGRlyYF+LjQI7fHEEpInh1/DyROnqPdPp1HMFzFPAEROF3
Ip7hIJppXNiMCGzSQMoso7kwnoVkgvGMm3hGEU3q6e1ua2E8+3vdOHhdwrO7
Y0X/G61WRnG55opcQhT9GnEZXYzL3wxwmb4Ml3nmUpvcRbjkE0E9EQQTH2SR
frwT/vrBtNQkjQXItPgyiKrFyLwZYBqn++5IHGcvi6PlqMuU1LbzSmBaxiwM
ypFjpfXuq2HTMuAMV8JJbNqYycUDYUynWjeVz9S18Anhs5/4TCzAZyB8fmX1
z1aj4d3kdmzc7HbVbHV7ttYCpjvdXjC8fTv3SPj8AmC63x3crzA97MYB1QQY
3sQRNrzJY8eAU2RVcXpCn7pVrHL8PHPhmUcelaMBrwKn7cSp16EuLjY7IiLl
BgqgatoNBVGLx9At4yvVFKvGROiJeNKv0oTLJ/fshLWrfGrPLumKyFIbIp7A
VZmjitYIlTmazZeCmSN0YoSoLO5esnzbi+3sZtFmWF+75rdITKibUNXVLrql
SXJLNCreptcQ9Ra8o3es06qNT2BWqVaMYTLmTZ9b1+PUlcOdVSRbjv+exliZ
al1nGffrLBPqoYCz2KsF1ml/uqv/ueXvUY3ZNfj35hN65PT1+/QZ+9/yyIQM
nJtk/0tMy0xn6jOp7JtgluFX/El5Izi8X/X++2cAaK8KHDdZ1UizeGJPtUuo
eMuxNqRzSYQvDsfwKzM8mS6HU+eQ4+WBpNJwNmcklSqIRjecAZPJOKcF5xTl
lnDXyjzHhWdi2c3EouMv/+VuLrq+uAt4Zisc59xSXfTNjr9eOsMQar/KFvjG
Mgyxtu0GMBy/IQxnr8Dw0C1n2NGvml/rvQHwyPsAXyfA7puv/8iMxR+l4wCt
YJvbN4Bt3sS2OQK2uXfHLuB4N3D8G3Pf+rwfi8k2HzrEHB8+cvaNXS+O71u9
evylp58eP7AG19rxl9eus8dfXrfOumv85Wc3eCd37qQGxRygnG9uHj/8XI1U
V59XGNvIMXxzqIDTRVenIclA8XNAcC+T3Ev3pwnFd4tzjrFzJpoTeP9KeSWS
zOfpK6ZUVZVP7t1dPoVr34tetLnZaJqghjTVpEgrj5eQ44+YjwXgma5y4Mhe
SB/Zk7HtVMSx1bQqNReWj9XbMg7DaFaUaOuYVR79nn9li3BrOX7ueJwdNtPr
KP87PuOb5gl+229ZmIe3lGMmZgjbd5Q7Jlj1R9OWuhEFMWVXPOP4UIbMqCrH
60b1jQnlERnl6k+lUW450OBvdjNJrgnTTCO2DJWi+kwRzHFTk8VUOmiWdUci
Jp3gqes1/qSOD9tRIWYCM0l8LGccrPBYrgBcnrDwkE4hjDDi0Tp4ll9Y/5RB
YCaLBDJ/JeAvLJ44bTJIHYhJ2JMXgD9mMOYzGB2ENcA11Md/6CYHeoHBHjLE
0R4yxH+9CHzd8+GTIPougE/alfb5R2UD8IUq4bMvT17p3y55ZjaXJzSOT/vk
WY55ptXyo6O0Ao+q9O77AAqA/QaAvCOVILiK80Z1LdjDsG4j9zCgmd1W6/aC
me3bsUsC4Ofdgb3IIOdzowcPAoOHgcE673jN88to5OTH5r770EPas+ax0NJ8
Roqgj7qFVvasnvKsBFuXalUo17/wHHfj9zBsI3TTGN82Jv2BNtIGfoVta0Jf
ODbJR99sgu0udZu3ahDEq0IBuT3l0/v2eLHXXjPnuYlfDQczRHp+TFkaFjR0
RWOKjH92xri0BLXqD5QZ1lPRuQxT0afvQxdS3QxqUVKX7jQh9qyQ71y5xYGT
PnzE/VcKv5r15gRy5o6aDWQiOZdcQ4RYtV9E0f31s8qWMoBYO4Gvvz1ujlyT
g+Vhnr52nqavnR+dZNTUUrkhfKVsEPUlsBm1qS3hg8ZdBEaBhdJDlBryEpG+
8mtNTbAay6+BBZ2hCTAlvzlBoCuv/MFj7hSlhYrU31cMI3TEHFnRE8gbLckI
iRWthtcc2NGcO5yhZXIIf9IQdiaU2IKm0waBKbGhbEGDBEaFwAFY/Re/9IXP
0x+Y7I+4CcoJ4R7y9VwFdp0LY3fhhw/9vsYuStgdulOxW74U7PBJ+m+Sudmr
Zm7szmdu8hqYW3455ijuDQFwNwm7x82g94mA+exC87mFzSfR9xEJenv2+ubz
4EHO4Bw+jPThf2HuOw8+6DU+v9lr3PyC17QV1rat3slttd7JWljbtyss4XuU
a2627r744Kc/zRmc1lbAEtBsb6e2A0RTYTnU3YNY4hOopxd+aHRvdkTQ7EUs
Bc0BVTUxLwX5PtvPGHIZT4NQsP1gKqGKJqpwggfC7/Kir71WPv3S3vLp/bj2
efGW1vkTW9Sh8GXwOkwHw/WSjoTKS7WRWxl6qrrpbWqjd/SNIW9TvoITO6qp
Xq9RFPivDDPqJ2enA95QPpNNmsQ332GOTwOj65BRtrDiRFXngCOTv40CiMrI
yKQz5USNo9tSFLGFRfhrLSMW5TotYHFKmJxQXDrcWHCOr+DBocJcIbH8i+qD
SFJvHoJohRFJsp8zMgBtmgboTIvpVI3vuE3HV5xs+JhRKCna2oWGCE6nfBrg
ZCjxrjyNJoOZQ20AnngBVw6nrmg6sxQRM+xJ74LXtIFnSvBMwgI0k3HGMx6z
kU2gPhsbVHSCJf1zqkS8ceaUG+/tcmM9HavdrtesnMFlm+KyZh6XHBWBy8F5
XNbdBC67FuFy2ZW45EENoevDct+VsaxeAMsRhSXmCa+CyYmbxOTsNTA5r0w5
HV4qkY5JJHoKP1VqRsr3FJK/sVQkKVrmYtErMUmFSwmZT9HrA3U/A8PaToZ1
M+VqsOgBhtUPl7v3gGHdB2iq/gLaJ3r1nHS5sOqb33RTR4+6qWP1broeVkOD
m6EuPe51z0qnXq4Zix7NF5555BEuWr7yiltsrSh6UKdelzvU1Q1YbiQsI9hd
0Gd9QM8BH9VnRLnpfWxQ+mmjZromyWNHw5KxUefLMu40XdcxLdd15HSTAWwf
vVhLK/Z3HXgJfoDNB/bzAJWcn7XRN2qdM27UGoZnYdkb9nv4eJRKkMwSX93B
fJpALmBk9Q0AUv3Qt14TJja32LxDFz++4+dwVNFjmg52E42KXiMe+rM+BcBA
mOQuWEu993ZwwskYDwa1TTIlO4qtjKZ5HaaASZhOSA/euWE+sj3BjpUGteLr
8uAlGzyXrNxysqnc0nQS6DxJhNJwMkrdODyKbBp/INPYug5A2t6Jg3UWteAh
iLgsbCco0gyjMCEZ0hYWGwhgIZW5EGKI923Ms65oWYXENKjPpNBLJYXCuFAY
MygcBAoHbETQCo+/vHsnpSb37dzmxiOd7mBXm5Un8lZcjjwOiIuRV3PTyUPu
KCReG3wphq9KTy4y4EP0bJ6mANhBqBPwEDtZNxg8NRBYDn4ahz/fywiOLI7g
+G1FcPQOQPAJMwauWHHqqfVkTzs3bCJ72sP2FEj8yNy3PicxUOxp9MABIfEQ
xMDnhMQ/ZBKPHnPTSGNDPZAINDaeCJJ4GmnEgsVzPDespsa3p5UZnU4hkZvt
iMReIlFldPyzX2P9cqxEto7j0bgaJAbf/ngK+5IDN1axR53GYU5CIh+ypmxO
QU0DxLz4wZfg5dB+tEhtHVz/l3nc5SJCWS6qg9dlv/7PWZ6SMfsTIx8O54a3
h42Wu5EJfQp7eFLeInMaaAIQLnUTAJ1QNrxqlYbSCgN0Cjw51jEuNFUZFlaw
4o446iefMa6imFJfE8gcf54Xzdgsw3+8jG+XKR9FFQi9PZyQhE1FvCuNC2xV
CJiXeOsXBBcvzM40Uf+5QBbsoEPSjMUuFPGayhVV2gYepBOSraFihI53CFoO
F47MzoUJtlAlaGQ6rY/Ca5o8Z6kCNa/CczJuUcFtwM1G+5E2NzPY56YHegmK
lY/9QO0DJeKtfm3lWuGsRjirFc4g4v3eQ7eYs67LcHafRLwlc4aYqflBCJoU
CBVnYjWXghrFPAp3Jb5f/Ro5G7rVnM1cL2e0yZsOVPwgtl0taUPXRFqINntV
iBfCRWtS8JrIeUuj63Kh7GoRy18dYhLRVtPrt92WVesC3jKytfbi5z6M0exz
7sCu3UDZHncQvGV0P1AGpDFlG/lP/cY33CRRdhQoO0beMqO8ZVMjUZZTlJ0+
fbbvyBGjNtHiFtpauZ2tHUmTRChStmWjbh0f7sHV645EcPXp+kTlSeZxpIxb
yP1LJaQRxriIESdXE23c0kYDu2ZoYFeGptxm8+ossyRc4Nc8fezF215H7A7Y
5dd+ctAKeb/seENPyTyPFfoFW8jpM3P6ADaTBxrJuZmcMaPJe+Qp3x6d8j3l
6CSVLYQokzdpVpWWNxthU6UENRP6HVVK4PkcaghlEDnV1iKW0TFSKWwQjVTK
6JRpGv1WcODs3Ahmkc7Rv/LcsBrwQbx5v3yrH6ziSbSL8BADwuB7CMxJS/gY
/ur4J5PpfNV00ZiVJ0c4zBgnSRbmUIe4IjJYIFOZBxDzSB/m4jC1AjQeh4+I
RDyvHEARMHxKYUgQIoppdpXOeN2Bl/GLVHerptdlZ3s7WoU3Ys1NDUQuPvD5
z1584HO/A/axtXB5yCCU/d4tg4xC2QKQDd9JkEFs23/LIHNMyDiY3WjCphcl
LMS9YmUKXLeGq7A0e47IMia2v4vQ+iKj9aQZxn4XDONqt/3pwMYMCPvw3DdV
GNuNhO11o2AYY2wYvfqNBmFH6ogyJuyYm1GUgWHMAmW5U02KMO+nP/4xHx9e
ucottLSQYeQw1qbTJKXOznL95g3UTjaEK0iYjY4R9mi60j4gkPnHic0UpWrO
dnzDuMydTMkMrLQ/kwMAc2dp8RgsnGyYU5R5PHRSmcYhL9HxRvm1w4dQNYcP
wUvdT7hkwB3aJRqNpTq0HbN4YIWMbjMDMkcMJGdFlFOk7Miko05XjE6bgc3H
jtBaiBz1HnVF84wpfS5pIWuIb54fM6whBbIptRvDW6HUISakaRLpgjXOZOFo
quFxgyYHHaGXgEei3ANK342Z0qgQhtbaxEst7BoTvDD7MUSeUQ+qko5q8o6Y
EjmMGZEC9o0VsDKQD0CVzeEyoYLXTMaEyjF48lobT1xYu2oVLsuG1yetey6s
WfXkhTUrn7zwzJNPyHocGGthxgZ7kbGzb7acograt7/xMFXlCpqutW67bMe6
fbou/LmKXwvR9dydRdfgTaBreSVdZt7j1uIV1k2dUyofKb0uerKM7MTW6T5K
PmFA93cJSoEDCDcMrWGNlvfLvv47HS3HRAu+cN1cReZxJcHraXr9utuyeo3b
CfawayPgtXkrB67PfNbt37kL0NrtDu5BtNAeEl5e/YYKtI4cYXtIaB0Te9jg
ZgGvnMbrdHn7E0/w5KhdPwa0zsBqDRS9OaOo0OrGHD/vwejWoF4peHNWcbSv
X49vHBsY9IdhROPuWCxu2UgXGoW4HEZIYN+qBiysAVMGEavf7BAdfThwlm6S
mM1xHMOZUp4ijA8WOWIOOflBuX4GrarccuQnsA7/l73PP+sl3+xhp+iNOTwq
4zwdjPFP9er0h2XmP4yEv827MP/GWXXXHRfIxU3CE0EO6hiwTflZDGlblmYu
jGZhAs7IZuCey9KJet1QMqX8oezDlpklbZ3r4Og1iViFiTMkrMmdHaLbby25
cm9mHma2HMid8YapH2xaHc/FvGJRV7pV3zPVukt6IlRRN4UhcwVK7hdscYrY
/TzObtGyg/g1BPGTSvdINlsR3obTaQpv8JfhhEjSLWEihJIhCfhTi8k4PO4x
11hIRCkZko8PUjIkF2MHmRkgEr3GOnKa5U1rVv0N0fcppm99gL4Lj33lKwvQ
d2Bh+o5eE302omf9xg2EL36z4StdDXz/ZW/Ns//c8Je7Ab7u2wjf9O2ED8Pd
1cE3fefC92EAL1UJH9XVisnYwvBFF4bvuTWr5AiehMCv8v5tzXrav4HDvPi5
D2EI/Izbt2On278LIdztRtFh7t/nxvYjhOt9COsOE4gpAFE7zIZ6N4sQngAI
fRDnHn3ooYsPfupTbuFMs4TAFreIIZDK3JglQRI7ysc2r3c9v/crkCUhEvnO
AJNC+AaPDURBG5Lw1ydr5W5qdzJu9EyHgtPI0+Y1t455Oh7lkau8TU8CIcpR
3SMQCt4jwE3UI5wm8ZKd3eXWI3Vgu1pfqQM+W185Um49qtYr3ln4J+pDROGF
cieI5shESCVOdDKFv4BwjlLaUg/+JeB4T2feQzfl6pvbHX+CPyEstTOhkYlD
Mzk6GYBxUsrXCsawl/xFf7m1qRFWU7kVi9FBg6n2dFQBIA79C+HZdCKVo3gY
Fh5TBpnqRlr4qXjDISLSMYmk9IhcKx2WKRV+MWCSfmoKxiqkD2+Exx8vUKcI
RNVkuSiAL1lGEKtvmUoMOWeCzYfEocliAliMKxZtBNG6S1DkGJhFDNmNuqn+
7vKWDXSj3iub1jzxN4sjeOGxL39laQgeuQ0IIn7Xg2BVJYIUCqcyN4XCsneV
FDomhZYMRn0fwfckghIMn6HXL9f9bPVa5Ugvfvb+D81949MQCGt3aEca3bOH
HGls/36vfr1Q+PWH3eThw0Ri6mgdUGikW04wiUzhibO9hw7SdvTR33/ILTQD
hWfOEInFViFRUdjOFJY6O+XMEJPI6ZYI1b8511Kte77GqPo9qKvf49EYOo9o
3FpWXvno99yJWELbUqNkgBUDvlU2HBwyzGfUca+fKYDHn6YquAwcVrmXfGBn
qOf9l2Xev5o77N98ZQz9p0t2hnQvGDJYbjt2BMTbduyVULmt/qgVLrc1HIV1
TFa9dzbSJ1ZVccj2tYporJZRvaYNnVQ31Vh8PDXMPSIMHveKjCB6mERxyq2N
jUJTI/zX4dVGsHgzR57yHI/89du0hhgvQMnAa0zSKsBUCKGyVUoFmKISABnO
YdvEinMs2DhSUGOAES41vdDie1xDqp9ZYYZvFLAsQKjl0XniS5Z4y1EVXBtO
WFn0nFngCEhTnMFKm6xx4gVAo+YuxqyUwu0egGbdQ66zCI4TXWdBOMvH+4W1
XmAtAqz1uKm+rrnvfPMPLn7xs5+2SkyY27JqjUnYhcce/PISCPv6e4OwDy9E
GM1Om84Ur5Ywi4ephf2zQMU7nTKHKcOPFWkYjOE1RPGrhReCVmUyNrx0xnDj
FmBMJSyLQ1LPfvfjNVCB1+98Wk7XSRx7iA7ztD+9zu3asAkou5/iWO+2Wrcf
HOXArl3gKPeQo4zt2weUrWPKHsY4dog2dSkgLU2OUrIrDUJaIzlK76fba7lU
8PjjbuH0KXaUQFpRSPPaWoEwIg0oW8eUyRlYlV4ZYsrc4d5eI72C45LAU8LP
kXqXdembyt+cXrHV2YGU3tCZ/ctp7pjEx2omJ4BxjqWyoUtdVTNbeeHUOT2k
8LwMKix7w4aflAYvxOxtFJ6apG85klsZUx3MwU0dFxUYL4QN5AO4lduO15db
G3A1QLg53oCRB9863sDrBK7jFvtJ+FrjcfzcWCeQn8YTxNIJiV8n8B2kTM7C
BeYWnSPrirXtEH4shOHRVepBHqeKt40JFDTe8M8B8DidQikVwU5nU8g4Wmwk
eUYvZ1NGCTzKqXjDRoQDGNE+FnH2fUlueWMrGdLJFaofUE6FsiuUYaFKApXA
McWWzSOHuCyDSJVhyeIig5l1iMlq5jGbRh6JyWcNe+kQkB8SIBO00FZ6CGMy
agA5qH1lTnwlAdnfffbNMyfwz3v7E7/10ZKA2IogwtZOQLzwZyu+fPUgHguC
mAUQJdxVgHjaALHldoI4vQiI2YVBrDybbsBoGRdYVCsUzWHc77P4PosBFnsq
WZTYuIZeP1f3s1XPuJ3rNlz87H0QFz/1aTeydZs40J3uIDrQvXsYx3VrfRwP
HSQkU3UYF+sYyfqjUnWQbAv8iGt/9EOqNPx053bAsUkjSXERkPRaEcdWwrF+
8zr4lgCQ4AW6uuBbMiQWdFjxqOoOff3E4gD4r1HV3jwo7c2DcXciGvdxxHME
lGpJycmetORa0IKmMMVs3tw2k8k7fHPbjNzcRvejYl8uCGEWBDFbEMNZpIPn
ttnlzLemktcccVQzGLU4G61h9DpOV6iep77f83QxKJ4xwBHw54lNeHX4Bu7z
wMFy1TlsJvnZbD6/Tn3ud0Xq3zNpdEoG3qOrz9TvI8b8ooH63GHMgDra340b
mE0QfOg+x8h9jrszuDR6YSNvMkIfT1NxYRq/LdPSwow3psE3jEBTiy5/0QUF
nPPglxYQMjChf0awVWkDGkLWbAItDK85WFlawBbQVo89YZhIQcqQNU0Z7mbg
1TFIS1lsQ0NE2lBaSEvF0YnGyIkKbABaQbvQvsAmL93X5Z04/BL+ka8iYP+9
idl6wgyi3or3Dmb45DMuI55U0W+ZAk3ua8peA2mYwjxH6xpIc9TZgtvH17kl
8eWYfFkU2pYEV+ndCNeHK+GiMOYhWUugK1VBVyCWfZP3eavXAWT3zX39U59y
I1u2gr0E0Hbs8O3lvr1e/VoF2dfchIIMVvqIAg0hO8r2kkGbe+T3vnxxxW//
tps/1SSQwT6v+bRbRNDOAGQtrWwv29oQMkCsg+zlEJ1R7TI4gxVh1kYilbOO
BvyMirKXunrwPTGYCjHubnaALcWYXOnCZYNQ5aVoDtXQw5REUW1is4ER11V6
oIpQN2+zV+JDqzwVqYwGs4wGs0xlZR73OiYjX8sIGc23MwbCyhGYML9nQMaA
TSjAuN3YMs2hGEFLH5/xzaHFLckhA7Rx9oqz6Bpn8W8yS6WMGfjrzYBpnKET
RzOU7lfdXe50SdwhNiqjOQxJc/KQ4ITpEvaH8NYkrZJmCZ6lk9jrpW5Y4cQJ
woRoWZT5DxsGcQKAgl8tTVkOrWKWSgKEF7lE+oxAyxBho0AYLIcAW2YCRqUA
BdcQ+USJXB9kvhK4BoWvfjdPNrHXzQJbbBO7gK/O8uZ1q/CPfFQHr2/yto25
uvCDL61YElfJJXP1lVvH1WBUx69r5ipcyRXt1uzF4CoY8+Pnw0UJlCuRFTLJ
Qo5C7w2uincqV6FKrjB2JXALxlhJzIpdK1cSttbS62+t/tnKtRd/5957577+
yU+5PZu3iDesFW+4C72h9+raZwStr7qJgwcALcYrXYd41RFejNZRROts5MA+
Tvz/3lew4A3fpvzpJvj3FppPAVaMl4fNX2AOrXu97oP7vJ6D+9xSRweQ1clk
UUKkW5M1QguTIrD6+tTF2ZIYuZui1jiuisM5VAcI1r2RJ5zublykovq/KEGS
5vDFnc5S/bZ1klLXAlCtELyW6RPe58Qw6tq3R7XvEEJGqUoibRTRwmURZGFE
i27bQnyEq2p9w4+MbQWm1mqmeMZdiJnwzZ3kJoCQav0R/o39DIXlZy7GfXeH
8AxRlmKIHZ6UnmnhwZkxcnhIDzUhTxvHZ4ggSgwhQlXuJHw+WVQYaZRU9iJf
dHjSAfk9QIcatIif5YhOmFlRnCAfxEoGbR66+tGMzlJIpmKVJmU4nWRSHKKk
lCJKKJMftT7AlCTY3TEpfUJKD5DSDaR0usne9n/63S99/p/hjxwO4AGR54Ev
uRHAo/dG43FqMTxaGI9wub5mrVtqbzfxQD/b3Q3fkCvgcdvoKN25dOjBHvqc
i4Sa94lZjJh+WrnFiHmAiOHpINY6ev3di5+554Nzf/CJT7o9NZsJnD5t2Sjn
cPb1LZsvfvFjH73wJEJzYL+bJHAw3+BbtsyxIwROtuGYd3rbC5Rdr/3hY5ht
B8vWiNjAwpLXaQIHYgowwzmHkrJsQM5QRWAZFss20qOpwanmfZhgx6ZiY4wd
dlLhHLsYzbGLe8f37JUTMwnMticx0c69xZLfYweHI7OyhIs6PKNai0PBS38I
HvgBV/PhT75xwJ0teJSHIHi4rdhoNdbmrajv79L599Ggf8OPhCDcD42pjRJf
JGfJHgl1HxKK1ioo6G1/XIBZ+sXXu4J3LQtMs8MTzA4lFcawPMwIhRibkkJo
nOjh1HgQoWlKK5gIqWIx9QJrl1ZUi6rHWCr0EwsTeZ4xZ1G12Dt+8DCsn7Bd
ozy5jf5sGRKEH2WVSRvPZsqnCSXBCP6DY2zOeGX8FEOKnJqiKQkrwTTdTySV
xKHRAoqKC8Ye06V1nH3j1DH84/7WUi/Ww8DRvRd+8PkHmKMtQY6i186R99Pa
rW7e4KhwlRwNL8yRRJ/+90FatwhIE++DVAnSskqQJI0QVyRxSLrnKkB6RYMU
iEsf+98/EArNPfzxT7jdGzdBXNoMhm6LGDpgajcwtWe3G9u3143t3ws87QOe
gKlDBySVwExlhKls/dHytsd+YPJkI1DwCFCZBMomtDS7xVZGqtTWCoZunTuE
OLUDTh2dhNRwp0KqG3BCpKjnKYJjVjEjTj2+/YzU2MAAH3gZpKwCUBWNWdVe
PRG11x2PJ8TQJRVO2FGT1L2+xrGXaX8oAb5k8w6TNKsusgoJSjKonDoy8kN8
IXPISCrQzFX4GuUT6HolIEl/Jt7uHC+LBs7QRG4ePSNXTygE6Gsg9Sqhgb5k
hifl1DQwQ2Th6CaLYbJrZN/G/NIscin4zJJ9G1NWjjPby3xnZ7beEkWYQxgl
iNDLcSrBHyBA/8QpHIvD6FAqAVhiJ8eLiOKmJoAGvp+AFS7iqCjHVMTh5VU2
IZejnEJO5RVwZBWmE4SyjO0NvvkG5RAok+BzNZpJOYTVbxpYJQysYoKVBKfk
oHA1IFavD7jqBa4ivtXrA6sXaXvl+XUrdfr7b32gLvzJ5z4/D6gB2CHdMKA+
dJ1ARRAoxAn7CPvgW3kZnqwbBRR1VuRk0gfOtV0yWg4ShVgURwQkurOM+LoN
QDkmUJaRewsbNGmirBuPVOimUUSzh4/hR0asum6eikvlac1KlZYLxqmHcEf1
T1+4/0PYHuH2bKpxe2UP1Y/eT5IPsT17CK04okVY7XdThw5K4uEQYHWYsTp2
ZO6RLz94ccUnP+HmICrnGxuAKvZ+hdONlHjgtHeALco8DLW3MVsBrpitEWSr
2/d/oxEKVJiU6+u3lrtjuqSkykqSgojGZHJOHH94ygHCTyXBDnCKCJNMeDoj
7k/dvRjWTUwqBzGbxTYmGfWhz6bQ+RRbz/uwfbJUOnxERS4KVYjXMDFWhVQR
RCHiqVp40suAh8eCElw8T82IPNggxL7N0Q7OTxuMG+SMqSYhbh8aGg2UV5GV
0ojJiu4loi51DL3o6qo5n1AY9nMJGIk4v0Dujo0d8YPF1nxRjR+VRXlt5exy
ZOpyaO+yYXjJ2AsgY3O6AYihOmwKecEl3g7RSSpw4D3AhuqwMQYHgClVBKGi
QFMAaPJg7nIATRbMXaa/0031trvx7hYMQBqcv/WJ+bs/+PjHiZgIErNlAWL2
vtuJSdxoYsKVxPjpu6URQxYPPi+NUCwKXwM7jskOJd2oAWFYOzjrTuDHxnfQ
3fmt6rcYpmoTJj8CMUzYWgO7pHsXhCkfgKnbgOmMgukz86LQF5CpqWWO43as
XuN2b9hIBq8PDF4/cDWgshB7mKv4PjZ4CTF46cPMVYYM3uGzkb0vUpr8mW99
U5iC1QRcNQlTmIUwUuBFykKcAabWuKX2VlhtbqmjHXPfnZ04lDXIlI1Q4TFu
Hyt3rK8fvpmYBx+j9lnOg+vWWTwpgjhFE9yvt0xGkuoUhNg7aaJNZh09lJRS
ElKJ9a91mslJJ7scFpGR3LRT8g+MUBOtIgvhoResTPK9tMKSR/upUb65yGGv
NzRKn9lE2uJkCUWlcUyHlMYkIo36pzW0lVM7IPrICXyEFdRp+M3TOpcwQiyF
VFrbG3anvBFVRnWnCvgomKSHRQAhxojDD6YU6IWTC6aTUxcpca5BGTlLznoo
ftC/Zat8fsImP7LSxBG4NiAHwUlav+mOpCvBiVMEGkpFJQoNCjgDYt0kAol1
y5F16wLr1u4me1pXxN44hYEHCbFGiJbP4sfp+6qr59NSexW0HKXt0JJoKS5M
i42owE8eYOF0HQahICwW01JVSQvCAmtwacDgNdkpNbc+qbtbF6YlU0ELZrJy
gdNVzk1kJVTJio2gAPHGGdyFULE57gQw4TCj6j3W+8AsCEz2MsCsNqPMJ/9Z
TFzd60+udjvXrIP9ziZwb8DOtq3Mzs4dUmzdDdzscRNmKuEwsFN30M0wO97p
zTWcPnjheTfXcNTNwz+W2TnhFsDBATc2gmPdrc2b1wLYbIIg00bpBA40nchO
h2IHjWt3N8ZfSXePRiLMTm+fO4aLOlaBHqy2goEbVxVXhsc7/qKku6MJo+pK
A2kqO3/UUfxUjrwcjiaZAvc2o9xbdsErc6X3h3qBeNODzk56WXVfaxEj0ixu
qGcp8z3LWTr4bIQ/s+XmV7kcXa7/KdFXydz5B/5GgaA1RFGIzj5UadulK6Fc
KVVhZV6Gmn8/8jRN/z3fmRFKHjfrsFMjcDzJXjuGT0MDN1nk3Y1mSLwaUAD/
6omCh8vyUQoRSlVSUNWWTeW3KywbEYS+LUOtqBkN0LjAg1kD3OmwWUvishij
5YLRSsEoLmYt6g4lNUZYcU0MYMUVEYr3ys4HYk5UmbUOMGutdX/V0/IZMWt9
OuwQPn2EzyrAZ10FPjtuBD4NV8SnZin43HU5fDj08P7HRnbg4azp2bMgPUuF
Jz8PHoesWsjvmMNtz/vcvFe4GfS5SUbmcROIPitU9MH/uR2AUNf69W6kpsbt
24L7nK3g3GrdwV073GgAIcAHEaJEtiB05FB5259+D/8rZyP7XmR8Go7pCFQQ
hIro3E6jc4PVclrCz9MGP62cQ+hghoZht2MTRfdSNnu4x+/3Ge3tFX6CDI0P
4JIwNBh1JwZjdE5wL/5oY3ECaDKeNMKP7vhJy7kJymtT76meypTGK4P9Y/Lm
UXkMQp6lD1PgS0Fwqg7iVMQ1DB/jQvnBZ1WIEOIgt7ECOLiIJ+WsZjwNDor/
Lnp7uXTc+MnlGU4uMxOcbMYUAJszxQkfSbfFl02pvpyixoXYGLZp22+asyED
lAnfnBXInHFeuigGTT4LU146ZOalg/4MrVl2OVESMihJ42JA7nLHGA69RnCl
cSUAkicFkpiNhFj3CyODsAbInnnAR1Fn1CKweoAR4GOg0033trmJnjNozx41
s2ojPh19QTo2VNCxQ9MRuywdh5GOiys+8XE3W39kSXR47zY6HJMOlB21xQkd
2p69T8gdQ4gXICTovK5EyOJhZMUbP3rK7XyakwC9m2vc/q1b3AHZyER1EgBg
2b+HQTm4z01REgDWkYNzjzz4JQblWJ2bA1jy2okdcwsCS/FUI8PSDKBQ007z
IqAwLMOdHQRKp3UPZQNGdKdBxMgCSKeBjNYkO8apaPj/AioYyP3iDcMSp5S0
ZKOTZjZafJlDrDiqi1R6eIAUmmdElDiSOkNMZEeD+2qkZIay0TMACHyEN46i
0kl0dAMpXZIxrO7vtujGNfraiMxxla+RyOViDXU61OP3RjEXsIaODhhHR9HO
Ka5G9IG3mRJt53mrP+LnkRdIMfsdn/i98IbpaDdzRC4MUxmTUuXkvb47mR8C
VIYYHTxEUPCElRKukJ8GwA8LqgLKt+3oOwmEpBwZNb/+mcVFJxMYJmQrDdz5
NKUQJswEJBclKgEr7hOVivpESbwhovoNT6biDSyVDoi0IE2ISiD5zDHni2bM
mY/StiWgdDiAEqwVV41Sw3yUbOQI77rCsNPVKeuqSXofpPcsSEevG6T7fJAS
BkixIEjZhUFCcJ42opKNFNkM1equlWDe1qxzIxs3gXnbzOYNQGLztlPM224q
jSJIqYNYGj1wtnsXjzXZ+qffE4gMkDREDQBRgwbJY5AAotVuqbUZ1hmCaQhB
0vGIYhKHpLsAIgCph0EaVSD19mqQxLvZOj2AGMWsZXyOIRqXvEDFeYaE2Le7
dH5aDX2mX41rDdi45RROlCLI4mgNM8k2k6cij0e5a+EIVDWDFmemQC9EleKp
gEwN0VVOyMcwfW1YMaNvCKW3RxQtGiS+sKaaDZtZtPSPtFm2tMsYX7cc9VrS
KQCjyEm+jTIBQ3L6QDIBYW63Eb/GSQBPW7WwRgZNWyEcaLfJER+088dZJFlC
BTHJkGuj1lB8ydxNqDiCSgoXpZ6TNmLiUAbgI4oOWLHyi1tr5v70u3+MhAAg
g4THEOBRkjjjO7eIWwA8GJEu2vune1vrftlzhglwdPbZDzUP9gk56n8LU7Lj
2ijJX4mSM9dHSeRGU+IYNU/c3AAjaP7nU2LdZEzClZgQJf6IcM2JdTtAWWC/
M8H7nTsQne9cPzr23/px5Tl6/UJd5+pn3O71693eTZtgd7PZHQBOBoGTKHKy
Z6cbF04w18y7m/1nu3fWXnjqGw97J5/fQGVO35IxJ4UTzElRcXK60fU4mng9
L+3yeg7sYkZagRHFCexwhBHZ3YQBkk4AhEEZxRXBe0oBEzzfo9IB/f20xvvx
DOn4wCBuLbnZRrLNe6nPRk0Y8ds//bHJKqDwkpwApQQ49YyveUo/y9Q7ST7b
RvmTfRotR2wa6WcGDAxQQqQwL45h0+i94lA1EyOd/SPsvmSoVKXEi9pjGSjI
8Cn1HrsrR4qUI37K2FrOileH1fSBNfPwGu/4h0juQ8pp8Sp4lrJc1KkpOJD3
CnGrJuaPYR30cUBOuFPmHm2wXgHZJ2mB8EMofEofJ9xR1j2mj9Mx9OjpKOl+
uEL3JUP3xQrdZ3mzX5fqaXE4ZGB42KJiw7gp/Q2G9GsXkP5+kP6BhaS/0c0c
uyrplxueg/DQ0nxHSj99p0q/eBnpq2tsFxa8zmsN4xihyyv+agVPz38u1+sm
Zfum6r/yuX95/XdcTv+S79pEr79b9+Yza92ejRvc3hp/Uz64s5ZdEmzK+emP
m/K9VGlMH9pPm/IMJoOPHgIEAAPZS+QIAcagiBiQSzoBCAAGzU1uCTHY5GMw
hBi0MwbD4JSGOb+FyWB3BHblZJO6FQJglXp7kIIIdlj29QoFfUBAv58LHhzk
XHA0SrngPSR/MUzxBCCQQPknsUdQnVNLpmSmcFplh9E+pHCfLmlh1FZG2SY1
wDuEvonqJtOgg2kceDRNm3a8TXkaiJim6bfTeAprmpDgWe8luqTS0a/+JWDV
dLCLGAgbMwVHAkN3RwgP6qzHHXSwGSVEj/lQUOgF8kBDtmysuSaozU6BttFm
b0qYLU/O84uD3J6fpzPLtMcu+Etts23Uva3MDzmiLH1Ghgj32ZkPsPmB15Q3
+GYbLnx2ZZNUQ0zSHnuMqodjmYRGIkYwEBI2RgLrHuFhwPBBfcADsBAHFmI9
zMNgt5uDWJDpb3dTkRbr70jxD7ldT6+BfYGheHzo3y7Fd15R8Sh4dwxXH54l
A8HDo3thyceWovikfzrz5ineVorHmw2K6naD+YrX49oLwQGaN4KCcMXjfljX
yZdEQdVCFKDijRAQMkPA1TNQbuZIcAsY6GsjBp41H/4fWfHGU0+53etgm7xp
o9u3uQbs/xb2QIBDbDd6IMYheQBwOCg+6PB+QIFxyBIOhziZ1HDEdvMnjlof
BBKAhia2QR7S0Ew0gAV6Ckg4TTQMIQ1ogdqABKQBE7OAg40cwDcfSRg1SYBt
8lgkAt8VcEEhevaP98mzH3fKQAM+nICHicEoYoALmUAnEIvjzz1GMKiSYAK/
4ZScTaYUAUldIUwFzoNRhTDnyFUqVBjM4uxdLg4WVIUQYGAMqIY+TXtGuoK4
IFcRw25ymvQ2TR2SdE1xQccENVKdRtBrctQlkd4Q75IrbziQfKrPgT+1L+R7
IMf0QBggCkMSJhgCWrT1xe8idYwYPkhqfCUFhUqz6lb5gu5g9KMDRQw6vcVR
YhGbxKQgG7kMf4gf6V1zBttP0lg7TBE0SWWfBJqwAJPQC4BBswy4OIgLrKg7
ksI2E+DGQVysu8BAMSwewFIUWApRhiULAQM2zivO/vzU31WA0nsjQfnAgqCU
FgFluK3VvtmU2BIt4sxGUvFBLVlLYyO7ZDaqFmJDgkd+SAUPsUt3Bht+LVyZ
pPx8SshAMRXzDdRtZyJsMkH76uHUgHU5LPLzsZAwUsOOiujowa10DWylt9TQ
VjpKW+laNy50JAw6Uof2gaMCV4V0HDlEdOSOHlZ0IBywjYbVxHh44Kq80+Sq
AI1VbunMKcJjqJXxGG7D1YJ06H3ECLiqka4OclWjSAltpXuIkrGIOKpedFQA
iI2EMB2O0EGEwBbiBBgqcBLRGPLBK44LQzNyUuVOcYGPl99ZYusqn9zFpea2
EypECkqZzJSx8gyLh9HBCwYKDUuYo8VUsSTz7kDPIP9nOInKt3Fw4pOFbGx+
eRtwuS2C7IZDsgMWl5SX4BBi2Re09IkDsjeBmBCSoECJoXyekMgpl6SUzq6o
ilSOH6ZR1mqhT0qh2pMVW+bxbAK3zAmH9Hw/azk9KHoecIfFEw0l+0nPpYTS
c0Q/5vODnaDpdvBFraszb71m/fs7Ssmtt0zJCXRFt03JhSUquSJ772gZ23K0
fKny1R1Mt1G2/Bj+kP8YXpJ0e4LS7dfS3cCP4ue5PFzXs3YtbW77SMCb3UEU
8M5tYFJ2uPE9O90ECDi5nwWcAgGnScAHWMAkXljHUMCHKatJm1ssfKGAT/EG
l8S7cRU6FRLwkBKwfgzD6mh1R0DAI50kYPhHd3XaKF8cZgYCHutB8bKAx3t7
YYlTwaN+mNKEb2z/ACt4AFv7oiDgF/fATzjKXj7Ofp4O0oJ6sbsCx6770oWV
StOuFt+ms7T6PK060iTFL1Jvnr0Lbmx5k2vp3a1Wtkfv8R7XM65n9+gaW1Qw
dgHS+wVj+ZqW7af59B3S4xFUgoYPDw2p31nwdS3eo6rCnZfUQ9nWhSrdnKcM
u6VzmCxyztmgyLUjwWHd2B9RXvmDH+iNqyPpyxz2R+TSdoXGsSM8ATo/gr/y
IquBe9ffgNc4rBjtX0cr9D6Cetea74el9G5qHvXeRY/qbF9bXRq2sOVKpW/m
/P3gjhul9PqrUHrrgkrH86uGMwex26h0zNAvXeuohGhcPazJoCeuS+vouLU9
D8jduUqly9ypgMjplOxUYcEH+W3VvNqVsiW3nHeZ+jsD6t/Ij/vN9Pp7dT3r
17q9AsGAQBDbtQ28yg72KgJBCiBIHwIIDu+TXCZCwPtShCCPfQ4NdRqCooLg
dIPXvbfW69m3HQBococMCIZxIQjtCACsToZgFLzKKHqVri7tV8Zw6cc97E+B
A9j/8t60D+Tfz2uAMZgcxBUtr3zkUcOwxHQmB3zLFK5EgtrqkIhkCuSbxMQa
HVtN0UIRy51JNjU8IAE5Vr/KbjIRlNpE6QIBUzlcHi681g4emvIRZjQJgwIt
/G/Tng/xkImfFo+3QemTtMNyEIdHSekBHjQBx2hzK/nndSx1NLTkG27SoS9r
R78Gj5AWtNQ5LW+rzAx2YedzLHP8yK9OUcO20ntGCZ3NDUmeNpjobFK03VxO
r7j1TMJK6CUcOAgA6j9Om9CYO5ZW+iftYwYTtpv3zNP+EGi/JNr3QPtF0H5B
Pfn729xMb4t1nkT/QF3kmkV/8GaL3mKPE15I9NZVqz66BNXbqHp8wUQBy55H
hjhLVn1VpepR9Pj5FYQfNoWvRXxnaz/37tN+3V+D9rlhR6q4D7qRDZyL7N+y
iXKR0Z1b3TjuUffsAPnvdJP7FAJ7NQL0zD8C8sdFuUhGoEAIHHGLJxQCtEct
1z+30vXONMoelREg+cs+dQRs/kg7m59RQqCdn/vwzB/rwdWNrqfHJvFXs/Xp
6yX5Tyj5D5D8UQuDg1b1P3z34YdR8saKg+Zhkc8H9eMjOp6kneo0LgEAHbz/
2BfrQ0TQ4z/DG9a8zM+R6ha80PgcX/0UAXJY+9EUsOuhjycxFPDcMrpBgOfH
WHwfDqqexK3NjIfLIh8Tpi9U8ZsydkbnUXCY0wTdUaCLTb6FEdsiBieQOKyw
MsZ7aGXyOdq8ZpXkldQt3804iwkd04spSixixSpB3WpgccDOwMLHGLxWa3uD
Mh8DiY/SAmuTHmCp26DyfutuQ+MRWqTxGGg82uXmQeM5fL73UWJRnvFfXvHz
9U/dBJEfvQEi76gUuXW1Kv/1tx56SGzNVao8aG7CqO4wJ2JuqZzpKa7+H2J5
bry6/Sc4fXSrhF21mLCda9V04Nn9YZJ2L0i7rwakvbXGHazdQhvX+O5aNwHS
TpK0QdYg7fRBlnaGpL2fZQ0WJneMLAz8lcHAQGCi53ejzjGW6zeCrJtPwMa1
kSwMSBt+LxgY6y7evJKsW8jCjHaKtDtZ2mPduLps0jYIGhzMuM7SsLgnUNw0
KgPkjUlFcDCT6GAGxME8+iiqIooluCkQ+hQKnPawU5Q4Z3EnUdxo0X0Xk6In
eTrNG1h5kk+leRya0ZmQo+6EKZofPZVl6duk9TDqnvWfV1drFkmi2LDG123y
7S80lZ/0D2J/GgVv3FrtiJo9dYe1XHkm0jc2mLz5LKiqqKfaBoyEizHeRSUb
rcCxFb+JgKRepT7Cg5P5nMNbURF6RucdsQxkSDxJW9K78NVhdcMrKDsbL58+
Xoe5B1B3iNUtyoaF6cgB5UxGwJEMG65kKCHqjveAwrvBmXS5hYEOUneW1N1q
/f3VyHr/EmRdfwtkfdflZC3GHCUN3xnQNLbOsKrFl8cMVSdujKpDpqpRzs6d
LWx6ZBeMhzhnV0K3T9axGyprbpGxXqDXz69+61ncc653+0HdA6LumKnufaLu
A0F1Z4+Auo8ecHOi7jzuO8GL5E9wxrHYeNT1murL9RueoMJQiTsAeN/ZYuw7
Rd2UbexstXHjiXO/wI6M+eKmLec4+u5x5Ujgx6SVzY5kkhqGUdaOv+WkBzaI
Gl5iMZQyBsLpRAIWCDrJa4q7AahRBg8x0gs3jVl8nJE1THediSvBfHiWBM2L
7zp2J7O48uQ9CnwjMt0c6SgFk67xPfIiT2vLob/gG5dcxXskSc9P/ZEzqOxa
ERn7Fjqwdczr7aTZ4UjS071eXLenChHBAG4kn1WZQ1Q1/YbMckkc5rhWn9KS
Xk6vjmwj47hY2xbuJEndhi1RCo/KGiSFw28dhd0kZhNB5NjikuzDZ6EWeQ8t
LfLBDnAnbW6urxV3lb+6U8Tdvri4u69S3ANK3GFT3Py8xp7gpeobs+l4/zon
11XXy/tif9eKnZtVrK30+sm6yPpn3L5NoPnNG93BbTVudIev+eRe1jxZFUwi
guYzoPlsHWi+TjR/7CDoHTRP5aPDZFWw0l9sOup179kKa5tbQs2fJs3bmEWE
75zeXyq30tFqsd4/6I50SRKlGxwLar6nk/eYEVzd7lhvD6oerEpE25XJ/j6U
e79NykefMgA6HxTNR2FrGeUtZjxG2o+zWakSs5Igw0KL9W8HAFBjiKfEr4TE
r+ABW5D7MlS1g/JGA0IvRV/ABTElYk9s3nBO0OUuujcq2EUYLNro/ilSaTZ4
4qJgZP0KktujCxv5NZtzjcq9cS4vVClc0i2V8VHdWNjJJSvEu2wB8YbUK28e
lYBRvxBEQbYo4vQgrAHULioX7Ui/9QEQbx9KVwt3yBCuR8LtNIX7D1qxa+cr
dtfNV2zrlRTbcU2KxcNouG0cHFiqaB0RK4mWU+D0nmrhTVnvXuEGHrlZP0l9
86RbVSldVC6s6HWrN/DY5cYU6y+kat8LIu7ftMEd2IIi3uzGQMRxEXFCRJym
HeIeN4MiPgwiFquRE6uRr2cR68Q1ifgY7A4fh10i7BRPN5DVGMKFtZszoGDj
uTuCS1ftaZeIVfsOG50G7g+74BuG8qU9Ym+PxWYjxGajX+f1bErqVYmEB2V/
CJ6DJeyg1UBHoLJ7qn4j28SpBAvW8Bu4FWT92uIzJkHAk+AzJslnTFLqejKb
M9/DezAmMyTnPPkKEjZ7DdQ0ew2QclZtGwssa9AoH2I2+1VlKdHyE1VkSe+H
tF599apNHRVbslRs0WcfcpY+EI2bvDxv9PCgxMvqPeygyqXpT6lUsq60kINI
VCnjoKV7mAwEJprGSa+0MCULfuE+0W4/SlcLd7hCuKU4CDfWBZ6hE3aBmLpr
dbO9ZzB19z+zat3e9WtEtZsWVG1qnmr38aO3UrUNt0O1pNbeRVX7yPuqXVS1
nEm+Nq3imU+IXCBV7XEPk1TtRQV779UJdhAF26YEK00h8qh9UBJyINyaDe4g
CDdaC8LdycJNmI/bA7tYuIf2wKOWH7c5EW7+qHiGoHBhR/c4lcp94YJvOMNJ
uWGjhDISKKEEk3JjnLtA/XZZH+LdnS9f8g0TfRF56PYGiimTtCjnDE/dR9wp
2OlNDUbRPOgsRhx3eYn5LiFpyBePBsvhZ1rpDEsXf83gAs8wiS1U8JGjdJzJ
s46zrOo8iZQ2eGqhdvntvGTgnsbfYtPvDpOUDckaW66Q8R55BZRVQW29stSi
lK8SR5DlDBqZAFt/ROcIXoZ1gHTquwP8zcm7tTDRGcBDdAJi/gTF/ZjSJ3oA
1KbNG68x2niNpftJl6OpPnR/sPG6m3Q5nOghXQ4t8CDN+w9S6x9JlB8LinLr
wqJMLUWU85+mKEobFQnP/aAmT90oTU5cWZPeiV27vBMvvnhnarK6UpPyZXq+
+sY0W3k45ZqFSTO3dH8FLiXP8LUoM33jlSlPzW30+hkSaB8IdGAzCzRmCnQP
77RS+1GguyHUgzhFoLk6FmgeBXqMBVpAk3qiDsR5BMT5Iwz3/MQ8BepUCsVw
38L5sOHW0zbGerwsUgQ6agh0DFcXLg76WJyDzdZ4Dwt0IhJhgfbiRgvPA8B2
C7+ZINDJfvXARIG+6DUqgRripGJdPCZRP04CpUwBnQNL6vNgdIIYE8CTGPon
0zRwiJSaps/wvQx5AFKmcgLZBZxAnp2ALQKVj6wwqHO1KJQFDBLjrRS+0ExR
1h3tZQoS6NVWny8x5Y/852rO1WPfWJt8fZxKFvA4OFefugpzqM9m5j1OOeLj
H5zCT5NYmkg4EuyzMUwJxNiUgm5/gprFiA8x/sN6S4WapcW6pUg/kuyFFTF0
261164Fui4PtbgF0m+s7szrTc9K6YAp247p5gk3cbMG2omCbWbAfuJJgdRJX
FEtJXHzUXJVg/aepRT5VuVQqwcVZsI4pWNRXEuv+NOskZSwSKz1iSbDp91V7
01SbN1TLTRBWLb3+Zl1k7Wot3ui2GhJvHMW7u1K8u0C8uwPizRviLaB4wQ4U
Txzxundt9rr3vGChFziGZxpRuFR9OCGbK/20ZU/A1QebMlshtbeSdjZ50laB
ZjtZuxG2BBP4xMV5JOAHUMfgCCapuNZncXoLdAjabXxxFy4qrg1iQ3/UDvZ0
yiksEu4k9nSiXmF3llIP2pRoN4W6degJe1eFMwi4A/mcxGqLSSCJzlcxCpZE
RztqEGImpzWrt0OGjmmCJv6ejNpbydczeXUf57z5mraIEy/qBF0GZZr2jr98
IChT/BJ25+QSqNA48hLDvx29RPFMVcNPaOfEa4AMAGycxkCQKMrRClEOiyiH
4l1uyXyUDpAo6/4aRMnjBD9Hauy/sWos16/Hx+hR1CI9SgNqPFOhxjatRus9
K0d6YuIfmdU5AlOVSxBl/gaKEv8EOmKd1SaVK1nzNPrSrdRoR0CjadAoNyJY
2+n1/rrIepDqpnWwsd/IUt3hSzUJUk2ZUj3EUs2hVI9oqcK/s3DsIE4hIKnW
kVQ9Ktkec0skVVjNDSLVJor6wy2nbNQqfHtQrSOq4aaToj62v3e2W8ulKCCl
W6MgQHLlzT2GF9DqMmMj5XdM+hupXTZmqXypWk7gEDbeWpaAzU5SpBqqiPQZ
Cu6ODu4U23GLRerL+pGeFSpKypIKUQLZnC9CEmKW38V4mdOShD+Ev5qzVPxm
abFgs1p4jn4Q2lp9dKhI7+LTNurNzOLnkrSJSqLqqPslR2l82ipVa/3RXwN3
TFHSoFJis1biAC7cNOFdirBX+uA8KY6gFBOmFDtJip5IMd93xs10N/0vJMFP
3wgJogBhHbqiBIeCErRumwYxfRObPwsg5D8y8SPUI36mVBmuVCU9N0O3WJW2
El+lKm31J+T0xFJZrNg7TKLxy0oUIzoX+a0d9PpbvlK3bnRjotSEUupeUOq+
HW4alXoQlboLYjorNU9xHdYxUWo9KRVU+kOM7aDSo26JlQrfQ4js8I8dkrg+
zEqVuE6xHWN6+xlsbOloCeyTRmmP1MmxPURiVZt63epyt9omVWg0oFOV1Kfm
20F8XmrBxtWKS1l1krb4k4k4C1bJ11GCTakon1IbJkrsZ0i2snniME9bJ9o1
aReAkkJZK9HaIsyMHozL4mSZ0lerzK9mfVHz1Cz9f8vozzJYDEqTbFOoSo7T
Lx9AWdL+iOWIwoyTCOn/5etvOb3Cl9ODoMFDSn+wcJvT56AE4VmS7KWip3o8
doP+KrXX5hbV47GnacXZN47zI/LjK9546kcuim+g5hrFd3Rh8XlB8V1JeyPz
tNd2B2vPMbXHm3PUnLaYGb1dx7czmUopZiu0h08g9SjMiPIMBZIqncUU6PgP
QXlfRvDY6gsZ/bzkL9yJquwmVcpTcaf0k/RuQGGud6MizPiOGjexa4ub3L0V
YnetmxZhZmi3g8LcDTsd9VTc7xYkfhfrD3ndP66BfffzLMxGFOZRid8Yuyl+
Q8g+0wg/iwphoixBkLhaKHS3gtxGu9o4cdSNq8PY7ciOp7db5eMpaxTBgwi9
+F2jFkBc/aDJH5dXPvIIaBK7owbp+E10QGqd1PwaQ0sJglxmxHK9ATJiOR67
h4AeqtgG4SDdVLpKyxF+sKBJUVuaFujvKdSgqI0anDNaNqxG/710Rt7P8HOR
9KJ0lw1sVzLpoOroD0mbanQkZvNZddq5YLjOpXAvA4p8CR+uePdvFm8BzmHu
PRfH0B1bKFizLPFfOAhrwIu+cdobfOM0ypLyRH0csWGPA5F6lFZE63OE9NlF
+hwCfZYMfRb6z7hZfmpa/ysp8+EVP4fHplbntluiThQnrHnPTVOeKE6QZusN
k6c8NheQZ9SUZ6hSng49MnGrQ06TVyrl3EBNav3R/0fr8j0uy/aALCWYS0Hd
+jG9/jY8N59xBzeLMmtRmZvnKTNDytwpWSJQJgZ1dJJHWZlFCOrFhkMQzB8D
VR4GVda5Ja3MY+4QqHPotFYm7ndamuBfO9x6yh1pNZTZfsZwk63uGO1/QJvw
j+/pwPkUKM0IrN4ukuVEbzdJssehTFE17XwmcZEs++CJ+V2UJCkSI/mArZ6W
ujEPM8PmTlw16kE8d8x9ECmTIrg8PJO+oyR5pni/Dj9+CPiy8DFILxlffZe2
16Bin8JQjYGXv4aaSuvliDxJ8vS7fNOYzfj6pPdEpRnq48ikUYP0wmM9cHvz
UkVHR5XrHz2h3U0uTnkizp7jnxLzP7oLVYkfDfrSxAUB/aAvTXRbsL0ZS/WS
OseSEYzr6LaWIk71zPyXa1Xl4WtX5XBAlVWLqZKjeQhFKWWgdlQlShOtZoUs
F1Ml+MudV6nK+M1RJT9LQ0qN6pl48wVJh6S+j6p0VU/nbdJi52W1yDV0axe9
Lq/7xXMgyS3rIXxvcOO1m9yESDK1ByW5DSUJ/3UQpPU7bvagShChJPfSzkck
Wa5f92eu13CYJFlCSTYdIUkOoSRPG5Js9kP4CC4J4aPtzf6DsrMF9NiqNTmO
C0N4N87uQGGGKYxPUE4dhdmDurR0Yr0/wuIcoMR6fx/+bFCcvBmyOJSH+OyJ
7qqT7ZBjbodYqJZj+E2aZWa6zaQR3jHhjOF9IoUv9IwUXeI5PyVJ2itNoI4n
aE8OH3IEVp9V+ExbSbBiG5MOmdrMpHxt0m9OuepItaHSkKh0H/yGBC5qOw6b
mxzj5EcMt1tUd4xWkzwdQ550tBhewyDTAyhQdzyFqxclihEOtHkPBfPRJOuT
Fmh0mDTaIRptdT3RaC7CGp2bJ86N8KwMijON4tyvxPmlBcS5//LiPHWDxNmt
xRnwmCxMLc5r02b0ctqkLbqtZscnrk2WIVOW8ki8ocpMLVWZ9PyELyZRlfSF
xWWJT2t6uaWy5IK4tZtePwXqXA3qXOerc+dmN2moMyPRPIs7n0O73JyoM487
IIjoBUwa1St1HnJLqM4TGM2Dj87hZhXNKaLbKE28tR2C+SiKs03E2Q7C7MDF
4hzvonsbyGZi8zEI00ZV2lKDpEkYqlFuUsXy/j4lR5JivxxXMjblKEcV0jmc
OyTHMMf0RNzPGSU5g0RxELZBeNMmLPzZUup9AkQ6gTGcQj1LkhWawkaNgC4x
0svv0s/OFH1EUlM7lkyKVIaqSFFmUp+ykEV/xjy1oSgp/x0PSVDORvHRF70b
5YX/rYGQFtVBEVWviAqxRlF9wB2FODxKguoKCGoIBFUiQbWYgvo/lJCer3jM
XY2Qjl63kEavW0j4cOvFp1kv/rznScgxJUSSwXuQfFcYW1REyUVElHyvishG
/eDlg5dXUF0+chIVxJVm60U+I1znwhMputgTaR8IaX8trB1uFvYXLKTdWkgF
eiLtBxH9APYXB3GPYewvjrhDIqTh07hETCCk/5+9dw9u4zzTPbsAkJLl+JI4
l5lJTuzcoyS+jG9jy7Etj++SQ4mKRIYUadIMKVKkGTJkSDOgSZECQgMBBhgM
MGCAwZBDNrnk4ZFkHycee+BIoVYr1fyxVVuo2jpbtadS+etUpba2am/ePXXq
1Cnv87zf9zUaJHgTKd8iVb0NoNFqdL/P7718XzfA5VgQNoF0FAJBtLAhyUOM
eF4ol5dXgpTi6AL18gpN6iWpwsjXZ0qmJKd/nck5YM1OmTGGAktqJUGa85ry
uDhfUh4J1BW8vrLEv/lrTKRiwQRPQtUZhyp5JVDxf/IN4nX2LEA6RJi4VsYe
GiZjXuHNV+Tsdal73pUl7w3Z6A3Fp6DGl/KjCWo+RTVohindoL2xaKZUpBAu
CH4y1zIvRXC3BuwNAcxQhuU0SOvTlOXsy2dyuv6RNZWqLi5N8rLDIn/ztxxs
70xHTLr637dK2QAJ24CywFVQJvnq40wZ17EnuzrKvG7KLF8JYmc2g9iqTmvH
+fqUmy9JZMtgq8hXws0Xk5m63mF169sWbFREg9hSe719Boid7Wq2X3ch9qZO
ZL8eUIi95XcQy//qRG0+01FvvzM2IBXRQWzC71REN2LLRCxKxDhhcjEe4mVt
IobG/xItFZWSeJmMTdISelSqm/9symDmcRjzqL7/X6f5Gwj/Ol3SYOUDnSed
m770pAkrpJo48UmJhCTotK6gRF6RTuvKAqeZBTQHMs66LrHoLC15DWhnlxRT
BjSh6Yxm65BhTcrgGdlAnsn/POtgRXrOCG+ClvBxhuv4KMzI/+BrlerUFl5n
SCmUPaHm5uQ3A9SMxxuLchcrN5nnYo6Azd3gsMV98utvr0/L9bWp/HwqmJ9L
BQ1gqkiCLutG+xLYcvO1vJiyL5TwFTV8Wf/HWmR1Xifr40ZWhZssbZKzriVc
F9aBS111sH6i7vZXjLXU2IutdZqxRs1YM3p5zVh/G/hqLzI21GW/Dc7AWGHs
2FP2O6N9dn6sH2Y48ztTF+c5dREe1dMWRcYuokhejE8ozCoEs0sOZkBMLt5e
5m+3sEZ6HcauyLyaIYzuzmXsf50SIzbT/BLAv6oyKVXSw/leqZXTwGva1Mp5
IncFyF1Bqw+jmPMypTk/r2lbUI+LcmfRIpVapGZLUoDOLKoSql+xdKLt38Wn
4KtKMSbVckm3/YrDJSmlu8iM4ke1TkIQEXxDFksClaC1VFL8lqTHX8yf/lmP
BkugkvckZcnUrL5vlMs5oiXzDtxkjuOEWfI0KxMP/IBpPpuyPoPjyhUiYz91
ALuMsnhJLOMQdlFSF2yBhCVBWNxFWJiE/V8fNFmRTZIV/TiTVVGOLMskrj8B
rNRFAKtHlnf751+sVnS1laFL5iFcdA122G+hudd0FUaPPmm/M9K7ii4zF3He
0MW5iAhqY1Q19heksYfFXUPIZLE+XkZ9vJymraiRIOyKWIp8UbVcmuDk0oBr
kiaAZWSSC13+TFbNvc7m8oGTJ4gZnsv3mWanDVzyE7AKNfnTPPNzGrg5KZKq
cApkxcJpaFtaUOCp8rnE35fGUkDzkDFJY1JDpa93QDLVUHARvtwmCe4NToS+
LhX4dVPvVEel/pMwRtOMqVqo8JK5e29J/+5MReiqWFGKF48xZ1UWIqM/Fa4u
O1wJWx6CxS8/oh4KWvMKrfNzMTs/ExG03s699v/oS55lmep2ZaxVTHUVmTq2
EVMjrlroMMXxLLqtW7fL1E4i5RGkfOovPTlYzV6namtUqal3q1eW33HBVWsv
oSk/C7he72qyX+8hXC0C2Jsoib8mYIRrqNN+W8M1JnD12PnRXgXXeL/97vgA
wFKAnS+ZjWAzrwBbXmfO61JKN/RpWsy+NEmLsx4m5IvASd3P654+pyclBCzT
18stSEJW/jSoOn2yw9z57iNYJGlG6p9TDTVJcq29WBBVzuIAfpGiyT1K4EnT
xNmKBamPwpFHY3Vm0dTHs3x5dkmoEkQoI994fdHrrBPoFhRACiI1ziM2aj7U
1ncCySt1taY4kXBzcSKBjLhMLpWdVcssoOklMOwxzmQ4uSDQpKXEXdTELKPE
XUBvXkpNCNT84v914bJgcpHBpbuIy5ubwqVvDVxGdgoXj+CyWzVRayOzNWJ8
DiRCxYohIAd/894/aUjUHLr1U33pef7FQ2DlqKSWM05qaUQfpFnpa8UngRTr
Fvst1K63wMvb/k70QU/Y7wz3FFOL8DLgsHI+CFYmTD80yttzwmP8lbaSuYIJ
dNwT7LgdXi4lwyXzBZdU7ZKGm8AkZaIzpbru0vmCXIa34Mmtjhk945nNn+4g
KCec69EsXF4pXBWqaM0Zm5WE45W2e5emZrZoi3OGJOYb3X7PlTbjwpSDEG8q
EITOcnpBmDkrhU0AcYFydlEVJzbBC6pvBjPdNN05vy7laF76ZbJDwt+YEWLI
zrRX+mV+1BRJEVr4cbxsBVR2AZoe4iLGxpnAXAIsAIZtxEKSd04BmAsEBo1z
fiZsvzMVQvP8i/+8ipS6DUi5fTukqKyCEf+mSEmtIsX6kFGZ2xAVKVIVn0RU
1LS21SfLL+yd+fFhe775iM4tdRhjNWhimmBCDHhplTpEYt4mMUOdhTEhpnsF
MaxDg4YYHAmY4ZGgLzbzkIoYocZDXGQY77EvJfjtPGccD7ssE5HusbyHDTG1
zGpWciU1yLlVVS6okJWTJwpVjz1avJ/aV/xps1kaS9KcdMfz06qHWZDueEEN
uBxaKLJcJnZaY2XsiRU48++faPgBQbGEFA7mF8xY/yxNGtazor0gcXZBvyFv
skjxvbPyn4SledlSXvFdlMX86X7DEN+cl0a3iBAXMp8oHGmEKlwIZZWdkV/R
QFW6pUiRrk6XFg1FSalOyyBoGQRdQHUqUjRR/c/ZoPVfXPwsbIafAfAzuD4/
7471uzPONvhJXefnmvPjW8mPh/DwHo5N4KOmp61+WX5t70yjomipraZIUTcp
UrWL3bCiqNVQlP9V65F8pvWHQlHeGTyBIt0Nnw8MqLoV9NsXULcURSMgaBQG
kqJjQpKaT5Q5RftSnF8VJkxeN0wCUYylSo/Qr2CEfiWjifKtJEoqmLf00q4m
iTcs8/ouxukclHMoOicXAGQ+0T2KEprYJM96HXp0iyMmLfJcCT0/UPTItV5I
fEZM5hAVTHy9YCg5K502ORGWaPMCFhe8V4TMFKqe2k9ubHVLmxpXezQ48mta
IIfg0KwVCMn+nQJGkxpWKfTcDHq6Qc4kTGWdS8DmIrFZSLjQiQKdiJ2fDgGd
4N7f/MPp/3odmc0iU7ESGXAhI/EPipuXd5KbClW18vN/N5af+7uxrbGTE3b0
7LL1M/WNRjB0AM1PtYuheoehN3ubULxa7F+jgL0lDLWhcHWgcO233/F3gqEu
xdBIr3BUypBqmS+gZSZDy7TwqIcQ4ewuooZdRNd8MRawL8WCoCc+weqFptkM
rS6jab6cLlJ0JU2CNEW6lHkJkUwM+mTapoK1C9A8Al4yahQu1zRAj7fYKJMe
IYigSNs8P+NiSXhS5AgjxSKm8k0FmHmB3JAlbfKFqjNqiddnafPKzshXU8+y
3z0zr/DRGwiIZ4WHOQWMgUUDc3bWoUbgUFdMBQ6cwBvaXp++WSoVwcu5mdEV
KyPY8OMnea/bSLcwc1mYEW54JXyBM2JkZhml6sIsuQkLN2/nAnt/8/evWv9t
B4DJlwCzMulcB+YTBYyaFbYGZfkN/4IwcxTM1GpmGhxmft3XDGux30KxenuA
zLSvYEYVq3eZZFCszoOb8wHDi2FmWDNTLFYXoyXQgBkaClaCxqJ1OcmmWchB
w3wlTYuBFjbNVzj3h3pFCbJAKJukyaUtIjTF771I7ZLGeZIUYXDeKg00h6kz
8kvSs1mWLWNSvjgDqKYBFU9eU7ike/bqElaESSrXLH97rOEFzt1Q6TOymJVn
0g3P6SrFR7azZ9VqZxWtwlk9SzhQnjoB0eMeU5BexxGcpc0KaOrOMq+7IMmk
H+zsNBHlmbw+JR2ymvszPbIaqssnZciSMZ8wdQvOIZ2fS5yCjWqukrAEqbIv
kqn5mBSvCyhe59Ezvzs9Yb+dGROu3hegvslE5F9oUVCd3RxUl2INz28eqtBV
QbU5pohU8sMlySutkGl4hA/rQ2ZKSPJeY6bOa6by0xP+t7MqV6lpZusVWX7V
P998yF5qXQer/mapb8DqPw4c/Ku5t185obAa0VhhVPjuWI8LqwFB64Kub8sT
xGrYweoiDY31xdg4kBo3WLGn5jeYL6PIASrgFBasrhisJmlEi9OJVzJxaaql
x1YXTgWxbMqr22vWO3Kl6t30JGsf657UO8UZe2xpr2Woz6o3b4ywLUwLYVLr
ZnSVw+PiTBErg9qSmLTV1Fxj5XE/O6temhp4ZlYZQTorZIIZb/70TzsJle18
lYhvyEIIIltkTFHkKzNtuIfLSjN3qHgh9mnrJoCSLoRf7cKjguXSggsYKWwR
KWznZ0IAJuh/K3tKJSDf1lH5D/6qR+x3hjrQN18jVHwrUfGQE7pj66T4XKRw
8jkjkHg3D4lkH7kVW+jQPdALQgrdz0vSnwQqphQVah7HGlK3hlXbL1bZi61H
wEWNfbazDlzUg4sGcNEoXLwlXLRgTN5aGD3yuOLC34HKpNh4VypTj31+rBdc
gI1Av31BuBiU6rRMNgwXYc2Frk7ggv1xgH+XNxEEExNgosjFlVSYXGg4fKY6
qV45s7rnyaVUz8N+cSrFcqUNherRffra5zQ9KHzMSrGay5EP/chiNT8lk4T8
JraUqGmXSQoBHAcJCAfnFHJJ+tYzM0UEhJGlGd5kwcb2zIxHPzs7w9ubn3yc
VMirG8iB111D1FVKQWXqRmdAzb249OetXGfShKBoqCTAADh04jHh4HAJKFxE
RVmWLgUozIbs8+hS8rlA9T9nRyRHVAoL3948CwNtW2RhaDMsEAXVpXyEYPAR
BqYICdedIKDCTQD1lx5jV5GECjcJzjXrcjDwGc/jTFplhJs3j8GMC4PJETXL
Yv1cll+WlvXftv4QYyAUjM7aFSA0CQhvD7Tkf/XSofyvWg5rEDoVCMMEobsI
gi4YF1AwmBSWHRBg4WH7ImC4GKGNIRlExzk3F9McxHnzO0jgj+KChStiwgIs
4uDAdjXmlAuWCocCVS4IQS6lW1cHAhYOQsB0apoL3b3K0HqOTp5zZvLmp8zl
A5UP5PLBNHuJg9JLEI1pmvQS0uMuzSgsFCBLQoECxmegkO3OzICHk+DiMUkD
5OCMajJ3OarLdlmnyeTUrJqf9eqKYCC4RSC4gpIAAPJz8eG8HR9WECzEAULM
vggIluciJSC8k3WNWnav4qBm6xyMXAMOvG4O6OdUhH5JR/TwJWrtCAtMCNmy
BFS4CVBGwT+uEMyWh2BApYNhWd7iX2g9ZJ9p16mgqw4I1GsEGlEPBIHCaPVj
GLm2AoF2O1+sCXDDu6PdOFCnJggCsOCAvRwc9JAD+IUUCAG06CgJGBMCVFW4
vMlMsLIwuGdGkgYFKQxJw4EqDtC/BU3kPiLAmsCsOpvhNswHc9rMyFZzwbFs
zuFCeJiigYYDQgQLBDvNRQUCNlia4ir1ysAh62W2bol6n5Hfdnjysfzp3g68
kl7g7FSlPPW5W0OnMRReMoqMM5oKdeWPVEjDIG0Dd86ueSktJKYcRq4s8g6P
xYS1pxAe7igiIphEgEkYmACRmQn73akARqOnJE18Sl1YRooo8vFGCR9NK/ho
W8kH6bDP08rzYV0H5IMBRBJI5XYA0TlEA6KmKKxX9b0HCz8+bC+1obXsrAEi
wKSbiDToFNIERJrRUj4KPJhC2oAIMMEn5Uc6XYigkoz32heAyWpEblKIhFhJ
kOlQSS6hvQQlLkaEE1Ci2ssroMVDUlhHwjxjBYqZs3CVEuIRL8WDo09ZpKjG
Y6wgLeAiLX2E+HN2kogIJl5Z+kphmcuxmhCShRx/5+c4mTgAX8svbCyy9Vxi
2Sk+g8CiPJ/JK4wfzuSkJlTozvBsRupBpVMP+H9FU87gLfKIRcuFuGjZLjoq
LdkUhKFlCFpOQMug/W5uvPpf9CDh5hIlqzenpH+7So7ssJJsAZxoz4lZH7iS
HhWqjF+3mjspphT3VWLuzf/Dq2rgb43I8i9unG1oOH2mnWO+o6jtlLMOctYb
OfPplw6itXtBy9kKKSEpPundkQ7I2bVCTlgAkgb7IScknUCbFxqClH4Po5K/
ROaoCYuh07scG2fKpqCJgBY0CCknjJwhpitm8bSWdDJipomoaEzEjJn4lNhM
iKJydR7pazoFQV+isBVU1UNRfUZFUS+jHueZtOd5PWlecuRCVil5XJSEZfmo
RK7Qq6b0I2xJhpCyARL4bpXKl3LGoPYJqP0oRTYDOG67JAs1qHNyMvO0HJ9a
MnefnTRWbPg8Tr6u0EwsCRNJ6f+QrBbhFOTqy2KxvP03Q7BXgEhU5+0QbMK+
ADzOT43780DEGQTcqgj5ysWXj/n/3YnqHSVk+SoJCX6whLCIO5jM0zI7R4hv
JSEeIiKi5zQCuatmpMKZK1qbEa+bEXZPCzFrz2YZUVMF1ilZfrb6bGsVRolH
AEiNBqQOgDRghNjoAqRlBSCw0U4AAkjGAMl4jwHEQ0JwgMsTYCQ0CD54i+HF
sJ+X0ksBAR/8hf7L8XFezHLlkMtJocRSiHCUiJYwHSYeMkqMUMFMlIRoPjQj
ubiDSEKmj1AmpsWAyMP50ydfIjIcLaoSkSYvLBJSFpio54jPfEaaPiLyPI3P
iYjMI8lS4aIeF6juIrOC4iPrUbwUqp54FFy04ZVcRfLo3LEke+C6pawxrs6U
a/xlmTbrzAyya7woJYV8JH1ro2FfnmcKeQU2YF8CGhd1hVmeIRoBVJgxf16P
DT67o2D0XjMwOCoIKxz05QeFBN/Nyt0ZCgkS8RGggp9sakkZMCodDHbtqO7R
zeiupgusMX0DzsKPD/jPdrBRPArla+w3e6h8PZRvyKebDkD5g1r5Fqiu1FfK
d0B5qD8G9ce7tfK9EF7XjaL0EH4IkvthwxwRjrB+xEapPHSnjXNQGOC8kRE+
tU5GYLmQIWI2WkwJOVaRnIwBpuJUnxioppHXdzqa9LBQJpynpXqkKDmfzcli
0ukrJj3UXOYRM6qiLKhCwnq+ILld5M/QLKU4PqOnDWo/ItFdYWJ8aVKHv2wn
gi/pYZwWXb7dbCaEvGo8p64WWJ6SdUmarFMYcJEQFMlBTAyx7yEInrwdGUBX
ewkMXBQGWBoCLA12PjvKDlO1D58vYmCfaT9UxKB3JQYvrI3B2CcFA2kiJkmA
u4nYAAfSkNEQEACC4Mgvy8WMhmBSrRMIqPqkbzvSV66UnsrDIptRXw35rdOy
vLn6bHsVtD+CseJRpIBa+9e91L4e2j+X/9VLSAGDzaJ/Ufs2hH+Hh+LjMM+P
d0F2yB/o4fAw2MdfuYP0F0O0Qbf0UJ6GIhAbgfajzP3sHxP8+ylSAJIBSB7U
hv4xTRMEJlkDMlQ+GzX9Yk76Ab6C7LtUAZhyTGX9jiZWAEn47KpmWQBm6XeJ
/HlZTHJIWP8cpH5OXul1lBk2SVPr2DhSb7yuVO+qRADdW7X+nKRe5IZLVFg/
u0mn8kVZpLxOn0dCkmxEeR/PYpyjgoWirldEU9HVvjwXgbQ/y9u//JkIexEd
H9P7BQj7bm7Un//ViArrv1gla41L1obNyXqLW1YV0RN9m5XVKurKe5gCDOMg
3blpRT1Oj+eVau69tlpWlNNSovdqheTnxaxPbUrB80rB6t9mR0ZVZAZk+Wld
oA+hNYOMPTWQUDKzlvCA/fZgEyRstvM6MysJ26GgzszjnN6HitZnoCF0nOgV
HS+G+pWO4UHop3V0aSipOT6qUnOCNq5C02hZ6dYSStKQnjNKUa9kZ28xO+ek
WcNyl2rUprRNx6Hpi9D2ITxPKF2lGUtSXGPUNyX6yjW/tJK3/jm51EP1Rct5
Tr1AS5OHW6mZlEj5bwu8AC8m4750paOcybQykSoXnxaTXCQqjJAqLBmSURH0
CsVUgsLCyLWhQuiVl+yLEFNCcnrcPo+OC4Luzf/9oArLL5XR9E2t6VsuTd/5
k9CUJTclJTdN6ZQhiqnrVcrqrJMyytKZUnPkO6DypU2orAba1i/0TaWchaXO
b3QfhcbQua8OGj8LjZ9D3DaIznm/0vndlTqPd0JhlX9XaRymoc2PaJ2jWufY
sMq/8RGlM29epM7JcWgMS9GodVpysdE5HZKWKkRfKb2NMTFT95zozsw8RZPs
PB33UGKqK33obEIrLKbU9aqXcyl5RWmfVQEM16ZoljRelRLZTMHp/OnulkLV
/n1K14WU0tRrnqqVRkOvMx5KmVZJ9FbrknqclFAjpj1UmcleZ2avIzFM6gHq
EGLZ2k2dYROF0CC0Rue0DLswNWa/mxmp/pdJvwTzHSLyF5XInSUiF0YPP2y/
PdAAkRsRyDsmMr8XFRtmZ7e2yNIwfxwl5lspz4eo6rgK3tf09dJ/d+IH9uud
1UjQ0LWvtjBy+CH77f56HbiNdl7r+u4wdB1ptc+r3kl0vaB1XXbpejHUZzSl
jpFBDoKGqKifvweC0FWKFlW9AlWvJGnjIirlDFLFCSZcJudMqKhkloazzskc
SY6XU6ZieDYd4/zUYw/lT598kTrS2DNxAVX3rFA1AQGfoYgQLVlM2XNSgtni
QFCvURCPL0kKJguinn4m67hIOLMVopsUXlm3kNBtbpyHsBCn/By8zUd9otyN
WOKMkHQvz4Xsy0o6+9JMsBAaaIJ04/YypDufHUHX+3NVXr+ulVOldYVyA9tX
7pJRjtNYUURkjOYXg37S8o5wGmu1ftZHQECGoXxdey5lQpNGDT9SWqrO1wrJ
8nanWXqj+wjza2Hk0IMsoqLoO1A0PwRF/U1QEzbSAjWh6GibUlMUdavZY180
ioZEUdhgSSG9HPWraIyNaEXhslI1TSGFnPxBMojKocwE+yMZ1WRDSs1cWJTk
8GYqqpVEZ9RYVHOavpqRu6Bm40q8Oor3jCRbXp+S3GoMfp7HmHY/xkHdTXzO
eJR7IBaSSoZ5Y0n99oIkblEnYUxaHY+TOG82idPpeqQUMHFCN2IjC/45gaJ2
AaTQ8cJrA42i3QWMPn/7q5/v/Y1pdb+5ZfWaXeq1f0TV87rVk19m2rx0+dMv
N300pRtxpAuq0PulHqecO3nAr0rgkfzfNz6JtoaJtA6JFOINQTx/ow67ZggH
8UYh3lgbhGuXRLoc6JTpoG7+RVFHuD6IpsWL6PYmOigJ9XKM5tfC4dwTI0q8
JG2MOZSVMC0L9jiTzKYZ3nEomVSUk0Ynx9NW0kUoxTTy6nRU2VQUKh6Hig/y
kevY3zBfzcQ979/3va/Jnz+La1mNJdTjHPqiQtXjD8m4Ba/njTEbz1OUOVFN
hHTepyQxEcwngmlZ52PGbqFyHkc42TszZsgYE75SccK+jJEHVbw0PZ7/p9e6
C6/1H6eK9ruT/uJY8ztuDV92NETwPf1x1LByLQ095QTcs56AlA/B+CKfi2gS
MY5e1oYaenV5W1DrdkI7/4VfDYt2EyoCo/o+Hqr376Her3uOIHU+gAa0BsrV
IXXWQzm3eka5VigH9cbboVwH1YN2XVCuW6vXC9VEPWllBjgJX6ochRv2UDcP
RaNzmDdTNOlj0uMysAhQOpp8ByjIbiCDwUZWW46mdZRL+JJR1eNU2Cui+oyI
StQZybJRj/ArkmoZZZoBS/41rYdgD5p1czH53QbKGiuGE5/PMdLmYlQxJkMC
yZHSk9wqPYlX9ySikKWS5E0UCjbh2OXZoJJsmpKN2Renxgqv9R3PTwdP2ucz
/urfTr6iwu0uR7DDFCyfanzimgp2+cMRDGI9sE3BvG7BVq+b0+s+COVUi2nF
ZHmHaPfrn1QXXq26P59+8UnR7p3BWvQoSrt3h6HdSJMrTbaKbhdEN1gQ2k1o
7ULoVcKOdlAOFh2AbrDYoNIu7rev0BLDRr0RUQ+ZMkUbE/XGRD20LJM0aVky
AUmXUDMrJqpNcCTPNiYXqqBkqFOPPiAty3GTPC2RiolS2oSZCLWhya+90clz
UVGOwSObzEX4TF553OtkfC3rJPfNRaTX4CA/zBFG2CeycGNHEmEiKLlZSXNZ
5UEtz2j+n4InCxM/rTPyCFX3qisZ1MZ+s/tQUZuBTWnjoTD8tWBIc9ElzaXr
0lylNEOURjWI1t+qJr/6111V+dTxxwsjVffbb/UddYlTp8QZ0eKMNmthYIH2
FUEDCxl1tEIRKBSl9RfViQ9CmSGoQvPLHaXDIg36jJSYSCN5MI0cOCkm0vAe
E8hEkZRESiZp+kUdJZF8f16yHgSqZ8rjoxJIala9ToMPwF9sUmYi7PkjxWd0
cUScLdNjTifA735JPzA3ITel0/nBos3Q0BNdlsU076jTAtjLuREKkJ8+3Va9
nFWx8eBm3D+s3H9+u+6PXXc/3P+PcD/4V+2Z9XeyvK361z+pWvzJ09/L//2L
T9hvawHyWoB3h+shQIMSYKwowDIFCMImOuD8TiMAi3y4h3+iJFIU4LIRID4A
55cIAMdrEdhZj9Dpo5KZOKYdl3xE9wbke1YmKUnF99HhcqMEfDM1Ab/WuXxc
h5yE9dNhPjIfhTjaFX/OhHSxle92zYbFxdL1htyd7610ML3M/n4mwEmgmXG6
1WVj9iU49yLGLsvZ4fx04EQh2HOsetk0VfvEv1+mfwuvvnDvVfq3U/k3pAAv
wr2hfz3iXB+dC98OG76voY8rDNHiT+VkY9fEzar1sVLqWsb+2r+6nSDbb/VW
w9FH7Hfo6CHtaD8cPawdPdqErrVFO7oNju4ogkxHh7vgZO3sCCzaCyfD0TFa
v30lxplUuNqj/ZzwK2dXuB0NF4+YVIIUwn7VlNpxnUTGraL7WWil+OaCKK/3
0zhWxxJt6KP3IWHcD6fXynQAC/KMLMTxTDyzE1IEfcwD8ox1V96Ql4FKca9X
3HtlWoyD3Okxzt5PKRdfgosv5obhZr+9nBkqtB97oiP4kx+K4o8VfVx46dG9
ysf9K3w8fE19LHnab3iWOWnpapSbTZ5e4erANlzNwbnwL5xPOK8+OPfvb/rh
46pNsdKyvPXU9750q87W+7UAR+H8mtJsMtqoBWh2CcCM0uGhAjgQanBJJRQZ
mfXyxrWISSYcrUGBogA8dJWuTcpOSd0sxVwSy+Qoo5iFM+M2nHN2vFD1yH3K
xY/eSxFgIkyOmkwF5SdZauF/anAf18CkL52ia6eDldq/MwG+DNzAZ1w3zpfM
ZdO8aWdqlF6FNy+JDdsXlUfz02Othfaj+0/d8507BOq/vkqfLu+ITyVneNf3
5E1b8aR6NA7bgjMJdWDPlp3ZYpypOgnrV7L80n4sTtU/dEfhme/ejjxcrdw5
qPLEu3604ZIjVroTFlQuvThB64AvO2HME7BIt+SJy8wTyBFXxJAn4v04+vgA
+RyUDDFUQqkk5fSw9q22SenyJkcR9I/cy6B/5B74FSkkKykkO7ab7mRKuJc/
pfAovTdetGmZkZgWt9FPMzKQQp0ykV1R3MZZt4dbyDp8zpQYM0AOo7NLOf6s
8SX49WJ2yF6eHCwceOSuxeqn7qMnBdRnip4FqN/ZnmdD1z0rnlVtg/UPau6L
N78sfu+Lt+WHDj4Avx6BX4+6/FoPv6okcGGsyV5GZXN8i0RwMaiIvSh+7VR+
ZXWDby9H+ack4F1eWzXVLW5Mqpz276D28ZD2L/OAnz4uVO27mxVq390ecTE7
tRHlV3kcgVezo3I3MVyVc8wrfuZA/Ri8MkaTdo7JZXpUPS15Y0yiXlx5g/iR
4318Qo42DJ/67ctZuZEjO8TLyJkh++LkYH609YXCgX13yv1DwusLavqeK8Dq
l7fjU35YqJPzhqU+9YhLve6mQRqGfrqBnXBiUFmS2TY5tJMuFVdda0dOKjz/
UZY37Vd4fqbwzJ1w5wsPwJVHpEa964cN15W6cpyh38IrH4FWpO+LCH+VVNvh
TIR/uIjo5Ui3p8go3CgmF0D6+N1fUpqgwaXJgULVw3fBaXeZR7hySDmVXS7b
4AyHcpPD4tBh40waPJAdkS+80wejxvKnTxyBT+9mTriHrhuRTTiFO7KHz9hN
0GVZumxIXHUpMwgbgMsG8qeUyxbv/PoX9zv8HV7ltNvzQ1VX67SOD9tpvhVO
G/HspMcyCrR/UjEr1dv47dm7bi88e/cdhefv/mp++PDD8Bd8NtoAf8HGtc8C
zRKzF4OwCfGZxCz/VqLx2eUIb/m8HO0Wh/XkxxqfK7zw0Hctn1oqZyVp4jDG
6gDWpge9xleTQ3QVTQoMPZeRcKa/smJkK0tv5vwsPHdLN38PPQXGDgt5w/Iu
f/Of1YvOuawckx9rrSocfOQupISD++7E/3z+ob30QhGpmo+YeziEl7KRHuIz
8ZPn2nlrTzlv0Vew77q9lVM02bLczUuA1f/80yr/2wOH8v4X7heXPU+X3fPV
woF7v+bB4uv46AP3fR32DRoluP9bXHzb2lU4+MC3YXv147cLLzy4Nz92/Fm4
SVwW64bH4j3y7Tu0MIle+ArtS7KPj1JU+6W57qfLaOIj9jRploXJQbmjkN4a
NMbRo6zG+V7JGJPVQ5z4aDsEd91lTHy3i888hRfAz67CC9onsPzoSwf8y6mf
VC8nf7I3H/qxIqmhnGuq/tRdM624WZDljdX//LOD1f/yCjrcwUPI2EeQsY9i
GFaD8KpDeNUjvBoRVrQmucDfbO1CaLXAEGahNoQVDeUuQuuQ8OqU8EK4xcSU
k/hDkbEeekpZoocNby/90yd3lPdpH+ExTevnI13VT/+IDycH+ExeVfIVA21A
nvET8e5lvAvjJ2K527402WdfSiu7mOqF9djLyR46o3r5b7sEk9a1PDH8SfbE
cqknVBqxlmT5mb2/GTwAX1T586/QF9VFKkZq7fP0BRLv8jhN/EFvIPE2O/64
FKK1cZa6XX4HoAO5t4MOofnEF4waVPg4PJPoluTbTRf0MOvKH4XDUV5J99Ak
/fbuohtYrcQDOI/LyviLAulenmO6176E86LKF5Pd9nKiy7/8dy/j/H6ydzl+
UtTu/CSf4X+nVDwny1tKz9F/CEQfwfkdBdG1OD9QPV6vzpFUB2lNOEfYRDO4
uRhq4dm1sn5G2jTWbYJ1OznukHEWTjfuskSXnGeX5L0uWDdNLj107+K5wzPJ
Hv70Wzf/blA3YwjbXEx0iS3HO/3Lf9tBIvfm4ydVHld/M+um4un8fNOnw9OY
aP7gz2W5zLmo2LLeLBWn+l/8VTibKpwNIOTZjNXgbHBG43U4E5xRAGcUbFBn
NEGTswrxrMItMl4DiRHHeL94m9z+gXOMKcMJsmXmItbJ398AoJfiPLFLONFL
CTH+Hyz5p7077YtxDLJjHfYy/vcF7M9Tvfw37ZZXKoj5J+IMfSROhyfSxd+f
7azc4kmcUQ/vyHIPTuEgT6H6tyPVdn4YjI2AsVFzCrCAnIaX58BfMpOzaBK7
GGpynYgXS9SFiJjlkyXWRdt4PnzkumgbFrE2goOVy9FW+wL+w4VwCw60tXr5
l63Vv/3lS8rPE2UPsLr8AQY/2AP8jfLh77jw8OisG3h8sGPVvx0/5v/tqR/a
744qFs7jGM8H5DgtfjmtHh96IYh8CyYuTDRw3UQjDxxsXCgaNgpxNV+en2jE
R79Uvfzai97q3772ovgnVfzwPSs+/Jj97tiqD+dHe/jJYEV/tvN5+Gwe1fqf
+q4rCIqLw9fXbrz2f+DCc4dZ+6bz8n92vW95zQYyS6N+wcjbrNfd4exzapMb
L6+970+rdXzdbFmuI//HTW78uw33/Qcspje775KNN973tNnlZvZdsvHG+262
Vvp7nX2XbLzOvj+j1jmvnX3n1t+42Wx8YcN9r/b3Ovsu2Xjjfa/29zr7Ltl4
430363XNm9m32Xj/Bvu+Ta17f5VP/mGTG5/fcN904e82u+8Sf6+zb/XTxRV3
aH+c0sbX+nfOHffese7nbnVH6xzTLlnnM+toPB19c2uz5frntZx1pZKWO8Rd
pRur3W1yp+scrjq7G8w6Hup+vSeu+53lIqjCcj60FJPsNdjxbzc6ZucU97tO
22w37drtH8xhbuJ4vafK7HT/Rjvd+Fh/p10g/3xldqHXrcZ1nWO9qp1udKye
PxRPsuQ/6p01WytpXecIjfJrHk25nW7sTb52ksmK3e53rSsRc81jrShd9zvX
unLHWrLTdY51nd2W7ELvtkTM7Rzrmju9Or+WC4iSj18zY232WMvtdMOMtTED
K4L31LrHuomd3rHWTjc+1nJB+Tv3Or3b1byuc6xXtdONj7Xc6Zrt/rDio0p5
XedYr2qnGx9rs+VKzCsK3ynXbktk3ehYy+3U+LC5zPHLjtdprlTh3mWkmbaK
PcbK0y/5f3Kc5Zq7FTs8pXc4XWaH+93/b51jVP1PpTkmsxvu8g5rnXRa7vCu
Yl/rHNme4jrnn04iqwksdzib3cHGrfdqisp93qdL18l/+N3a+/50mXWy73WG
Ufstl+823vdq2dbZd8nGG+97tQbr7Ltk4433vdrf5fZ9a+k6idpl9X8uFz+2
2eznltLNiz6ZXnvj/e6N9b7/F/VWsz7GO5z9/PvSNyzX/3m/dLFj0yXn9Dl9
9nx38z+Hj08f/M5u60EuPad+Xn2nbPnzdTdRx2yd1YeODd5//z/9jzTrYVl6
/3Db//cf93/lf3uzeBQDm9xYHZyeRpUDcDZ/pLi58ZTad/8mNz5bsm+ejrP5
99XmPLzSfauLBd7ffe+m/3Pdjc+U7Lvc5uLEcvvmMa67cem+N9z8T33fe9Tm
7//f/+ul96+8Nff+f/jvX7du5zoPV928lU/e+q42eVwnTpx4/7Wxn6udYd1/
+p/+Rdb9Zn7Suulqj5A7+KdU2NkpjnbdnW7xWO/Q6/Bc1vHVp7Z7rHcob+Ll
Dh4hTljW4b0dOsJN7PQqj9WIRLR27Fg32ulVHqub0h0/1rV2usVj/UoZSm/c
7rF+xaF0B4/QAAWv7tARrqC03E6v8liNSEiCO3esbkp38FjdlO74sa610y0e
6xdcx4qPEbl2lyF3z3aP/6sOuTt41MYZ7qM24FHMnTnqFSFSbqc7ePxugXfs
+NkzrLfTLR7/Z7lOVrkOmL6RdqRyBf/8H9s+E/nI3e7db+SoLZ6Te7c8cr5y
nwldyFeeFdEBsypkqTAxn+FzgNcfZN7YtV1XfKhHepVeZW4xuaRiBR/qg4Uo
MlSklSHs0evcx+UrE+o37JRXN3Wku+Uzvcb9JUdldrDWUW3Tg9xtxYp1rIYr
w4LBeUOZUNlxR1Gfcgf0mTK5Z8f84XPW6UPwlkk6uzbhEkq6Qy7xuTlZ65hu
2+Tnb9Eru8ocARzvWaEB4dnlOiqmBnplz1opoHK7ril3YDiKlQdGiD67lYPY
on9264TmPgyTAwktt/lcmbSye7vnv5UPdod4uQ/e4jnfoJ3njhRTC/BR5lPd
yWHbp2s+0326ZT7TnRN24Ez36GzNdcaJZvcrP7IoyjZOcyc+cIvn+Cn9ka5q
7oTvbSsAYvrd9jnuxAdu8RxvXJHb+XEwkxPc1fZWd7Jwv7HtjHWjjljXOscH
fGSq+nT5IrRjLqhwD3Rle3q43OnevGbgb9sFFQ7Cmz0Id6HbgaJ2Y5lOw6M9
76qf/D+3lAm6HXJDuc8vrd+3bvLDryqrlXq1XJN5S5nD3Pa571lxntv98KuU
XgecflX0B13Nj7plrTSw7VHWekdAp7CI8whuLpMK8HwHfeA+rc+uzcn2T7Xc
B200iN/iOX3V5UFTMHd8loNpageP1Y32jh3rRju9ymPd+Tk7rDOVb62dXuX8
aBnWtz8/Wobrj+y8s5vXHTxWN1o7dqwb7fRqjtXDp9u+fmOO0E3pDhzhHWU+
aseuNW20021eFyNQO3asbkp38FjdQO3YsW6003WO9UaHSPfODFBbOkJ368Cd
8NXtzu63eH35e2VOd0tX5je7g3WO4U5XFjS90JY8stkdfALvAtnhfZe7W4j3
QpXd94Ybl+675KYo141LpXdQ9a+/Me9+ki30XU5nyxyK64Yr53Dcd2eV3LZU
bmN9d5a+g4zHx/8iN1n9lSzl80qP+5Xica+78esuP16Du96ur72+9vra62uv
r72+9qO3dp2vqO+31G3wdzj/Z52vqJdsvLz2vj+uX1FXX7rxVb9WXVX9y2PK
8Fx/23XafNK6H7mFfegjUV8t8mKr57C1GP7/L48dtHyRnz75fW5eeOHOvXak
psqDxSEvFtWWD8sjsKPG8F7tUcsrq8PKLI8svZfrH3yAu2lve/RR2fUxftyx
Y9XBquri2cTXPY7HPojjUD9sYr0ty4q9pw8/pY7kRwf94WMHscuDFndfhU+N
1h6yo3W0ajtaX+3B4ojlOzd86Fk50Kp77sKaGo8dk0VDLf5LrL4Wz+q01fK9
WhxorL4Om4pZ3E0dFnV1isjLx/ftsyN1fIPLG/DhtXaYVkOrs0NHa+2JI0dx
mD+C447hkA8rbwY/3HPg3uvq8p1PPmlOw1v2DGp5Bv7Xfnis5Ax+rXRQrfPN
WP20nMPf/IjH/zx2cRDHXoVPqDLHzkPHURzFQdFq7HhjjReLWqsCy7pzo0d+
IOd06N67+drie/VcNPiw4M+W4Cmf2TE8wnBmsjrW0Pje7Z/+9O/3f/vb2D9X
13N1tL4RH+0Y5WmwduOEGmD1YqGjkOcIT64WkP2oOlh9TJTxl54VVHl+xVkd
+nidVcm3WnZBwMf0uT1th48+I+cWrcO51b0gbByyKvFx1TiGI3JecXVePC2f
nWiq82JR78GiwfKeO/XDI3KGh++/F2eXaG7kognbNTdXYBP+rFyiqYXP7ERj
8++f+PZebo59NcP4Y0kxLHm+TbBmY14cRrMg2ohTVBaubWSaaMDRhXC+oaP1
9kR1Hc4E51j1o72nD9SKej9ZdZbPrXGWXvdZYh3OUQSq5UnSLM9H7XRr3ae7
qGT9twrXvSFJJJD0CE62lif7AnZbxVPFZ7jkbIQ18STlRD369JobuGi0buQJ
2cnmRm143kJrtpOtzefGaiRGCtUPPIh1rTjdZGurj0+xaG7lLlqRx5se38/N
8j3PoTjgA/hjTPGmVnx2KzzQKn5ohf8bWhEo0YYWHCStWSxSxx9sC9c24dTD
NU04/UZ74miDHYTawerjUFYp3fHRPfFzp47Vrn3iHjlxBBlP3HXyEXXyG5z7
vJJd/TpepWL8R2CcGYp8qzPnZxwR0vSJI4Bx4jxO5v5Ec72daGnASTTSPFg0
cQEUk60teNaGo0y18ae0Um1t507X1cnZH3nwQS9WtGPR2o63Wjs8fFaJ/9SO
M022tHOz3//13jtxpslmvJFo5hvx5na4oY3GsGtUy1b6AR5olYBsZe2pa7XD
dS1wQLNYCDZxtAkVtN4fOFRH8lX1bNnG2VesPHuePI9+e2ef7z1QJbX0pcef
XOPsG7d/9rNKffULl7eSe9SnZ6U2RYR7F/P6xONNNYr55rrimYu5dIdXcNY8
aW1tdrqNvymYbm/zYtEOINNt7bAOvOo4F6hvEJ8cfehhvt3BDTuxaOOPhOIp
n5lXbV16XYom67j0vfeV2z73+7/+7l34/A4aD6STFHUyq3ZSLf7ecaIJ7mts
x/m0S/zQpbEGvG5og/vaVrgPVqssVNMCo/sa/L9g/FQdV/A0bOS8xu04r007
r9XlPDqGP6y5ged2uz1HvxUflfd8H5zjjpY6Tg+P/klVV9UX1bpiTtwmrmMl
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
O3UkzS2EOSJeUSxuOh/cdG4NNof8281mu/Bmsh3P/PXx1Gx33MlsB5PZZoEO
JmNNdShKb6Wgen2Sg5aRMgDdiFAz2KBHHTBIXpdoA+FmbuOp2E6Fdij53AQd
UZ7cwN26IcLVqmEjMwpy1SCme7qZ9UUwX+fDfNqPOTZ5B/4ySTfHzUy6T8wf
dHKPnHQKKEkGHvwUTaaKb3ziSafyXDYDn0krHHCSLEuKWsaYuZk9uI20W9+I
b0feC0qBdcU758jQgveUVnmr00MQ7LIUrge8wG4C39hm00zJb8bff/1YYvvj
TyW2P4Hxi3jWWydlb1LmfczHu7AejkpuzCtpqcXojfQYd3jiZAr4q88y7xY7
8QA58bkYBo7f5mii3pUBAt5t/7TRbcf1Ga5QruYKvPeuSHPJVVyH/ip1mBhm
HB03TbygWo8kvhF7tV4ez0acExUPedkvmREhvZacrJow4b6qalEk3VOi3+mC
scYakYd4w5PrgNCNT4F7RDMxfc35Ep77JRmCLyfhki/xki/p0S/h//4Svq8v
aXzwJTn6L/3iTtrO3WQhalWJq9AGnhdLwEqX29HoQHQZ+u3vS5lTa91z46fl
3wFV7QswLjugomUPGusgjPI2eOjaQ+b8Da5X0zsAIV/vfv5pc2LfwZMq4jkf
lICBH3KGw0NU8ULKA0i5DXAP0GbFMb32Qb8g3t8SVaWuXqC8p9EgvAGjF+mW
UteDTDfadcyMJRHeWMmZsTokvKwVy1zxTU9v9ew6DrFza52CS1Ws409S15jG
+vRCrGtMrLMXYq2H1jxHUrguW5brvpRcNxlcex1jN8x17Pq47r/ZXAd9Ir5W
NAckN61oTkNKE78H4f4MRZxIJppZw9NYw6fiRlwTy/5Vgm0bk7KWADtggk0J
b9myIi0V1byNFO/Z6I3FR60VUB3PvVhy66iuXprq2iWprhTN5rnQD9KaunlH
ubhVxPM03MO797lHdr9EgPOKgIZJN1cl0rkz0OxW0Oz7sa4FfD8j4+8yX/N2
D/FdrRcD7BOTHlG5sxoABOC2vuFJdj1Jtt78dLhJr6ILPv1EYscTv0js2PD0
/Jvb97qfXS4GtnuFbeE7zLMzJpltKWdN0manSeUsSplh079Cm6tZzhy9Jeao
ooX+/AoFYQ0xCR49R1WzyKADzGTTgWvPpmM36DWhesaw6XN+cy5B8xLH54Rv
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
+S77FPPtWnyL38sNwz22Atx0W89F4Y5H4eax84TNpGY7HrqJ7THvwNTK14J0
dKka3dVzCb1eDZvMNNAzUaAdi+h4lOjYZzjfDM4/s2/tr6W/8fTzXtlzOyX+
Rqo5l1aL8fe+Q0z1gaNeI8bfR/Po1v7+N/6SCmEUf5887bVTLi3f6ziTL4Uw
pLqIqS4qAarPa6pV/N1ffvHjb/75n3/w7KM/MsaLPD6CuYaaeudzmEsLzuzZ
FZx5MdOMjzDV/tuvv7544JnHlzIe+S9A898vPvvIP1jNK5h8AKYhjjNU91r5
tAHdvDKjly+41vIFHiUZxjTbwCVpQB3hw7vZVFEMzigXxuLq3raaTxdGJlS3
OabTFNpXRiUiT5NU2ozxZ8MiGR3pQ42rEZJZ6kHFe5uOqYLPCdqWUTNHykm6
uv8Zru0uurq3K7z55o7bN7eO3ikzp4ZC1O8oeCtjh7hacKybRynwnpU3dMJM
h+hOFWvUUyMuATjhTcky/OyFuklpSER3iXMUjpwP44gukT08Zm9OcniDQoJ9
H+ArhYtShW6ubzv2CDh+laf6h2hUZGjx4R/8AxBODS7wMeG31NYD4UWGcGxP
RrZxcATtE00sjt9CQLeT+GB7OvHN9hCSOnORbIS6p4/AHlQpsxDZ3YpsoPoZ
+j0M2W1AdmuE7EavDcLxlvpar6kGXtQ1lXJRK6ThoraQrhGk6xTSeFEbpPmi
voeRVlvV7gWk3fBU2KyNtaGa788HQtVn81imHyueww/lSQm5f29x3uQXvnoq
OJizD0HGA6/tY6lw/uRoblmB5jpDs9zTT9LHv/NKMfrelgVA7/GqswDqPfv0
HU05MrqjKfpOeUe3nTpjAQ3Rdz4CXQgwM9Q9xSUUffcC1L2lZTLAXfHBs5sf
pT++rnlZFovcmKZrXkH+i5lwdiPQSzt++J+XMh7+Ozj/ZfHAlsf9xrNn0eEB
E2Vss6h6x3FET+1OJaDRJhmCoKQ3JesRiGuIn2hGBPMhs9gKPEvCPTswpKY9
MRKH74g04lmnwMUr+TKbojti8rBwaTxOCTNXxsAoXebEDMdS6cJGU06YxaSN
Bac9ZREQAUI7lCKda7OhxNmc9jeLcWBOPobGXzl6TcfMHb0J0+B8R6voW7yY
r03pKTO+8SXQF+sls7vBWmjM2TIrUSZQm0XHNMUZel9zjmyDtmjRHsdI9diU
CcZxmtO1U2b4AMKy4mVq6Q3U+uNh2nDE1S3Ftiw4UHwL2/HwTCcmR+Gehs8X
Jc76fb+1th7RdunCdn2PCQ9KzhZhkauXM2dkzzCIQKsTwbofA3D4w1L47feg
HT9x3UVcSwjeQ3mz/k68hYBs50Fkezzv8BH8jd77za9+ZbHd4nUi181NFtv1
wDYlzt7lfnEuZa2F5yPhC7pV85yfgueiW+U5hjDzKIjC2a8/c+YTxdlfJ5xn
bgznuRvFOUkMEry6Z025vExeXiu5rk0uX8GfALboszZsLy//VJHbeQPk1gm5
lY/ZF/LfpL+RvoPTYdsBYEmH1e5FgHOlaHVELuRjH3/ty19Z/P7X8UI+4bUK
xG3iudABpxMg7rSi7B6AmAE+7/WWMMB9ZRRlj7+atZv+5E2v5wPAVd5glUBc
U8ueC3IhX6J0GKXEFn/59GNLGUwwRNn5mA6TJlKB+MeW9XGXtbQAjY+T4WWl
Yn2sO1ESphOFdxcAvLS9DHMoQHDMOK4lQ00ouhFFFhjENMETQjBXsoRgV3ku
ke9SLJoQI4xndHw9S2wmLG9kvjzl3Yxpr4kg8IuKljrMxetYN69rbl6r5Zyp
NpUosyRIFZax0WWDZxYpmKXKfBFTZM1jaGnqp3q5oFkoPKuLUybrxQuGKaw2
raLGGdG1G0ssisfDFHNYDR/jnAfDfNjgGIKsW00kHYYtJ9ODlBJzuI6FlklD
yDPijFE2nJP0fPbhwewx1CrqxigbW04ougamKcIepegasHYpxHYtovupx4RI
7of/J+AZTq9NtINBdo/zB4pojrEpzu70ets7KE38yuHDKxANNDc2eK3wYm6u
rTn5TvVb766GcvYKKH/lK3IXC8on7yDKDaug7NotZXQXd+FaKL2IXBmlEsrs
oZY0z2bqBx9UKKvreE5fx8OOgRmjOeWfpnwU8ZuSWebW8Et3Fmc1nj1n0Yos
u8paVW8wCe4BkpOhFjE6bIoSo7fyBgWyldReb5AVxOsFcvetgNy6CsjVCHL4
an6o5IktXhm2gG/P8qp27oX4OgeuZqxU5Xp1+7E/9LDXeOAI8HzUXM151tWM
8fVp817uPFNgJcCQZ4ivS0qAZ2CaKtHlzHQ5V6r+2wsvUnw9SNWqahNf15rd
InI1+/WvvbaY+/RjQUH2nuBszot+Y36+vppbTXwtlgpqpxDmwuAT6FKMLcUq
h6HeoHJgGmquWA2pTlFuMUkza4WVQRKEcsQ1jQ8EYpOE34wGamk2mTANo2nG
DNlyShKLRC5exQVuMwBCJ2GWkPAIyLhll2QDzR4MfGfPhe7s3ky8s1/CO/vf
KKM9ZO5s5DceiahturndnOdPQh1fxqwwpuyb2dzRqjlj1U1nvPSEpasmLDXU
U1j/G2EzBHkOE8Zzw7YTgsxY0safwVGKoVWeC78U04NUktLJLhrbUMmupIqp
9Zno94PzRUXY+lmEHZ9ELVemuNczTO2zmlqXwum4vnkRWh+bRwY5vYXADgCs
CGw/AdsJwHYgsB8/9PWvf7Dl5z/3euDWTQksvIAZ2KqHfvOrindtUqX6tDqp
FER/8OR3/u7OkVq3jqSm2aTa+0N0tto0g33SpNqjWnhTXaOLWM1ruTasznVo
VVey5J0DpjXUP8akOmtBNS0VqurqddQEuFzK7vpS6t8wpUMWpRtXohQhpfQ0
3LlOKlrpjiWDsoHIS5jAja87s00RZmu85hpiVi7Zp+jjfzhZlr7dq9iWRe0g
mMCqkQRW3b4DhG3DAQqazQV7DLE9IdieCiekAduu/AKvuwCwVehqbEsBWwma
yyu4wrT5R4gtfHIAXHjRU0tIDfsOUtAsnoNkN9zQBMju5iGMxhasMmErCGaw
0Gq4w0kse/9OMLbwAt5kElndvLN3hvb2ye6+Xr2pk7JYmB7p1+9gRBMNbIBa
l1CV568/Zj2BaZJS2R4YC0JpCWHHYZWK1odYdVxrqRf9bHxGrqlrej2QxKeu
4pWYTdLHNEQq+C3dptvUbQp04sHmrn+jR/BQFl+oCse5cHA8MRcJkFUJmkYo
0vQl6tAtGnIMRDbHcfz7yphtMEScOrqJS6erbDfwyZjGVTkM6VEKxhZ+WXsH
8qG+zBSlpOkovFPLrlhOW03BVxYO1pFiSC42geBXHIJjqishujHp18QPI730
YYB27CKz/Sku2zQbWo6Su/D0ELoIcLfzeYC3KwJv+wfpP/85l5UI3haAt5nh
pcRVg9cGly0mrppqKrtWILY2FbEcEvNFe0eJbbxxYrvsZV1C7H1rJZaAxYcu
v3YNrPYbV4B1lFnJ5dDo83JqtbfgiFUaxvatdaLWNQhS2GtNTX6ibF5OyaZr
s4mX6KcXzI41gNkYBfMf7Rv16w+VbNnilUMwjH0bVZl7vZrdHAzXURrqkNyo
Rz7+Kt2o3wA+j3utEAy3nTjJfGLfBgTDis9O4BMbLLtDwTDyeZ755GAY2Nws
JaFKGYUgn25x861FC6F65wGIhwlRiINP+fVnXiNbglHl99ncivFwULgvOyjc
n41pKP/soZc5DRUjPDfQLATBafVuTEtaeaaHvQnQQ2iQ2jbwO0XGGsVLiIwJ
ls04UbPGZbKr4QyUJhTDYIcN/XEZ3ATZ04mhf0yZkshg4wPh2Yhx+58zkbSU
7q12zAZd+A3skUeTDiLYzDUL12vfsms2KdfsOcsCYc6memL5M5WHllw9tCT/
X+NzNtf0XmW2iesZgXuB3uNs06nBdqXN0r5v59HSQfVsKJ9eXlrPQKvSEI9B
UFJZ56NGeX5xlnJR2HTDPZYjVi5qagB31wvV6vhFlI86FQtKi4ocF4tFGC4L
1vSRwKYwuQ/fTcC1S0gnEWdvOIw0J6OGerCxcqg7RDXGyT3OF6lMhGHyAAJN
UHfaUI/nHT6Mv5t/7vXXU0Bdz1DXVqd7NZUOX7dfT7/w5PNrxRmu27+9IzgP
KZxdwbkpyN+bhY+Mxmb0eFgd5ztM8/BN0+zaNNPDcBr+xJZbWCqaLZjTVoPZ
0ZOCfJsqmHUheE53ZFtzU3cJyHQxU6e0uY7HKAcl+WR3PaHtuw60fA+nwcf+
lcB11ofc937z1lspyW21yJX7+Of0cbOH8fLF7dyiUbMb4uW9+7y6HIT3gNeA
iSm5i7/3ta8zvHDaIF5uO3nSayd4T3sdAnAnDTwYgAleeFchvL2lpQRvf1n5
+ImsF0hoSg8dppLQgCSmBN7o3jykV/z80CNI04tlIW+sha15geDFH3zrr/2m
ouIU221NL+W0RfB0j6zRS0hdaFBaKckvyIlJempAJh8SaoGesdlXTZTWhvq4
JKa04b69T499B3BZPYXLap+eRNAOL7JWzkLWwjjBwQwxavsBbJ7mbBCgdd9K
dzDewEv/lrVD7uBibRw4pxbWCIu6g4rZt7VhLqaTxNKhwYliPXw4YcYbyC6A
bYEE3mndpWENO/BMIsI7iSem2yddzlIFl7hpUl/AoeouBdR+6CKGY9ozZgaV
UT4a+KHVLs6wUC+031b7NvZCE8fYt+GjlYBPUXWMSkEMMuCLh0F2NlGCSnGc
iuXhnj4kGR31e11NsIqkDb4dgm874uv1trXh7xDszdwF+DYDvk2ML0bSDbVe
K0TSLbVV3RFkqzSy+1Mh+8GT3/5bC1m+b28R2feazrx+w8iOroLsP9xWZNXN
e/fxylfhJts+RLFq1maaFRvXQXVTFFVdov1EWR369LI6/sp/Pbgiq821VY/b
t+w30y88vcOr2LbTq8zY7VVDmFy7J8ery97v1ecgsoew/APIfplu2eajeYys
hMntiC0hy9jayGJzcw81QhZ7vZiZokbIUkC2zOsvr8A/6QfPbX5UwmTTfMHI
wqnVuWTshETv+2bnC9bWuhCx3ngrng68aIOi3JeCogP7uATU3qOpndIb7LAj
coN0RA5EMlMaWSLWpeaLRGR7HTHraB/d62ysVbPDPLAgmSlZa8ns3hdNMQuz
8s9xM8lwdUw6JCVtdHViBg9XX3CCl6nVt+17mdvwtsV01XZn47LLlv71yVCM
Tb/VnO7FNI0VjqbcctdzdboqJgvgx2fCcbFGlgo/bMiTxqyOTFq29aZ3iuLj
mMwlBOZqlX6LUW6dQp31JV81qJssuPwTE9t6oBTYLKZzMGcfdVkQpy5yCp8u
NY0gR4XIDKoLHwfgEKROjD4mw7D29jGs3QwrWtzjoL/f3eP5XT2UsBrs7EZy
u5zPwcdOobZdqG1Daj/+S6wEPfWk1w3BcVczUtsI1PKztrWu+qT36yqnW/Ga
bvGaJbzmAK/7Qrx+8PjfwBW7Bl67VuW1zOZ1/L+9sPs6vDasxOvoHeY1uD6v
ru56vC6lXAi6fzmlozOrkboiqKa9gRowZq1LdnuMuzAkoNV7n+bkbr59aDob
rSfr7aczbtOJt6j7yYHZfxNgttTBq7WuUgyynKfp4+e98q0ZFAJXSwhcl70P
7tJcrwFC4Mbcwx9/9Q/lLj1yDNjMAzY5BG5HPk+djiGczpeoj7Er36BJGaci
hWaoyPPxN//sz/VVOkjdFFV6St9nNHGuoN75EpLJQ/oyqH/JrJjQfjqCJmWd
8g8f8cbbO4PiA/vg7A+KD+43WadO+NwinwlxyBuwxgDFjt6xRgCpbsAdFWyU
p7oqRpa701OtR/cqO7wsLs00V4QWxtFUIK40pkSptS3OMcMHU8oPl7vz2fla
2hxNRmrCXhxPrjWzwW8L4SbN1Depw1fphtBVOqauUhPfmlvUDratMb6EpJDG
dYOEZW5HjI6pBawzeqYvrponDKTceIytxrZNDh0MQoJhbqfAddy68iNRLv1z
JAakjlKgO2JaFbFoPk3W8tP9w0FZURGdUizv4CiBaxoq6G0DHznLFLen8bkF
SpV+LGxH+rBpArFNhJHtxoP9icAsud31MrIa2+7wfdrB2Lbb2LYisvRbdkME
TNg2NXjtjXWALb1WH2r6VYXTo3h9Lsrr/iivcJd+50Z47V6JV7hK+8p//3id
WJlXuljdW6FUMrH6ulTXKOIXj96UPGS0OpeuWpAujlUL6iHKiMbMNeraeDp3
B5/F9yyf8EK1+Qxdq391svyZ5yHszfSqdu72aiDsrdubA5ju9xr2IaaH5Fr9
GmGKYS9jesJrP85hb8cpDns7z5wBTpFVxWmhntdTrPK9WvbBs49slvmA14HT
SuLUr1LVnFrpJ8Ynan1QQKAqBxyC1WGzug28o402rAOoBCzP/Ey0d5qKzqbg
3KH9cHKDkkO50kBhmigkwcRFnRnqSJvtMwkmGvvh+k7MCoAvq8PlHcd6q8ZN
s6KaF5jH70Rev87T9jJ1z9w69sJl7D1YoIXLC9QgtTBGiSjlO6/a/gRkcWcm
00bO9IxZgAWDcMG+mxl+qsbwapX+p7Eiulwd5ZRneT7LbzfB3YYQwF5R5u4E
7bQFrv65Y8Mrc3jOsoF5ngmg1yrzC2HviJmaVxVYYJg9Y+nBP0fGgDbG2LcI
/0Rx5ZSSrxnm7gqKiGlWDwAudmL0MSnjAdRYgRQLzUOuBlnSSzbJ3LkIfwCk
eIQp5mMFyZd6+6xUkyZaB8k9cJchyT6STDR3UcIJn66Mc7vgTCh7PW2t46/8
1wOceDqYCzhzhNzewE/X1l9X/YtCOD2K8L4ownDTfjslwh23hjBctRdvP8KJ
VAjTWEAffpkVwuTwe7sZdo1jhvKlXA7w9K0AbHmyhmZ39Q3Mz1HOVunrN/6p
gnjkZiCm2zh+j0H8hH0d/wUNDlRA5FyZAZFz5h6vFiLnenjpNuzL9Rr3HwCW
/3Dxe1/F6/ioZKGA5+PHmeUTp977Ve5B/+wLL/iFu3f7RS/i2esX7832i7Ph
5OT4517a/95v4N/HfsY+4Lm/rGz8xK4syUK9oFiOIczwHUO1nhpd6wGUdwHG
DTK1R5N7gnJCwmfBmZDucGL+2UNH4DtHT+BiJgrjGJwdSAbnDh8ISvAcORgu
98z0qnIPdjTS4QZkq9xjNTVuUEN7ehBXOcEzxFbdR4YH0CDezPKZ8HnSURud
lE/8wsiU/jWz/kUgVvP3hLME14pmMsCwb+Bt/MKNwxW83U4WUyopYdoT0ZJ9
hkCWGg3HxfKmTbMrNQZdnIVXpq+cC3ZtXh3+tYR0NHLmKaCj2p7iZk05dxxT
JwXtLlbtFDp2Ho1JAD3IhjXDQCswWqwYdTF61l2NuOwUImS/6NWTmCkGTAfx
4H07GJfZgHHAcqxvAFAtJFQHEkgnjvP0OckPtm+xoOzpRSiZySFgMiFhcrfN
JfUydjoPegPAJHPZZnHZ4vW0NlOtZMuTj3udzQ3AJb9jW+soTv6XEJA7DZB7
cqJAyuW6HkCWfgbkMiBp95LuhLphDF19Pc6YJ+yEeeOunTzXJo/+12nJMM2T
E4WsIozJ5E3otqTW4VFZfbRBkWc9WX9fyGu9LnlyIz7DeSSIbrd7F7ft5NYH
jG6zc7wGiG4b9+Wa2/Awwsd5pNY8hO8EwHfSP5v1wgaypfzK4sPf+pYOYvu5
XCql0s3eQAUHsb4KYgkyAQ0gy39xF4/e1DFkI7S8rMnudIhh1ggiCI5jO/QO
s0memGOLt016Xbg0FwJrB4G1Q8H5lw/5beUX1OAchbE8epNQOSNaG248ZFST
IfXzc6oooWdw5g1w+B1KXaxAl3p26nZ+CzPdbsi8hfsdKN0bl45/+N5/0A5g
8VeiNx2TRtfcdiuZW2R6/AhclQiiWXK+28btxSPW8hHFHzZQIm3j2trczJ0n
tH0qXXSI2JSgpj3ZODCl6gq1LXBgGqOuhQctx3PNG+Jml1yCC8XFcIqCC0VF
3gxbwZjeBQYOs0SPeVN9mCXCBCDQlkDaCDZ4zgBqCBodSQ3BnwqTQ2nwsQ9i
0j7vUg8dG0D4nYaxcWGIA9Hubgu9LglGORANo9cq6DXDafr4L7/2VfoNO5vq
vQ5KDlV7LbUX+4S3N4U3yttmZUd5++Dxb/3NTfDmv5Gbuwbe6taVt41r4Q1V
VMEWj8LmrgdniShnVkwZV6CpE0UtHkXNLAR2Egqz0BYPd10YG7cYG12dscnP
GEvB2OLD3/uuzRg89t560r7avkyx5UV57NVkYWzJjz1ztX3Vaz502MSWeXmc
uGHU8I+8+MNvfnP8WPrW8WNbnxt/5Xk4256PwYdtjjv+yo4dCkH4W/WVljr3
ffzNP/szzttUVACCgGFlJTfSW1fecG0dIoifiboGCFaG63lYfER8TUebBMNm
qpXwsHhchsV/zKFlGyLY3g3fI9h4MGU7tXT2OezokPBbL1wAFA8H54/iOaK2
bfPEqSbRlEvm+tnhVB9pzr0szfa0SGSU+oW0Zwv11pMxuewUmacMBedjVb+9
7rmnNxL2JCRNlMk1T9Ukp6y75UdsjJri/tuGYOIgTBY++eT+U913LjcH2DVK
esehVoQ9VXiwWxVAEsZ1VE2nURcF42iuu4kwjjE1yYI+pPZcCzsmudaKzVF4
tgJ90p8n7DF/0xJQqv54rH9QeEkkThKJRGNMh5dxgtENzguMAKKDNRF4UYwI
j0wiHMzCAH8Ji0YON4e7exwVbw4hkGEo4X8b5Hizs52hlHiToWxRUEK8+Y9U
dqguK/HaG2q8trqqdK/mzT6hsWJLChpz9oUvPqCx5Xo0br0RGhcf/fa3bxeN
T69EY+91aDyyIo1z9wKNYdv98Wl1TfJ9yE+9eOQKnAnXH01ahRsGVkSSSpK4
V4dZlGnRqdvK4tDdwOKmCItdckF2wumwWYwhiPAZSoXir0IoXhCnI2cLfXyI
YtFKikV3UyYUi5MQi3781S/J5XjgEMSiR3Qs2saxqJ+fRQmUD5757ne9rtOn
va4z+V53PpyCAq+H+vG47b2XevKwqoGn9INnH3mEC5OvnfEGK0xlw7S913jD
NbXA406sbBCRMaQRc8eKRz0+KoHqWEsb8yjjZkeQSfYU3SBuKmrijG9Jan7v
Uttv1aKOoBSwLD32Mh6/vfwtNlPpMwkYYDKpHoiWpQr805esTJKzMnDm6QiV
srsjJpUOPYi27GWYMAs0R6XUod6LriA4ShxOk0OnehkWproZ+WLcsDT0Al+M
1pyXfSGGgOS+OkevtyIYZwhItZRybMrkYNTE9uiyUPUSsYmvaHQ9ZyjN4OfQ
uA5ax+D71tqCpYZA/Y633wnKi88BneeIUHImU0mZ6UF9aVI6hnD1ic+YX5hH
fmQMJ7LpUDKGLFISRGicQtdRE7YipH1xwjLhjSwLWdEuC7BEKrud+0NE+l2d
qYikm7GvDW/H5hjy6CTGXzmwn3KOR/Zne+3wImytuej0E4Z/4pWnbwMMM8MY
7iMM+VZcHwz5VnxgRQr920RhkiicsiicZgpjBsENqyEo/bHUGZ0CQMddnb5Y
aHPOuDUQmohyqF6O2qffAjElh3HFoUqM8vxKXGGomLNuv/idZxA/N9LAM6cO
k+jeFITUwrMKehNrQK9/vdBrv1H0WgC9p0IXYfqFp5+n2LRaYtM6rELk7OOL
8D/KRSixaeuxY0BgHhB43M/ftUsI/Hsm8PQZrxspLMgHAgsiBJZ4fedLEMLx
V/m/Gz+RlWWCU52x0TPXjGBtHWJICDZAGM4IcrbGngUbszrVx1vbjbFYexeX
+ic7pA4Rl2uwV2oQCkSVraEOdQDwIua8816GD8ePIno0hD2k3T2DQXT3VADq
tnWOTbHIP2SZ9uL9d3mYav+XrF7YEV32h0CVqxXKxEhV/FPkc4gSJjPGg2TI
DGZepoPBorPh+zDLfim6fCH+/+y9C3Bc53Xneau7AVIPW7LzTpzEsRPbtJM4
iRPHiSNb2vipB0nwGVKgSDGkSJFiSJMmhQEEGCAwEGDAwCCAAAHudKdxu6cx
nW51TyMYIA0DAoIAAU1GVlvZ2Zqd1aSmtraWU1u1NbWlqq2trS3s+f/P9917
uwFSJEXqYdtVp4FuwBR5z+9/Xt93v9vBhKhPewuuMViV8S7oK4EHPF665hr9
a54IywgPZQ6kqDavOvXOManMgbM2B26yW9ApNzXMZzpFgnHIThckzK1dZh8d
rj0y4N1ckMCSvW8lsRkRJRcjylu/zIp1E8TI6Q1XIYwYlyjESRgOz76uGEMs
T39WXvMsTmer9FiqSoXTmbRoMmU0Oe4WtTp1C8m4mx+PUTlbv/plW51OvbkY
X//6b3/6NoqRVelywx0V48TtEWP/HRLj3B0SY9j0d5cDZ//UWDH6t3DYHTE/
DkosvXNKnFqnxIRVYqnzuYZqJZrsWMfXP9H6dK/fJkYPH33joz/105IZP+qO
nzgpYjzlJqU+TUl9mhZBqhj365/6h591sxRjs4ixhfVpwdan0pdAjJM2M3Z3
vxRvagqsY/S50wP93G9OMfJEkmEV46H9vHVrfjTqzkuRikX6BRjWM8xaRvXB
BsvIjFWCXNGHUASf6Ijj63kgmNnLqoeBTa47DMy/U5pzHM7Me8+fFYGeK/c+
e070+p1nz2Pbh/9MZuyIwyLHwvrN53zHRyW8Nhe8GROC3FRx84h5+qMZ5VCu
FOg/L/obXMOeHO3DHOwPly6VZ9ovVm2bObBH02OtpMe9Jj2qQs09yiH/CMxK
fdoNMaYojbAUra0a0axCkXgfoioj/nZyUeSrC9oe4mXZ3u+sqiz3PS8KfL5T
Lqzo0MxurpSWOLvhfjYjRKxreLvaQv4G86AazQCHYrw0OVPqON8gJWvDZhHj
NJfppyjBJc5q+CqyvCjfUZIOnvQ0WeNrUvS43erRjG1EjVqq1pT6Ojrf+NQn
Pq72cdjHnPAbn5TXu9/45Mc+9saWj/3GS7GhfiNEpkM3Nx594+O//hH+oamR
/mmjvn6rvvoK9WkqvL3qK3376ad/or7bqr6aavV5v3CZurMLgv5sxtOc8zaI
jrnQngOCBVXkwrDVHVUX+lHQXgjaC0F6zl3XE98bH//or0mD2G+OGTAp8HdY
kw6amnSUNekREeFPXf2cTYEnIcLTbkpq0rTWpL4IPysibGqkEFWELW7BCrGj
XUTYISLsrBZh+amt29zpPitCrF4McE4zSxGOlFsP7uOS/twIa1IRohFhdN2S
PpbzU5IJlnwNBuY0WbsdPOyVpSF9AtNlPlXWHM3lviLye8WczsW1/IpN4JyT
OryPGdIrf6fhAtiR15pyX+OzpezwsNmxtiCCWwhuCK9cwvAenzgXVNxK2BSo
OpuxxShnNKsUnHOXua/JCpHjG5Ptdtts51B2mIxi68wTe5nxFiXjBR/6LcoK
B5+04D9B2ExdKD1fdVidKFuj+i5hudA8YXiTaGwVkhNbVr1xCrPM3Gb0pdXm
88+7r8zZJ62Ivqi5RXsjVamy8JwPaA6DmDlv77a1km0CMZ1p4HQGb6epuxq8
YjozVVOluaUi3O7VoPJaKAQ1F/blFin1d7Rf/dMHHjD2J6GrDz3wJ869Vx/6
k89ffdDa5/9IBNengtPm76UX+7rwx73xsY/+GkpOzXZ/fC2hvf613/7t94LQ
dJkwmfoRV1qkWml+xlN5mRsczHJeRSJTeTleDrsculVdbb6erqAqSOt5XBSV
lTfdvMKbIkRU71ZN9d2spmJBTV39k89+BpoyOWyHSott3PDeendkv0jr4GHN
Xx/+iJs4fkJkddJNnoKsvEKy1LqvSlZNTVpIUlYtppBsc4sirUlPWt3lpx59
VM+iO/G0yqqvv2IFXtcZho2sRrHWwMeBzvORRVZWKq3FeELXGkRaS+NJb6ay
hHuH01pIBmQlqgrOVmrc1Vyx6p5E3I1yhef1opp8RR8oyHV4VVrJ3MzE0Yp3
Q5O34oBJy3zpb14YhuIan5Xeva/pWbGGxXH5p5Znl2q8W5yW/VuczOofFhx0
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
E74rRoymuqmpAuxamsrBAprKimVUUx+gnmazaZZwNNHSzDX1ZMu4oZde6GrB
H/eyY19UTa9/+WMfr1BT4japaSqgpul3i5ryFWoKQUhA4DZIiRuUPPWYGV0k
8HjZxVsSUzgoJifk9U449crkI5N6mHkqTtuYt7sb8Hp3tZ74Xudu7zlBMWcV
ISjTIa2XVoivNfKatz2SVRjndTkncicVVpG2fv6/3RuJXP3ML/6SO7q/Xiq9
g1LpHWalNy6V3jgqvVMn3fSZ02767GkR2hkRmojtwjkzaVCxFSC21ia32Npc
PvLVL+uE++hhCE2qPKn1Piha00EDhw19Pe5Mv2ptdqBfKr097hx0Nig6Gxqm
1uaHR9x5am1UdaY3W2J3UhzLtFi2TSTMrIHzBsoMR9Cl0s4mc7TABJ4maaq8
rE1Z2KKUrd6Ze9k/YwA6w0vRPJBDWJKqROs7e1RrLfcomYOTMQjXycPUnPfA
dW8IoSe2vsqx8KvE8NVZvuc7JjIzh3gViPOIUhxC8wF9JIV9QrGeY6pJ60B1
0tpdmbQutgVv5eeDLsyZGmZV1V9dNdWfERUNolrSsfZm+7Zyx+zsog4adMiN
4jUwczDbkBBoLnExwJ8yoChc5eRBlKaFIE31FtKKcAVnOAQF5+htJRFTIE5Z
w8eTvvIoPOhNklcp+eILJffFF/xUxrmer7XFQi5MqW0OSC1D05lE2mgtpcXh
+4zUVGbTE3GRWsxIbUyLw7gUh9GB557Ys9Ubi7/sa+z1/+Gjv76hxthNnTpl
NHbmuhorXl9j07dZY/Hraiwc1BgcK681XlkoCjOGgHepIpld4VbAtyqyMLSF
/UsznprMo86q1KWZLazPQqOMsGrj6SxSrTM9OthuCeKPrMz8A2rCfrJ6F6jM
Jq3ra4uyKqm0psxh/jevLcllLfjuzbX1c2+mLZPHktcQV/Ra4jq0Lo99Gg3Z
f/mND34Qux7caP0BNxYsGo3O0qdVZxPIZdTYWTd34TwmFtRZobmBRWOxpenq
Fz/1yTe2fOiX3EnJ3FMdbSIxFI0dIrIOLRp7tGgMCI0ji7nBARVahchUaAsQ
2qhfOC5i8ZaPksIS7l3uUsLst7V3mSTN6CKVNmLDdkmvdBSvZLQRk7KRKuMk
PV8wJ+bYhzfWupcLk2ZwMeXfb8lbTYq4d+GVYikwWteHAYQDD5x6lQWjPXzc
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\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"65d683af-c83a-a449-9426-a0488544347f"]
}, {2}]],

Cell[TextData[{
 "Each of the six states shown above lie along the Cartesian axes of the \
sphere. For various historical reasons, these states have alternate names in \
the context of quantum computing. However, they have another interpretation \
in the context of linear algebra. They simply correspond to eigenvectors of \
the ",
 StyleBox["Pauli matrices",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellChangeTimes->{{3.9442466395054417`*^9, 3.944246698927992*^9}, {
  3.944246776705061*^9, 3.944246807473341*^9}, {3.9442469044892616`*^9, 
  3.9442469577452374`*^9}, {3.9442472364977856`*^9, 
  3.944247237865135*^9}},ExpressionUUID->"dc13719a-2890-0149-873e-\
5ad8ad71f67f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"PauliMatrix", "[", "k", "]"}], "//", "MatrixForm"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[200]:=",ExpressionUUID->"2e9d2715-f207-f04c-a9d9-626457c56d8d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "1"},
       {"1", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", 
        RowBox[{"-", "\[ImaginaryI]"}]},
       {"\[ImaginaryI]", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "0"},
       {"0", 
        RowBox[{"-", "1"}]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{3.9442469269538136`*^9},
 CellLabel->
  "Out[200]=",ExpressionUUID->"b362661e-7108-c34f-85e6-ee093950d97a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"QuantumOperator", "[", "k", "]"}], "[", "\"\<Matrix\>\"", "]"}],
     "//", "MatrixForm"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<X\>\"", ",", "\"\<Y\>\"", ",", "\"\<Z\>\""}], "}"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9442469890342903`*^9, 3.944247020057953*^9}},
 CellLabel->
  "In[201]:=",ExpressionUUID->"55000fae-5e1c-4d42-8e7d-782de1305c49"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "1"},
       {"1", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[
     SparseArray[
      Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{2}, {1}}}, {1, 1}}]]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", 
        RowBox[{"-", "\[ImaginaryI]"}]},
       {"\[ImaginaryI]", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[
     SparseArray[
      Automatic, {2, 2}, 0, {
       1, {{0, 1, 2}, {{2}, {1}}}, {Complex[0, -1], Complex[0, 1]}}]]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "0"},
       {"0", 
        RowBox[{"-", "1"}]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[
     SparseArray[
      Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, -1}}]]]]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9442470243551655`*^9},
 CellLabel->
  "Out[201]=",ExpressionUUID->"db6a5526-37ab-a241-a7dc-1015623f90b8"]
}, Open  ]],

Cell["\<\
A future lesson will discuss the matrix representation of quantum states in \
more detail.\
\>", "Text",
 CellChangeTimes->{{3.944247050265232*^9, 3.94424706462529*^9}, {
  3.944247127154648*^9, 
  3.9442471354814587`*^9}},ExpressionUUID->"21257b2b-9049-be45-aeb8-\
5ece065bde1d"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{740.5, 441},
WindowMargins->{{Automatic, 56.5}, {7, Automatic}},
FrontEndVersion->"14.1 for Microsoft Windows (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7cd78897-09d9-ab4a-bb43-1972cd562b65"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 176, 3, 66, "Section",ExpressionUUID->"980bf7e2-554e-0a4b-ad5c-b59ac0e49f18"],
Cell[755, 27, 214, 3, 50, "Code",ExpressionUUID->"1d74e3c1-e772-e543-9862-b586cb810fb0"],
Cell[CellGroupData[{
Cell[994, 34, 162, 3, 53, "Subsection",ExpressionUUID->"f7f4068e-7cfc-7b4e-8e26-1c6b5d1c6413"],
Cell[1159, 39, 208, 4, 30, "Item",ExpressionUUID->"12c94018-20bd-a84f-b7a8-d2f477d58ad7"],
Cell[1370, 45, 253, 4, 30, "Item",ExpressionUUID->"22a4d4f5-eb63-014d-81c2-3be705068ff8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1660, 54, 222, 4, 53, "Subsection",ExpressionUUID->"d38d9080-ef74-8a48-83db-3f1048a2fb28"],
Cell[1885, 60, 698, 16, 55, "Text",ExpressionUUID->"c76afedd-eb51-9940-8db7-cfba24c03154"],
Cell[2586, 78, 419, 8, 55, "Text",ExpressionUUID->"3c694177-1269-614b-b3f1-363b318163e3"],
Cell[CellGroupData[{
Cell[3030, 90, 324, 7, 28, "Input",ExpressionUUID->"bf176c13-a4bf-6f4f-b1f8-4b9532a54520"],
Cell[3357, 99, 20416, 421, 133, "Output",ExpressionUUID->"8ec7ebe8-a1f2-c546-b0d1-ca2dd836df8b"]
}, Open  ]],
Cell[23788, 523, 432, 10, 55, "Text",ExpressionUUID->"aca57514-2416-0148-b373-4f1bc6f22887"],
Cell[CellGroupData[{
Cell[24245, 537, 222, 3, 28, "Input",ExpressionUUID->"1495014a-d94a-5b46-a859-f5f67ed8ae91"],
Cell[24470, 542, 5580, 122, 449, "Output",ExpressionUUID->"775900f0-242d-2440-bd49-991453df473f"]
}, Open  ]],
Cell[30065, 667, 251, 6, 33, "Text",ExpressionUUID->"eec33253-06e1-3b46-a4b5-1d030bf5ce7e"],
Cell[CellGroupData[{
Cell[30341, 677, 279, 5, 28, "Input",ExpressionUUID->"77e8fb2e-66d5-814c-bcf8-d1ef4c5db20f"],
Cell[30623, 684, 10503, 210, 59, "Output",ExpressionUUID->"d56b0e5c-32bd-1942-9fd5-08981c150e64"]
}, Open  ]],
Cell[41141, 897, 445, 10, 33, "Text",ExpressionUUID->"8b1c1eb9-e994-f54d-8cf5-7e2aa28bd821"],
Cell[CellGroupData[{
Cell[41611, 911, 268, 4, 28, "Input",ExpressionUUID->"f0913117-b09b-1f4a-8909-08b5f7cf2395"],
Cell[41882, 917, 875, 28, 50, "Output",ExpressionUUID->"b3ffce00-d184-1e41-b935-d743e7d84f8a"]
}, Open  ]],
Cell[42772, 948, 737, 16, 55, "Text",ExpressionUUID->"4b383d46-fd54-9543-a689-d631ce54e965"],
Cell[CellGroupData[{
Cell[43534, 968, 1033, 24, 104, "Input",ExpressionUUID->"b94aadc3-0817-7148-9338-9bf47948836f"],
Cell[44570, 994, 77217, 1595, 112, "Output",ExpressionUUID->"a87c42fd-75e6-d449-9a00-986182c3cb36"]
}, Open  ]],
Cell[121802, 2592, 252, 6, 33, "Text",ExpressionUUID->"11721df3-bf67-4645-8420-c8c7e3703d94"],
Cell[CellGroupData[{
Cell[122079, 2602, 299, 5, 28, "Input",ExpressionUUID->"ef06d25b-8006-2845-bfb6-79bb260dd275"],
Cell[122381, 2609, 22904, 458, 336, "Output",ExpressionUUID->"50996b1e-ccc1-3c40-b7ed-db423daaa794"]
}, Open  ]],
Cell[145300, 3070, 237, 6, 33, "Text",ExpressionUUID->"f52a33ca-52d8-e346-8b53-b881ac843d3a"],
Cell[CellGroupData[{
Cell[145562, 3080, 229, 4, 28, "Input",ExpressionUUID->"1301b4e7-8e3b-d847-a53c-aecde0e95699"],
Cell[145794, 3086, 20617, 441, 59, "Output",ExpressionUUID->"890e1f7b-d57a-2642-ab69-a92d678d2b73"]
}, Open  ]],
Cell[166426, 3530, 306, 7, 33, "Text",ExpressionUUID->"a8a694a4-69b5-844a-ad7b-d3bcec4e987c"],
Cell[CellGroupData[{
Cell[166757, 3541, 278, 4, 28, "Input",ExpressionUUID->"8662848f-e0ed-5f49-8193-0fda47853350"],
Cell[167038, 3547, 152871, 2884, 62, "Output",ExpressionUUID->"b6542d06-b0f4-1e43-b6a9-cf8d1961462e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[319946, 6436, 224, 3, 28, "Input",ExpressionUUID->"a484b42e-3605-cb4c-bbf0-41607dc3f245"],
Cell[320173, 6441, 955, 28, 45, "Output",ExpressionUUID->"9197ea61-4195-7547-ab86-84be3566420b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[321165, 6474, 226, 3, 28, "Input",ExpressionUUID->"fa724cde-8977-c645-bffe-4ae072ad28ef"],
Cell[321394, 6479, 4699, 119, 248, "Output",ExpressionUUID->"fc4e7602-7a62-e748-9ff7-6dd992967888"]
}, Open  ]],
Cell[326108, 6601, 294, 7, 33, "Text",ExpressionUUID->"809f1362-83e1-534b-9a5e-3ea632383362"],
Cell[CellGroupData[{
Cell[326427, 6612, 338, 7, 28, "Input",ExpressionUUID->"b63e4135-2d54-9a4a-8cf8-c934bfeba182"],
Cell[326768, 6621, 966, 27, 35, "Output",ExpressionUUID->"6c5ef8a2-f29e-5940-8ae6-2446b522d925"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[327783, 6654, 181, 3, 53, "Subsection",ExpressionUUID->"73641f38-d6ae-9749-b8ae-b3cf4dabd13d"],
Cell[327967, 6659, 588, 10, 99, "Text",ExpressionUUID->"0c530d1d-366f-c440-a1cf-ae4eecf311ed"],
Cell[328558, 6671, 193, 3, 33, "Text",ExpressionUUID->"782e2f56-75d6-9a48-9711-46ef71e1de75"],
Cell[CellGroupData[{
Cell[328776, 6678, 1190, 30, 123, "Input",ExpressionUUID->"3d582180-17ce-fd43-bf26-f684b06d48c6"],
Cell[329969, 6710, 21119, 431, 323, "Output",ExpressionUUID->"7e0ddc56-3b5f-9740-9e02-e174ee3cac77"]
}, Open  ]],
Cell[351103, 7144, 278, 8, 33, "Text",ExpressionUUID->"ee8fa151-a194-e242-9c5a-f065b294294e"],
Cell[CellGroupData[{
Cell[351406, 7156, 272, 6, 28, "Input",ExpressionUUID->"01152b56-380f-ce48-a21d-4c78b4429fd1"],
Cell[351681, 7164, 177, 3, 32, "Output",ExpressionUUID->"403246f1-4947-5b4c-ace3-92931e2f4cc7"]
}, Open  ]],
Cell[351873, 7170, 276, 6, 55, "Text",ExpressionUUID->"d9416d0b-5241-7843-b072-651a67ba0ddd"],
Cell[CellGroupData[{
Cell[352174, 7180, 261, 6, 28, "Input",ExpressionUUID->"a94f76e9-780a-1240-bcb7-76df2042e414"],
Cell[352438, 7188, 4679, 120, 248, "Output",ExpressionUUID->"4338b4fe-2b53-3b4b-ac93-bc24833486c6"]
}, Open  ]],
Cell[357132, 7311, 322, 7, 55, "Text",ExpressionUUID->"593bcef1-8cdd-6142-8841-af3b0ddd963e"],
Cell[CellGroupData[{
Cell[357479, 7322, 768, 21, 66, "Input",ExpressionUUID->"b6031aca-727d-2542-a474-c4643df83cd7"],
Cell[358250, 7345, 13745, 287, 449, "Output",ExpressionUUID->"47c2f40b-7d1a-1447-a80b-17511ee2a3df"]
}, Open  ]],
Cell[372010, 7635, 227, 5, 33, "Text",ExpressionUUID->"a59c1878-dc0c-0b46-9ff7-d450e9c69da4"],
Cell[CellGroupData[{
Cell[372262, 7644, 228, 4, 28, "Input",ExpressionUUID->"bc012bce-26e2-e443-8e75-6acfc9099af7"],
Cell[372493, 7650, 153, 3, 32, "Output",ExpressionUUID->"3ccc30ae-9484-eb4b-b475-69a042369b09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[372683, 7658, 264, 6, 28, "Input",ExpressionUUID->"1ee2da96-0ab4-f540-899e-fed84d229fce"],
Cell[372950, 7666, 4679, 120, 248, "Output",ExpressionUUID->"75276872-a234-fc4a-be57-3778501ae258"]
}, Open  ]],
Cell[377644, 7789, 309, 7, 55, "Text",ExpressionUUID->"e7db0b8f-4bf7-934f-b14b-f528deca4221"],
Cell[CellGroupData[{
Cell[377978, 7800, 364, 9, 28, "Input",ExpressionUUID->"b5c6e769-4526-fe4a-a385-403416c5813a"],
Cell[378345, 7811, 182, 3, 32, "Output",ExpressionUUID->"8df9a180-85a0-724d-874b-305e7296e6c0"]
}, Open  ]],
Cell[378542, 7817, 296, 6, 55, "Text",ExpressionUUID->"d381e617-fd2c-5f4f-a859-166b3262ca1b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378875, 7828, 165, 3, 53, "Subsection",ExpressionUUID->"1834b8b2-6b3f-2246-b91d-17b17f2acbaf"],
Cell[379043, 7833, 430, 11, 55, "Text",ExpressionUUID->"3c848812-abb7-5a48-8b0f-83651be0a115"],
Cell[CellGroupData[{
Cell[379498, 7848, 352, 7, 28, "Input",ExpressionUUID->"d7456596-add1-b444-9886-2ea22f90c7a2"],
Cell[379853, 7857, 208, 4, 32, "Output",ExpressionUUID->"74509634-e4d8-2740-ad9a-d64b5d70876f"]
}, Open  ]],
Cell[380076, 7864, 194, 3, 33, "Text",ExpressionUUID->"c06720c8-ea1c-6c40-9ae8-8da5345eaddd"],
Cell[CellGroupData[{
Cell[380295, 7871, 1723, 44, 123, "Input",ExpressionUUID->"ab075f60-1e52-f74c-870f-1af608e42d24"],
Cell[382021, 7917, 672101, 11218, 717, 158338, 2796, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"65d683af-c83a-a449-9426-a0488544347f"]
}, {2}]],
Cell[1054134, 19138, 678, 14, 99, "Text",ExpressionUUID->"dc13719a-2890-0149-873e-5ad8ad71f67f"],
Cell[CellGroupData[{
Cell[1054837, 19156, 287, 8, 28, "Input",ExpressionUUID->"2e9d2715-f207-f04c-a9d9-626457c56d8d"],
Cell[1055127, 19166, 1734, 52, 45, "Output",ExpressionUUID->"b362661e-7108-c34f-85e6-ee093950d97a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1056898, 19223, 500, 14, 28, "Input",ExpressionUUID->"55000fae-5e1c-4d42-8e7d-782de1305c49"],
Cell[1057401, 19239, 1993, 60, 45, "Output",ExpressionUUID->"db6a5526-37ab-a241-a7dc-1015623f90b8"]
}, Open  ]],
Cell[1059409, 19302, 290, 7, 33, "Text",ExpressionUUID->"21257b2b-9049-be45-aeb8-5ece065bde1d"]
}, Open  ]]
}, Open  ]]
}
]
*)

